define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "../base/enum", "../base/util", "../base/constant", "../renderer/row-renderer", "../renderer/cell-renderer", "../models/cell", "../services/row-model-generator"], function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, enum_1, util_1, events, row_renderer_1, cell_renderer_1, cell_1, row_model_generator_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var BatchEdit = (function () {
        function BatchEdit(parent, serviceLocator, renderer) {
            this.cellDetails = {};
            this.parent = parent;
            this.serviceLocator = serviceLocator;
            this.renderer = renderer;
            this.focus = serviceLocator.getService('focus');
            this.addEventListener();
        }
        BatchEdit.prototype.addEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.on(events.click, this.clickHandler, this);
            this.parent.on(events.dblclick, this.dblClickHandler, this);
            this.parent.on(events.beforeCellFocused, this.onBeforeCellFocused, this);
            this.parent.on(events.cellFocused, this.onCellFocused, this);
            this.dataBoundFunction = this.dataBound.bind(this);
            this.parent.addEventListener(events.dataBound, this.dataBoundFunction);
            this.parent.on(events.doubleTap, this.dblClickHandler, this);
            this.parent.on(events.keyPressed, this.keyDownHandler, this);
        };
        BatchEdit.prototype.removeEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.off(events.click, this.clickHandler);
            this.parent.off(events.dblclick, this.dblClickHandler);
            this.parent.off(events.beforeCellFocused, this.onBeforeCellFocused);
            this.parent.off(events.cellFocused, this.onCellFocused);
            this.parent.removeEventListener(events.dataBound, this.dataBoundFunction);
            this.parent.off(events.doubleTap, this.dblClickHandler);
            this.parent.off(events.keyPressed, this.keyDownHandler);
        };
        BatchEdit.prototype.dataBound = function () {
            this.parent.notify(events.toolbarRefresh, {});
        };
        BatchEdit.prototype.destroy = function () {
            this.removeEventListener();
        };
        BatchEdit.prototype.clickHandler = function (e) {
            if (!util_1.parentsUntil(e.target, this.parent.element.id + '_add', true)) {
                this.saveCell();
                if (util_1.parentsUntil(e.target, 'e-rowcell') && !this.parent.isEdit) {
                    this.setCellIdx(e.target);
                }
            }
        };
        BatchEdit.prototype.dblClickHandler = function (e) {
            var target = util_1.parentsUntil(e.target, 'e-rowcell');
            var tr = util_1.parentsUntil(e.target, 'e-row');
            if (target && tr && !isNaN(parseInt(target.getAttribute('aria-colindex'), 10))) {
                this.editCell(parseInt(tr.getAttribute('aria-rowindex'), 10), this.parent.getColumns()[parseInt(target.getAttribute('aria-colindex'), 10)].field);
            }
        };
        BatchEdit.prototype.onBeforeCellFocused = function (e) {
            if (this.parent.isEdit && this.validateFormObj() &&
                (e.byClick || (['tab', 'shiftTab', 'enter', 'shiftEnter'].indexOf(e.keyArgs.action) > -1))) {
                e.cancel = true;
                if (e.byClick) {
                    e.clickArgs.preventDefault();
                }
                else {
                    e.keyArgs.preventDefault();
                }
            }
        };
        BatchEdit.prototype.onCellFocused = function (e) {
            var frzCols = this.parent.getFrozenColumns();
            var mCont = this.parent.getContent().querySelector('.e-movablecontent');
            var mHdr = this.parent.getHeaderContent().querySelector('.e-movableheader');
            var clear = (!e.container.isContent || !e.container.isDataCell) && !(this.parent.frozenRows && e.container.isHeader);
            if (!e.byKey || clear) {
                return;
            }
            var _a = e.container.indexes, rowIndex = _a[0], cellIndex = _a[1];
            if (frzCols && (mCont.contains(e.element) || (this.parent.frozenRows && mHdr.contains(e.element)))) {
                cellIndex += frzCols;
            }
            if (this.parent.frozenRows && e.container.isContent) {
                rowIndex += this.parent.frozenRows;
            }
            var isEdit = this.parent.isEdit;
            if (!document.querySelectorAll('.e-popup-open').length) {
                isEdit = isEdit && !this.validateFormObj();
                switch (e.keyArgs.action) {
                    case 'tab':
                    case 'shiftTab':
                        if (isEdit) {
                            this.editCellFromIndex(rowIndex, cellIndex);
                        }
                        break;
                    case 'enter':
                    case 'shiftEnter':
                        e.keyArgs.preventDefault();
                        if (isEdit) {
                            this.editCell(rowIndex, this.cellDetails.column.field);
                        }
                        break;
                    case 'f2':
                        this.editCellFromIndex(rowIndex, cellIndex);
                        this.focus.focus();
                        break;
                }
            }
        };
        BatchEdit.prototype.isAddRow = function (index) {
            return this.parent.getDataRows()[index].classList.contains('e-insertedrow');
        };
        BatchEdit.prototype.editCellFromIndex = function (rowIdx, cellIdx) {
            this.cellDetails.rowIndex = rowIdx;
            this.cellDetails.cellIndex = cellIdx;
            this.editCell(rowIdx, this.parent.getColumns()[cellIdx].field);
        };
        BatchEdit.prototype.closeEdit = function () {
            var gObj = this.parent;
            var rows = this.parent.getRowsObject();
            if (gObj.frozenColumns) {
                rows.push.apply(rows, this.parent.getMovableRowsObject());
            }
            var rowRenderer = new row_renderer_1.RowRenderer(this.serviceLocator, null, this.parent);
            var tr;
            var mTr;
            var movObj;
            if (gObj.isEdit) {
                this.saveCell(true);
            }
            gObj.clearSelection();
            for (var i = 0; i < rows.length; i++) {
                if (rows[i].isDirty) {
                    if (gObj.frozenColumns) {
                        movObj = gObj.getMovableRowsObject()[rows[i].index];
                        movObj.isDirty = true;
                    }
                    tr = gObj.getContentTable().querySelector('[data-uid=' + rows[i].uid + ']');
                    if (gObj.frozenRows) {
                        tr = gObj.getHeaderContent().querySelector('[data-uid=' + rows[i].uid + ']');
                    }
                    if (gObj.frozenColumns) {
                        if (gObj.frozenRows) {
                            mTr = gObj.getHeaderContent().querySelector('.e-movableheader')
                                .querySelector('[data-uid=' + rows[i].uid + ']');
                        }
                        else {
                            mTr = gObj.getContent().querySelector('.e-movablecontent')
                                .querySelector('[data-uid=' + rows[i].uid + ']');
                        }
                    }
                    if (tr || mTr) {
                        if (tr && tr.classList.contains('e-insertedrow') || mTr && mTr.classList.contains('e-insertedrow')) {
                            if (tr) {
                                ej2_base_2.remove(tr);
                            }
                            if (mTr && (gObj.frozenColumns || gObj.frozenRows)) {
                                ej2_base_2.remove(mTr);
                            }
                            this.removeRowObjectFromUID(rows[i].uid);
                            i--;
                        }
                        else {
                            util_1.refreshForeignData(rows[i], this.parent.getForeignKeyColumns(), rows[i].data);
                            delete rows[i].changes;
                            rows[i].isDirty = false;
                            var ftr = mTr ? mTr : tr;
                            ej2_base_2.classList(ftr, [], ['e-hiddenrow', 'e-updatedtd']);
                            rowRenderer.refresh(rows[i], gObj.getColumns(), false);
                        }
                    }
                }
            }
            if (gObj.getContentTable().querySelector('tr.e-emptyrow') &&
                !gObj.getContentTable().querySelector('tr.e-row')) {
                gObj.getContentTable().querySelector('tr.e-emptyrow').classList.remove('e-hide');
            }
            gObj.notify(events.batchCancel, { rows: this.parent.getRowsObject() });
            gObj.selectRow(this.cellDetails.rowIndex);
            this.refreshRowIdx();
            gObj.notify(events.toolbarRefresh, {});
            this.parent.notify(events.tooltipDestroy, {});
        };
        BatchEdit.prototype.deleteRecord = function (fieldname, data) {
            this.saveCell();
            if (this.validateFormObj()) {
                this.saveCell(true);
            }
            this.bulkDelete(fieldname, data);
        };
        BatchEdit.prototype.addRecord = function (data) {
            this.bulkAddRow(data);
        };
        BatchEdit.prototype.endEdit = function (data) {
            if (this.parent.isEdit && this.validateFormObj()) {
                return;
            }
            this.batchSave();
        };
        BatchEdit.prototype.validateFormObj = function () {
            return this.parent.editModule.formObj && !this.parent.editModule.formObj.validate();
        };
        BatchEdit.prototype.batchSave = function () {
            var gObj = this.parent;
            this.saveCell();
            if (gObj.isEdit) {
                return;
            }
            var changes = this.getBatchChanges();
            var args = { batchChanges: changes, cancel: false };
            gObj.trigger(events.beforeBatchSave, args);
            if (args.cancel) {
                return;
            }
            gObj.showSpinner();
            gObj.notify(events.bulkSave, { changes: changes });
        };
        BatchEdit.prototype.getBatchChanges = function () {
            var changes = {
                addedRecords: [],
                deletedRecords: [],
                changedRecords: []
            };
            var rows = this.parent.getRowsObject();
            var mRows = this.parent.getMovableRowsObject();
            var frzCols = this.parent.getFrozenColumns();
            for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                var row = rows_1[_i];
                if (frzCols) {
                    this.mergeBatchChanges(row, mRows[row.index], frzCols);
                }
                if (row.isDirty) {
                    switch (row.edit) {
                        case 'add':
                            changes.addedRecords.push(row.changes);
                            break;
                        case 'delete':
                            changes.deletedRecords.push(row.data);
                            break;
                        default:
                            changes.changedRecords.push(row.changes);
                    }
                }
            }
            return changes;
        };
        BatchEdit.prototype.mergeBatchChanges = function (row, mRow, frzCols) {
            if (row.isDirty) {
                if (mRow.isDirty) {
                    var i_1 = 0;
                    Object.keys(mRow.changes).forEach(function (key) {
                        if (i_1 < frzCols) {
                            delete mRow.changes[key];
                        }
                        i_1++;
                    });
                    ej2_base_1.extend(row.changes, mRow.changes);
                }
            }
            else if (mRow.isDirty) {
                ej2_base_1.extend(row, mRow);
            }
        };
        BatchEdit.prototype.removeRowObjectFromUID = function (uid) {
            var rows = this.parent.getRowsObject();
            var i = 0;
            for (var len = rows.length; i < len; i++) {
                if (rows[i].uid === uid) {
                    break;
                }
            }
            rows.splice(i, 1);
        };
        BatchEdit.prototype.addRowObject = function (row) {
            this.parent.getRowsObject().unshift(row);
        };
        BatchEdit.prototype.bulkDelete = function (fieldname, data) {
            var gObj = this.parent;
            var index = data ? this.getIndexFromData(data) : gObj.selectedRowIndex;
            var selectedRows = gObj.getSelectedRows();
            var args = {
                primaryKey: this.parent.getPrimaryKeyFieldNames(),
                rowIndex: index,
                rowData: data ? data : gObj.getSelectedRecords()[0],
                row: data ? gObj.getRows()[index] : selectedRows[0], cancel: false
            };
            if (!args.row) {
                return;
            }
            gObj.trigger(events.beforeBatchDelete, args);
            if (args.cancel) {
                return;
            }
            gObj.clearSelection();
            var uid = args.row.getAttribute('data-uid');
            if (args.row.classList.contains('e-insertedrow')) {
                this.removeRowObjectFromUID(uid);
                ej2_base_2.remove(args.row);
            }
            else {
                var rowObj = gObj.getRowObjectFromUID(uid);
                rowObj.isDirty = true;
                rowObj.edit = 'delete';
                ej2_base_2.classList(args.row, ['e-hiddenrow', 'e-updatedtd'], []);
                if (gObj.getFrozenColumns()) {
                    ej2_base_2.classList(data ? gObj.getMovableRows()[index] : selectedRows[1], ['e-hiddenrow', 'e-updatedtd'], []);
                    if (gObj.frozenRows && index < gObj.frozenRows) {
                        gObj.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody')
                            .appendChild(gObj.getMovableRowByIndex(gObj.frozenRows - 1));
                        gObj.getHeaderContent().querySelector('.e-frozenheader').querySelector('tbody')
                            .appendChild(gObj.getRowByIndex(gObj.frozenRows - 1));
                    }
                }
                else if (gObj.frozenRows && index < gObj.frozenRows) {
                    gObj.getHeaderContent().querySelector('tbody').appendChild(gObj.getRowByIndex(gObj.frozenRows - 1));
                }
            }
            this.refreshRowIdx();
            gObj.selectRow(index);
            delete args.row;
            gObj.trigger(events.batchDelete, args);
            gObj.notify(events.batchDelete, { rows: this.parent.getRowsObject() });
            gObj.notify(events.toolbarRefresh, {});
        };
        BatchEdit.prototype.refreshRowIdx = function () {
            var rows = [];
            var mRows = [];
            var nonMovableRows = [];
            var frzCols = this.parent.getFrozenColumns();
            if (this.parent.frozenRows) {
                rows = [].slice.call(this.parent.getHeaderTable().querySelector('tbody').children);
                if (frzCols) {
                    mRows = [].slice.call(this.parent.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody').children);
                    for (var i = 0; i < mRows.length; i++) {
                        nonMovableRows[i] = ej2_base_2.createElement('tr', { className: 'emptynonmv' });
                    }
                }
            }
            if (frzCols) {
                mRows = mRows.concat([].slice.call(this.parent.getContentTable().querySelector('tbody').children));
                nonMovableRows = nonMovableRows.concat([].slice.call(this.parent.element.querySelector('.e-movablecontent').querySelector('tbody').children));
            }
            rows = rows.concat([].slice.call(this.parent.getContentTable().querySelector('tbody').children));
            for (var i = 0, j = 0, len = rows.length; i < len; i++) {
                if (rows[i].classList.contains('e-row') && !rows[i].classList.contains('e-hiddenrow')) {
                    rows[i].setAttribute('aria-rowindex', j.toString());
                    if (frzCols) {
                        mRows[i].setAttribute('aria-rowindex', j.toString());
                        if (nonMovableRows[i].classList.contains('e-row')) {
                            nonMovableRows[i].setAttribute('aria-rowindex', j.toString());
                        }
                    }
                    j++;
                }
                else {
                    rows[i].removeAttribute('aria-rowindex');
                    if (frzCols) {
                        mRows[i].removeAttribute('aria-rowindex');
                    }
                }
            }
        };
        BatchEdit.prototype.getIndexFromData = function (data) {
            return util_1.inArray(data, this.parent.getCurrentViewRecords());
        };
        BatchEdit.prototype.bulkAddRow = function (data) {
            var gObj = this.parent;
            if (!gObj.editSettings.allowAdding) {
                return;
            }
            if (gObj.isEdit) {
                this.saveCell();
            }
            if (gObj.isEdit) {
                return;
            }
            var defaultData = data ? data : this.getDefaultData();
            var args = {
                defaultData: defaultData,
                primaryKey: gObj.getPrimaryKeyFieldNames(),
                cancel: false
            };
            gObj.trigger(events.beforeBatchAdd, args);
            if (args.cancel) {
                return;
            }
            gObj.clearSelection();
            var mTr;
            var mTbody;
            var row = new row_renderer_1.RowRenderer(this.serviceLocator, null, this.parent);
            var model = new row_model_generator_1.RowModelGenerator(this.parent);
            var modelData = model.generateRows([args.defaultData]);
            var tr = row.render(modelData[0], gObj.getColumns());
            var col;
            var index;
            for (var i = 0; i < this.parent.groupSettings.columns.length; i++) {
                tr.insertBefore(ej2_base_2.createElement('td', { className: 'e-indentcell' }), tr.firstChild);
                modelData[0].cells.unshift(new cell_1.Cell({ cellType: enum_1.CellType.Indent }));
            }
            var tbody = gObj.getContentTable().querySelector('tbody');
            tr.classList.add('e-insertedrow');
            if (tbody.querySelector('.e-emptyrow')) {
                tbody.querySelector('.e-emptyrow').classList.add('e-hide');
            }
            if (gObj.getFrozenColumns()) {
                mTr = this.renderMovable(tr);
                if (gObj.frozenRows) {
                    mTbody = gObj.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody');
                }
                else {
                    mTbody = gObj.getContent().querySelector('.e-movablecontent').querySelector('tbody');
                }
                mTbody.insertBefore(mTr, mTbody.firstChild);
                ej2_base_1.addClass(mTr.querySelectorAll('.e-rowcell'), ['e-updatedtd']);
            }
            if (gObj.frozenRows) {
                tbody = gObj.getHeaderContent().querySelector('tbody');
            }
            tbody.insertBefore(tr, tbody.firstChild);
            ej2_base_1.addClass(tr.querySelectorAll('.e-rowcell'), ['e-updatedtd']);
            modelData[0].isDirty = true;
            modelData[0].changes = ej2_base_1.extend({}, modelData[0].data);
            modelData[0].edit = 'add';
            this.addRowObject(modelData[0]);
            this.refreshRowIdx();
            this.focus.forgetPrevious();
            gObj.notify(events.batchAdd, { rows: this.parent.getRowsObject() });
            gObj.selectRow(0);
            if (!data) {
                index = this.findNextEditableCell(0, true);
                col = gObj.getColumns()[index];
                this.editCell(0, col.field, true);
            }
            var args1 = {
                defaultData: args.defaultData, row: tr,
                columnObject: col, columnIndex: index, primaryKey: args.primaryKey, cell: tr.cells[index]
            };
            gObj.trigger(events.batchAdd, args1);
        };
        BatchEdit.prototype.renderMovable = function (ele) {
            var mEle = ele.cloneNode(true);
            for (var i = 0; i < this.parent.frozenColumns; i++) {
                mEle.removeChild(mEle.children[0]);
            }
            for (var i = this.parent.frozenColumns, len = ele.childElementCount; i < len; i++) {
                ele.removeChild(ele.children[ele.childElementCount - 1]);
            }
            return mEle;
        };
        BatchEdit.prototype.findNextEditableCell = function (columnIndex, isAdd) {
            var cols = this.parent.getColumns();
            var endIndex = cols.length;
            for (var i = columnIndex; i < endIndex; i++) {
                if (!isAdd && this.checkNPCell(cols[i])) {
                    return i;
                }
                else if (isAdd && !cols[i].template && cols[i].visible && cols[i].allowEditing &&
                    !(cols[i].isIdentity && cols[i].isPrimaryKey)) {
                    return i;
                }
            }
            return -1;
        };
        BatchEdit.prototype.checkNPCell = function (col) {
            return !col.template && col.visible && !col.isPrimaryKey && !col.isIdentity && col.allowEditing;
        };
        BatchEdit.prototype.getDefaultData = function () {
            var gObj = this.parent;
            var data = {};
            var dValues = { 'number': 0, 'string': null, 'boolean': false, 'date': null, 'datetime': null };
            for (var _i = 0, _a = gObj.getColumns(); _i < _a.length; _i++) {
                var col = _a[_i];
                data[col.field] = col.defaultValue ? col.defaultValue : dValues[col.type];
            }
            return data;
        };
        BatchEdit.prototype.setCellIdx = function (target) {
            var gLen = 0;
            if (this.parent.allowGrouping) {
                gLen = this.parent.groupSettings.columns.length;
            }
            this.cellDetails.cellIndex = target.cellIndex - gLen;
            this.cellDetails.rowIndex = parseInt(target.parentElement.getAttribute('aria-rowindex'), 10);
        };
        BatchEdit.prototype.editCell = function (index, field, isAdd) {
            var gObj = this.parent;
            var col = gObj.getColumnByField(field);
            var keys = gObj.getPrimaryKeyFieldNames();
            if (gObj.editSettings.allowEditing && col.allowEditing) {
                if (gObj.isEdit && !(this.cellDetails.column.field === field
                    && (this.cellDetails.rowIndex === index && this.parent.getDataRows().length - 1 !== index))) {
                    this.saveCell();
                    if (this.cellDetails.rowIndex === index && this.cellDetails.column.field === field) {
                        return;
                    }
                }
                if (gObj.isEdit) {
                    return;
                }
                var row = void 0;
                var rowData = void 0;
                var colIdx = gObj.getColumnIndexByField(field);
                var frzCols = gObj.getFrozenColumns();
                if (frzCols && colIdx >= frzCols) {
                    row = gObj.getMovableDataRows()[index];
                    var mRowData = this.parent.getRowObjectFromUID(this.parent.getMovableRows()[index].getAttribute('data-uid'));
                    rowData = mRowData.changes ? mRowData.changes : mRowData;
                }
                else {
                    row = gObj.getDataRows()[index];
                    rowData = ej2_base_1.extend({}, this.getDataByIndex(index));
                }
                if ((keys[0] === col.field && !row.classList.contains('e-insertedrow')) || col.template || col.columns ||
                    (col.isPrimaryKey && col.isIdentity)) {
                    return;
                }
                var rowObj = gObj.getRowObjectFromUID(row.getAttribute('data-uid'));
                var cells = [].slice.apply(row.cells);
                var isComplexField = !ej2_base_3.isNullOrUndefined(col.field) && col.field.split('.').length > 1;
                var splits = !ej2_base_3.isNullOrUndefined(col.field) && col.field.split('.');
                var args = {
                    cell: cells[this.getColIndex(cells, this.getCellIdx(col.uid))], row: row,
                    columnName: col.field, columnObject: col, isForeignKey: !ej2_base_3.isNullOrUndefined(col.foreignKeyValue),
                    primaryKey: keys, rowData: rowData,
                    validationRules: ej2_base_1.extend({}, col.validationRules ? col.validationRules : {}),
                    value: isComplexField ? rowData[splits[0]][splits[1]] : rowData[col.field],
                    type: !isAdd ? 'edit' : 'add', cancel: false,
                    foreignKeyData: rowObj && rowObj.foreignKeyData
                };
                if (!args.cell) {
                    return;
                }
                gObj.trigger(events.cellEdit, args);
                if (args.cancel) {
                    return;
                }
                this.cellDetails = {
                    rowData: rowData, column: col, value: args.value, isForeignKey: args.isForeignKey, rowIndex: index,
                    cellIndex: parseInt(args.cell.getAttribute('aria-colindex'), 10),
                    foreignKeyData: args.foreignKeyData
                };
                if (args.cell.classList.contains('e-updatedtd')) {
                    this.isColored = true;
                    args.cell.classList.remove('e-updatedtd');
                }
                gObj.isEdit = true;
                gObj.clearSelection();
                if (!gObj.isCheckBoxSelection || !gObj.isPersistSelection) {
                    gObj.selectRow(this.cellDetails.rowIndex, true);
                }
                this.renderer.update(args);
                this.form = gObj.element.querySelector('#' + gObj.element.id + 'EditForm');
                gObj.editModule.applyFormValidation([col]);
                this.parent.element.querySelector('.e-gridpopup').style.display = 'none';
            }
        };
        BatchEdit.prototype.updateCell = function (rowIndex, field, value) {
            var col = this.parent.getColumnByField(field);
            if (col && !col.isPrimaryKey) {
                var td = this.parent.getDataRows()[rowIndex].cells[this.parent.getColumnIndexByField(field)];
                var rowObj = this.parent.getRowObjectFromUID(td.parentElement.getAttribute('data-uid'));
                this.refreshTD(td, col, rowObj, value);
                this.parent.trigger(events.queryCellInfo, {
                    cell: td, column: col, data: rowObj.changes
                });
            }
        };
        BatchEdit.prototype.setChanges = function (rowObj, field, value) {
            var isComplexField = !ej2_base_3.isNullOrUndefined(field) && field.split('.').length > 1;
            var splits = !ej2_base_3.isNullOrUndefined(field) && field.split('.');
            if (!rowObj.changes) {
                rowObj.changes = ej2_base_1.extend({}, rowObj.data);
            }
            isComplexField ? rowObj.changes[splits[0]][splits[1]] = value : rowObj.changes[field] = value;
            if (rowObj.data[field] !== value) {
                rowObj.isDirty = true;
            }
        };
        BatchEdit.prototype.updateRow = function (index, data) {
            var keys = Object.keys(data);
            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                var col = keys_1[_i];
                this.updateCell(index, col, data[col]);
            }
        };
        BatchEdit.prototype.getCellIdx = function (uid) {
            var cIdx = this.parent.getColumnIndexByUid(uid) + this.parent.groupSettings.columns.length;
            if (!ej2_base_3.isNullOrUndefined(this.parent.detailTemplate) || !ej2_base_3.isNullOrUndefined(this.parent.childGrid)) {
                cIdx++;
            }
            return cIdx;
        };
        BatchEdit.prototype.refreshTD = function (td, column, rowObj, value) {
            var cell = new cell_renderer_1.CellRenderer(this.parent, this.serviceLocator);
            this.setChanges(rowObj, column.field, value);
            var frzCols = this.parent.getFrozenColumns();
            util_1.refreshForeignData(rowObj, this.parent.getForeignKeyColumns(), rowObj.changes);
            cell.refreshTD(td, rowObj.cells[this.getCellIdx(column.uid) - (this.getCellIdx(column.uid) >= frzCols ? frzCols : 0)], rowObj.changes);
            td.classList.add('e-updatedtd');
            this.parent.notify(events.toolbarRefresh, {});
        };
        BatchEdit.prototype.getColIndex = function (cells, index) {
            var cIdx = 0;
            if (this.parent.allowGrouping && this.parent.groupSettings.columns) {
                cIdx = this.parent.groupSettings.columns.length;
            }
            if (!ej2_base_3.isNullOrUndefined(this.parent.detailTemplate) || !ej2_base_3.isNullOrUndefined(this.parent.childGrid)) {
                cIdx++;
            }
            for (var m = 0; m < cells.length; m++) {
                var colIndex = parseInt(cells[m].getAttribute('aria-colindex'), 10);
                if (colIndex === index - cIdx) {
                    return m;
                }
            }
            return -1;
        };
        BatchEdit.prototype.saveCell = function (isForceSave) {
            var gObj = this.parent;
            if (!isForceSave && (!gObj.isEdit || this.validateFormObj())) {
                return;
            }
            var tr = util_1.parentsUntil(this.form, 'e-row');
            var column = this.cellDetails.column;
            var editedData = gObj.editModule.getCurrentEditedData(this.form, {});
            var isComplexField = !ej2_base_3.isNullOrUndefined(column.field) && column.field.split('.').length > 1;
            var splits = !ej2_base_3.isNullOrUndefined(column.field) && column.field.split('.');
            editedData = ej2_base_1.extend(this.cellDetails.rowData, editedData);
            var args = {
                columnName: column.field,
                value: isComplexField ? editedData[splits[0]][splits[1]] : editedData[column.field],
                rowData: this.cellDetails.rowData,
                previousValue: this.cellDetails.value,
                columnObject: column,
                cell: this.form.parentElement,
                isForeignKey: this.cellDetails.isForeignKey, cancel: false
            };
            if (!isForceSave) {
                gObj.trigger(events.cellSave, args);
            }
            if (args.cancel) {
                return;
            }
            gObj.editModule.destroyForm();
            gObj.isEdit = false;
            gObj.editModule.destroyWidgets([column]);
            this.parent.notify(events.tooltipDestroy, {});
            this.refreshTD(args.cell, column, gObj.getRowObjectFromUID(tr.getAttribute('data-uid')), args.value);
            ej2_base_1.removeClass([tr], ['e-editedrow', 'e-batchrow']);
            ej2_base_1.removeClass([args.cell], ['e-editedbatchcell', 'e-boolcell']);
            if (!ej2_base_3.isNullOrUndefined(args.value) && args.value.toString() ===
                (!ej2_base_3.isNullOrUndefined(this.cellDetails.value) ? this.cellDetails.value : '').toString() && !this.isColored
                || (ej2_base_3.isNullOrUndefined(args.value) && ej2_base_3.isNullOrUndefined(this.cellDetails.value))) {
                args.cell.classList.remove('e-updatedtd');
            }
            gObj.notify(events.toolbarRefresh, {});
            this.isColored = false;
        };
        BatchEdit.prototype.getDataByIndex = function (index) {
            var row = this.parent.getRowObjectFromUID(this.parent.getDataRows()[index].getAttribute('data-uid'));
            return row.changes ? row.changes : row.data;
        };
        BatchEdit.prototype.keyDownHandler = function (e) {
            if (e.action === 'tab' && this.parent.isEdit) {
                var rowcell = util_1.parentsUntil(e.target, 'e-rowcell');
                if (rowcell) {
                    var cell = rowcell.querySelector('.e-field');
                    if (cell) {
                        var visibleColumns = this.parent.getVisibleColumns();
                        if (visibleColumns[visibleColumns.length - 1].field === cell.getAttribute('name')) {
                            this.saveCell();
                        }
                    }
                }
            }
        };
        return BatchEdit;
    }());
    exports.BatchEdit = BatchEdit;
});
