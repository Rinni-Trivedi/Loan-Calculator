{"version":3,"file":"ej2-file-utils.umd.min.js","sources":["src/es5/encoding.js","src/es5/save.js","src/es5/stream-writer.js"],"sourcesContent":["/**\n * Encoding class: Contains the details about encoding type, whether to write a Unicode byte order mark (BOM).\n * ```typescript\n * let encoding : Encoding = new Encoding();\n * encoding.type = 'Utf8';\n * encoding.getBytes('Encoding', 0, 5);\n * ```\n */\nvar Encoding = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the Encoding class. A parameter specifies whether to write a Unicode byte order mark\n     * @param  {boolean} includeBom?-true to specify that a Unicode byte order mark is written; otherwise, false.\n     */\n    function Encoding(includeBom) {\n        this.emitBOM = true;\n        this.encodingType = 'Ansi';\n        this.initBOM(includeBom);\n    }\n    Object.defineProperty(Encoding.prototype, \"includeBom\", {\n        /**\n         * Gets a value indicating whether to write a Unicode byte order mark\n         * @returns boolean- true to specify that a Unicode byte order mark is written; otherwise, false\n         */\n        get: function () {\n            return this.emitBOM;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Encoding.prototype, \"type\", {\n        /**\n         * Gets the encoding type.\n         * @returns EncodingType\n         */\n        get: function () {\n            return this.encodingType;\n        },\n        /**\n         * Sets the encoding type.\n         * @param  {EncodingType} value\n         */\n        set: function (value) {\n            this.encodingType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Initialize the includeBom to emit BOM or Not\n     * @param  {boolean} includeBom\n     */\n    Encoding.prototype.initBOM = function (includeBom) {\n        if (includeBom === undefined || includeBom === null) {\n            this.emitBOM = true;\n        }\n        else {\n            this.emitBOM = includeBom;\n        }\n    };\n    /**\n     * Calculates the number of bytes produced by encoding the characters in the specified string\n     * @param  {string} chars - The string containing the set of characters to encode\n     * @returns {number} - The number of bytes produced by encoding the specified characters\n     */\n    Encoding.prototype.getByteCount = function (chars) {\n        var byteCount = 0;\n        validateNullOrUndefined(chars, 'string');\n        if (chars === '') {\n            var byte = this.utf8Len(chars.charCodeAt(0));\n            return byte;\n        }\n        if (this.type === null || this.type === undefined) {\n            this.type = 'Ansi';\n        }\n        return this.getByteCountInternal(chars, 0, chars.length);\n    };\n    /**\n     * Return the Byte of character\n     * @param  {number} codePoint\n     * @returns {number}\n     */\n    Encoding.prototype.utf8Len = function (codePoint) {\n        var bytes = codePoint <= 0x7F ? 1 :\n            codePoint <= 0x7FF ? 2 :\n                codePoint <= 0xFFFF ? 3 :\n                    codePoint <= 0x1FFFFF ? 4 : 0;\n        return bytes;\n    };\n    /**\n     * for 4 byte character return surrogate pair true, otherwise false\n     * @param  {number} codeUnit\n     * @returns {boolean}\n     */\n    Encoding.prototype.isHighSurrogate = function (codeUnit) {\n        return codeUnit >= 0xD800 && codeUnit <= 0xDBFF;\n    };\n    /**\n     * for 4byte character generate the surrogate pair\n     * @param  {number} highCodeUnit\n     * @param  {number} lowCodeUnit\n     */\n    Encoding.prototype.toCodepoint = function (highCodeUnit, lowCodeUnit) {\n        highCodeUnit = (0x3FF & highCodeUnit) << 10;\n        var u = highCodeUnit | (0x3FF & lowCodeUnit);\n        return u + 0x10000;\n    };\n    /**\n     * private method to get the byte count for specific charindex and count\n     * @param  {string} chars\n     * @param  {number} charIndex\n     * @param  {number} charCount\n     */\n    Encoding.prototype.getByteCountInternal = function (chars, charIndex, charCount) {\n        var byteCount = 0;\n        if (this.encodingType === 'Utf8' || this.encodingType === 'Unicode') {\n            var isUtf8 = this.encodingType === 'Utf8';\n            for (var i = 0; i < charCount; i++) {\n                var charCode = chars.charCodeAt(isUtf8 ? charIndex : charIndex++);\n                if (this.isHighSurrogate(charCode)) {\n                    if (isUtf8) {\n                        var high = charCode;\n                        var low = chars.charCodeAt(++charIndex);\n                        byteCount += this.utf8Len(this.toCodepoint(high, low));\n                    }\n                    else {\n                        byteCount += 4;\n                        ++i;\n                    }\n                }\n                else {\n                    if (isUtf8) {\n                        byteCount += this.utf8Len(charCode);\n                    }\n                    else {\n                        byteCount += 2;\n                    }\n                }\n                if (isUtf8) {\n                    charIndex++;\n                }\n            }\n            return byteCount;\n        }\n        else {\n            byteCount = charCount;\n            return byteCount;\n        }\n    };\n    /**\n     * Encodes a set of characters from the specified string into the ArrayBuffer.\n     * @param  {string} s- The string containing the set of characters to encode\n     * @param  {number} charIndex-The index of the first character to encode.\n     * @param  {number} charCount- The number of characters to encode.\n     * @returns {ArrayBuffer} - The ArrayBuffer that contains the resulting sequence of bytes.\n     */\n    Encoding.prototype.getBytes = function (s, charIndex, charCount) {\n        validateNullOrUndefined(s, 'string');\n        validateNullOrUndefined(charIndex, 'charIndex');\n        validateNullOrUndefined(charCount, 'charCount');\n        if (charIndex < 0 || charCount < 0) {\n            throw new RangeError('Argument Out Of Range Exception: charIndex or charCount is less than zero');\n        }\n        if (s.length - charIndex < charCount) {\n            throw new RangeError('Argument Out Of Range Exception: charIndex and charCount do not denote a valid range in string');\n        }\n        var bytes;\n        if (s === '') {\n            bytes = new ArrayBuffer(0);\n            return bytes;\n        }\n        if (this.type === null || this.type === undefined) {\n            this.type = 'Ansi';\n        }\n        var byteCount = this.getByteCountInternal(s, charIndex, charCount);\n        switch (this.type) {\n            case 'Utf8':\n                bytes = this.getBytesOfUtf8Encoding(byteCount, s, charIndex, charCount);\n                return bytes;\n            case 'Unicode':\n                bytes = this.getBytesOfUnicodeEncoding(byteCount, s, charIndex, charCount);\n                return bytes;\n            default:\n                bytes = this.getBytesOfAnsiEncoding(byteCount, s, charIndex, charCount);\n                return bytes;\n        }\n    };\n    /**\n     * Decodes a sequence of bytes from the specified ArrayBuffer into the string.\n     * @param  {ArrayBuffer} bytes- The ArrayBuffer containing the sequence of bytes to decode.\n     * @param  {number} index- The index of the first byte to decode.\n     * @param  {number} count- The number of bytes to decode.\n     * @returns {string} - The string that contains the resulting set of characters.\n     */\n    Encoding.prototype.getString = function (bytes, index, count) {\n        validateNullOrUndefined(bytes, 'bytes');\n        validateNullOrUndefined(index, 'index');\n        validateNullOrUndefined(count, 'count');\n        if (index < 0 || count < 0) {\n            throw new RangeError('Argument Out Of Range Exception: index or count is less than zero');\n        }\n        if (bytes.byteLength - index < count) {\n            throw new RangeError('Argument Out Of Range Exception: index and count do not denote a valid range in bytes');\n        }\n        if (bytes.byteLength === 0 || count === 0) {\n            return '';\n        }\n        if (this.type === null || this.type === undefined) {\n            this.type = 'Ansi';\n        }\n        var out = '';\n        var byteCal = new Uint8Array(bytes);\n        switch (this.type) {\n            case 'Utf8':\n                var s = this.getStringOfUtf8Encoding(byteCal, index, count);\n                return s;\n            case 'Unicode':\n                var byteUnicode = new Uint16Array(bytes);\n                out = this.getStringofUnicodeEncoding(byteUnicode, index, count);\n                return out;\n            default:\n                var j = index;\n                for (var i = 0; i < count; i++) {\n                    var c = byteCal[j];\n                    out += String.fromCharCode(c); // 1 byte(ASCII) character                  \n                    j++;\n                }\n                return out;\n        }\n    };\n    Encoding.prototype.getBytesOfAnsiEncoding = function (byteCount, s, charIndex, charCount) {\n        var bytes = new ArrayBuffer(byteCount);\n        var bufview = new Uint8Array(bytes);\n        var k = 0;\n        for (var i = 0; i < charCount; i++) {\n            var charcode = s.charCodeAt(charIndex++);\n            if (charcode < 0x800) {\n                bufview[k] = charcode;\n            }\n            else {\n                bufview[k] = 63; //replacement character '?'\n            }\n            k++;\n        }\n        return bytes;\n    };\n    Encoding.prototype.getBytesOfUtf8Encoding = function (byteCount, s, charIndex, charCount) {\n        var bytes = new ArrayBuffer(byteCount);\n        var uint = new Uint8Array(bytes);\n        var index = charIndex;\n        var j = 0;\n        for (var i = 0; i < charCount; i++) {\n            var charcode = s.charCodeAt(index);\n            if (charcode <= 0x7F) {\n                uint[j] = charcode;\n            }\n            else if (charcode < 0x800) {\n                uint[j] = 0xc0 | (charcode >> 6);\n                uint[++j] = 0x80 | (charcode & 0x3f);\n            }\n            else if ((charcode < 0xd800 || charcode >= 0xe000)) {\n                uint[j] = 0xe0 | (charcode >> 12);\n                uint[++j] = 0x80 | ((charcode >> 6) & 0x3f);\n                uint[++j] = 0x80 | (charcode & 0x3f);\n            }\n            else {\n                uint[j] = 0xef;\n                uint[++j] = 0xbf;\n                uint[++j] = 0xbd; // U+FFFE \"replacement character\"\n            }\n            ++j;\n            ++index;\n        }\n        return bytes;\n    };\n    Encoding.prototype.getBytesOfUnicodeEncoding = function (byteCount, s, charIndex, charCount) {\n        var bytes = new ArrayBuffer(byteCount);\n        var uint16 = new Uint16Array(bytes);\n        for (var i = 0; i < charCount; i++) {\n            var charcode = s.charCodeAt(i);\n            uint16[i] = charcode;\n        }\n        return bytes;\n    };\n    Encoding.prototype.getStringOfUtf8Encoding = function (byteCal, index, count) {\n        var j = 0;\n        var i = index;\n        var s = '';\n        for (j; j < count; j++) {\n            var c = byteCal[i++];\n            while (i > byteCal.length) {\n                return s;\n            }\n            if (c > 127) {\n                if (c > 191 && c < 224 && i < count) {\n                    c = (c & 31) << 6 | byteCal[i] & 63;\n                }\n                else if (c > 223 && c < 240 && i < byteCal.byteLength) {\n                    c = (c & 15) << 12 | (byteCal[i] & 63) << 6 | byteCal[++i] & 63;\n                }\n                else if (c > 239 && c < 248 && i < byteCal.byteLength) {\n                    c = (c & 7) << 18 | (byteCal[i] & 63) << 12 | (byteCal[++i] & 63) << 6 | byteCal[++i] & 63;\n                }\n                ++i;\n            }\n            s += String.fromCharCode(c); // 1 byte(ASCII) character                          \n        }\n        return s;\n    };\n    Encoding.prototype.getStringofUnicodeEncoding = function (byteUni, index, count) {\n        if (count > byteUni.length) {\n            throw new RangeError('ArgumentOutOfRange_Count');\n        }\n        var byte16 = new Uint16Array(count);\n        var out = '';\n        for (var i = 0; i < count && i < byteUni.length; i++) {\n            byte16[i] = byteUni[index++];\n        }\n        out = String.fromCharCode.apply(null, byte16);\n        return out;\n    };\n    /**\n     * To clear the encoding instance\n     * @return {void}\n     */\n    Encoding.prototype.destroy = function () {\n        this.emitBOM = undefined;\n        this.encodingType = undefined;\n    };\n    return Encoding;\n}());\nexport { Encoding };\n/**\n * To check the object is null or undefined and throw error if it is null or undefined\n * @param {Object} value - object to check is null or undefined\n * @return {boolean}\n * @throws {ArgumentException} - if the value is null or undefined\n * @private\n */\nexport function validateNullOrUndefined(value, message) {\n    if (value === null || value === undefined) {\n        throw new Error('ArgumentException: ' + message + ' cannot be null or undefined');\n    }\n}\n","/**\n * Save class provide method to save file\n * ```typescript\n * let blob : Blob = new Blob([''], { type: 'text/plain' });\n * Save.save('fileName.txt',blob);\n */\nvar Save = /** @class */ (function () {\n    /**\n     * Initialize new instance of {save}\n     */\n    function Save() {\n        // tslint:disable\n    }\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName- file name to save.\n     * @param  {Blob} buffer- the content to write in file\n     * @param  {boolean} isMicrosoftBrowser- specify whether microsoft browser or not\n     * @returns {void}\n     */\n    Save.save = function (fileName, buffer) {\n        if (fileName === null || fileName === undefined || fileName === '') {\n            throw new Error('ArgumentException: fileName cannot be undefined, null or empty');\n        }\n        var extension = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n        var mimeType = this.getMimeType(extension);\n        if (mimeType !== '') {\n            buffer = new Blob([buffer], { type: mimeType });\n        }\n        if (this.isMicrosoftBrowser) {\n            navigator.msSaveBlob(buffer, fileName);\n        }\n        else {\n            var downloadLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n            this.saveInternal(fileName, extension, buffer, downloadLink, 'download' in downloadLink);\n        }\n    };\n    Save.saveInternal = function (fileName, extension, buffer, downloadLink, hasDownloadAttribute) {\n        if (hasDownloadAttribute) {\n            downloadLink.download = fileName;\n            var dataUrl_1 = window.URL.createObjectURL(buffer);\n            downloadLink.href = dataUrl_1;\n            var event_1 = document.createEvent('MouseEvent');\n            event_1.initEvent('click', true, true);\n            downloadLink.dispatchEvent(event_1);\n            setTimeout(function () {\n                window.URL.revokeObjectURL(dataUrl_1);\n                dataUrl_1 = undefined;\n            });\n        }\n        else {\n            if (extension !== 'docx' && extension !== 'xlsx') {\n                var url = window.URL.createObjectURL(buffer);\n                var isPopupBlocked = window.open(url, '_blank');\n                if (!isPopupBlocked) {\n                    window.location.href = url;\n                }\n            }\n            else {\n                var reader_1 = new FileReader();\n                reader_1.onloadend = function () {\n                    var isPopupBlocked = window.open(reader_1.result, '_blank');\n                    if (!isPopupBlocked) {\n                        window.location.href = reader_1.result;\n                    }\n                };\n                reader_1.readAsDataURL(buffer);\n            }\n        }\n    };\n    /**\n     *\n     * @param {string} extension - get mime type of the specified extension\n     * @private\n     */\n    Save.getMimeType = function (extension) {\n        var mimeType = '';\n        switch (extension) {\n            case 'html':\n                mimeType = 'text/html';\n                break;\n            case 'pdf':\n                mimeType = 'application/pdf';\n                break;\n            case 'docx':\n                mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n                break;\n            case 'xlsx':\n                mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n                break;\n            case 'txt':\n                mimeType = 'text/plain';\n                break;\n        }\n        return mimeType;\n    };\n    return Save;\n}());\nexport { Save };\n","import { Encoding, validateNullOrUndefined } from './encoding';\nimport { Save } from './save';\n/**\n * StreamWriter class contains the implementation for writing characters to a file in a particular encoding\n * ```typescript\n * let writer = new StreamWriter();\n * writer.write('Hello World');\n * writer.save('Sample.txt');\n * writer.dispose();\n * ```\n */\nvar StreamWriter = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the StreamWriter class by using the specified encoding.\n     * @param  {Encoding} encoding?- The character encoding to use.\n     */\n    function StreamWriter(encoding) {\n        this.bufferBlob = new Blob(['']);\n        this.bufferText = '';\n        this.init(encoding);\n        Save.isMicrosoftBrowser = !(!navigator.msSaveBlob);\n    }\n    Object.defineProperty(StreamWriter.prototype, \"buffer\", {\n        /**\n         * Gets the content written to the StreamWriter as Blob.\n         * @returns Blob\n         */\n        get: function () {\n            this.flush();\n            return this.bufferBlob;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StreamWriter.prototype, \"encoding\", {\n        /**\n         * Gets the encoding.\n         * @returns Encoding\n         */\n        get: function () {\n            return this.enc;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StreamWriter.prototype.init = function (encoding) {\n        if (encoding === null || encoding === undefined) {\n            this.enc = new Encoding(false);\n            this.enc.type = 'Utf8';\n        }\n        else {\n            this.enc = encoding;\n            this.setBomByte();\n        }\n    };\n    /**\n     * Private method to set Byte Order Mark(BOM) value based on EncodingType\n     */\n    StreamWriter.prototype.setBomByte = function () {\n        if (this.encoding.includeBom) {\n            switch (this.encoding.type) {\n                case 'Unicode':\n                    var arrayUnicode = new ArrayBuffer(2);\n                    var uint8 = new Uint8Array(arrayUnicode);\n                    uint8[0] = 255;\n                    uint8[1] = 254;\n                    this.bufferBlob = new Blob([arrayUnicode]);\n                    break;\n                case 'Utf8':\n                    var arrayUtf8 = new ArrayBuffer(3);\n                    var utf8 = new Uint8Array(arrayUtf8);\n                    utf8[0] = 239;\n                    utf8[1] = 187;\n                    utf8[2] = 191;\n                    this.bufferBlob = new Blob([arrayUtf8]);\n                    break;\n                default:\n                    this.bufferBlob = new Blob(['']);\n                    break;\n            }\n        }\n    };\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName - The file name to save\n     * @returns {void}\n     */\n    StreamWriter.prototype.save = function (fileName) {\n        if (this.bufferText !== '') {\n            this.flush();\n        }\n        Save.save(fileName, this.buffer);\n    };\n    /**\n     * Writes the specified string.\n     * @param  {string} value - The string to write. If value is null or undefined, nothing is written.\n     * @returns {void}\n     */\n    StreamWriter.prototype.write = function (value) {\n        if (this.encoding === undefined) {\n            throw new Error('Object Disposed Exception: current writer is disposed');\n        }\n        validateNullOrUndefined(value, 'string');\n        this.bufferText += value;\n        if (this.bufferText.length >= 10240) {\n            this.flush();\n        }\n    };\n    StreamWriter.prototype.flush = function () {\n        if (this.bufferText === undefined || this.bufferText === null || this.bufferText.length === 0) {\n            return;\n        }\n        var bufferArray = this.encoding.getBytes(this.bufferText, 0, this.bufferText.length);\n        this.bufferText = '';\n        this.bufferBlob = new Blob([this.bufferBlob, bufferArray]);\n    };\n    /**\n     * Writes the specified string followed by a line terminator\n     * @param  {string} value - The string to write. If value is null or undefined, nothing is written\n     * @returns {void}\n     */\n    StreamWriter.prototype.writeLine = function (value) {\n        if (this.encoding === undefined) {\n            throw new Error('Object Disposed Exception: current writer is disposed');\n        }\n        validateNullOrUndefined(value, 'string');\n        this.bufferText = this.bufferText + value + '\\r\\n';\n        if (this.bufferText.length >= 10240) {\n            this.flush();\n        }\n    };\n    /**\n     * Releases the resources used by the StreamWriter\n     * @returns {void}\n     */\n    StreamWriter.prototype.destroy = function () {\n        this.bufferBlob = undefined;\n        this.bufferText = undefined;\n        if (this.enc instanceof Encoding) {\n            this.enc.destroy();\n        }\n        this.enc = undefined;\n    };\n    return StreamWriter;\n}());\nexport { StreamWriter };\n"],"names":["validateNullOrUndefined","value","message","undefined","Error","Encoding","includeBom","this","emitBOM","encodingType","initBOM","Object","defineProperty","prototype","get","enumerable","configurable","set","getByteCount","chars","utf8Len","charCodeAt","type","getByteCountInternal","length","codePoint","isHighSurrogate","codeUnit","toCodepoint","highCodeUnit","lowCodeUnit","charIndex","charCount","byteCount","isUtf8","i","charCode","high","low","getBytes","s","RangeError","ArrayBuffer","getBytesOfUtf8Encoding","getBytesOfUnicodeEncoding","getBytesOfAnsiEncoding","getString","bytes","index","count","byteLength","out","byteCal","Uint8Array","getStringOfUtf8Encoding","byteUnicode","Uint16Array","getStringofUnicodeEncoding","j","c","String","fromCharCode","bufview","k","charcode","uint","uint16","byteUni","byte16","apply","destroy","Save","save","fileName","buffer","extension","substring","lastIndexOf","mimeType","getMimeType","Blob","isMicrosoftBrowser","navigator","msSaveBlob","downloadLink","document","createElementNS","saveInternal","hasDownloadAttribute","download","dataUrl_1","window","URL","createObjectURL","href","event_1","createEvent","initEvent","dispatchEvent","setTimeout","revokeObjectURL","url","open","location","reader_1","FileReader","onloadend","result","readAsDataURL","StreamWriter","encoding","bufferBlob","bufferText","init","flush","enc","setBomByte","arrayUnicode","uint8","arrayUtf8","utf8","write","bufferArray","writeLine"],"mappings":"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"}