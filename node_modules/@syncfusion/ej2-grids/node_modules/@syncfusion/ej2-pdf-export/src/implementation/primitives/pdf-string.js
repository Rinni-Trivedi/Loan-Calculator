define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var InternalEnum;
    (function (InternalEnum) {
        var ForceEncoding;
        (function (ForceEncoding) {
            ForceEncoding[ForceEncoding["None"] = 0] = "None";
            ForceEncoding[ForceEncoding["Ascii"] = 1] = "Ascii";
            ForceEncoding[ForceEncoding["Unicode"] = 2] = "Unicode";
        })(ForceEncoding = InternalEnum.ForceEncoding || (InternalEnum.ForceEncoding = {}));
        var SourceType;
        (function (SourceType) {
            SourceType[SourceType["StringValue"] = 0] = "StringValue";
            SourceType[SourceType["ByteBuffer"] = 1] = "ByteBuffer";
        })(SourceType || (SourceType = {}));
    })(InternalEnum = exports.InternalEnum || (exports.InternalEnum = {}));
    var PdfString = (function () {
        function PdfString(value) {
            this.bHex = false;
            this.position1 = -1;
            this.clonedObject1 = null;
            this.bDecrypted = false;
            this.isParentDecrypted = false;
            this.isPacked = false;
            this.isFormField = false;
            this.isColorSpace = false;
            this.isHexString = true;
            if (typeof value === 'undefined') {
                this.bHex = false;
            }
            else {
                if (!(value.length > 0 && value[0] === '0xfeff')) {
                    this.stringValue = value;
                    this.data = [];
                    for (var i = 0; i < value.length; ++i) {
                        this.data.push(value.charCodeAt(i));
                    }
                }
            }
        }
        Object.defineProperty(PdfString.prototype, "hex", {
            get: function () {
                return this.bHex;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfString.prototype, "value", {
            get: function () {
                return this.stringValue;
            },
            set: function (value) {
                this.stringValue = value;
                this.data = null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfString.prototype, "status", {
            get: function () {
                return this.status1;
            },
            set: function (value) {
                this.status1 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfString.prototype, "isSaving", {
            get: function () {
                return this.isSaving1;
            },
            set: function (value) {
                this.isSaving1 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfString.prototype, "objectCollectionIndex", {
            get: function () {
                return this.index1;
            },
            set: function (value) {
                this.index1 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfString.prototype, "clonedObject", {
            get: function () {
                return this.clonedObject1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfString.prototype, "position", {
            get: function () {
                return this.position1;
            },
            set: function (value) {
                this.position1 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfString.prototype, "CrossTable", {
            get: function () {
                return this.crossTable;
            },
            enumerable: true,
            configurable: true
        });
        PdfString.bytesToHex = function (bytes) {
            if (bytes == null) {
                return '';
            }
            var builder = '';
            return builder;
        };
        PdfString.prototype.save = function (writer) {
            if (writer === null) {
                throw new Error('ArgumentNullException : writer');
            }
            writer.write(PdfString.stringMark[0] + this.value + PdfString.stringMark[1]);
        };
        PdfString.prototype.clone = function (crossTable) {
            if (this.clonedObject1 !== null && this.clonedObject1.CrossTable === crossTable) {
                return this.clonedObject1;
            }
            else {
                this.clonedObject1 = null;
            }
            var newString = new PdfString(this.stringValue);
            newString.bHex = this.bHex;
            newString.crossTable = crossTable;
            newString.isColorSpace = this.isColorSpace;
            this.clonedObject1 = newString;
            return newString;
        };
        PdfString.stringMark = '()';
        PdfString.hexStringMark = '<>';
        PdfString.hexFormatPattern = '{0:X2}';
        return PdfString;
    }());
    exports.PdfString = PdfString;
});
