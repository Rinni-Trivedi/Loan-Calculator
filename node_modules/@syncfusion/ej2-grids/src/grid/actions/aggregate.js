define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "../base/enum", "../base/constant", "../renderer/footer-renderer", "../renderer/summary-cell-renderer", "../services/summary-model-generator"], function (require, exports, ej2_base_1, ej2_base_2, enum_1, constant_1, footer_renderer_1, summary_cell_renderer_1, summary_model_generator_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Aggregate = (function () {
        function Aggregate(parent, locator) {
            this.parent = parent;
            this.locator = locator;
            this.addEventListener();
        }
        Aggregate.prototype.getModuleName = function () {
            return 'aggregate';
        };
        Aggregate.prototype.initiateRender = function () {
            var _this = this;
            var cellFac = this.locator.getService('cellRendererFactory');
            var instance = new summary_cell_renderer_1.SummaryCellRenderer(this.parent, this.locator);
            [enum_1.CellType.Summary, enum_1.CellType.CaptionSummary, enum_1.CellType.GroupSummary].forEach(function (type) {
                return cellFac.addCellRenderer(type, instance);
            });
            this.footerRenderer = new footer_renderer_1.FooterRenderer(this.parent, this.locator);
            this.footerRenderer.renderPanel();
            this.footerRenderer.renderTable();
            this.locator.register('footerRenderer', this.footerRenderer);
            var fn = function () {
                _this.prepareSummaryInfo();
                _this.parent.off(constant_1.dataReady, fn);
            };
            this.parent.on(constant_1.dataReady, fn, this);
            this.parent.on(constant_1.dataReady, this.footerRenderer.refresh, this.footerRenderer);
        };
        Aggregate.prototype.prepareSummaryInfo = function () {
            var _this = this;
            summaryIterator(this.parent.aggregates, function (column) {
                var dataColumn = _this.parent.getColumnByField(column.field) || {};
                var type = dataColumn.type;
                column.setPropertiesSilent({ format: _this.getFormatFromType(column.format, type) });
                column.setFormatter();
                column.setPropertiesSilent({ columnName: column.columnName || column.field });
            });
        };
        Aggregate.prototype.getFormatFromType = function (format, type) {
            if (ej2_base_2.isNullOrUndefined(type) || typeof format !== 'string') {
                return format;
            }
            var obj;
            switch (type) {
                case 'number':
                    obj = { format: format };
                    break;
                case 'date':
                    obj = { type: type, skeleton: format };
                    break;
                case 'datetime':
                    obj = { type: 'dateTime', skeleton: format };
                    break;
            }
            return obj;
        };
        Aggregate.prototype.onPropertyChanged = function (e) {
            if (e.module !== this.getModuleName()) {
                return;
            }
            if (ej2_base_2.isNullOrUndefined(this.footerRenderer)) {
                this.initiateRender();
            }
            this.prepareSummaryInfo();
            this.footerRenderer.refresh();
            var cModel = new summary_model_generator_1.CaptionSummaryModelGenerator(this.parent);
            var gModel = new summary_model_generator_1.GroupSummaryModelGenerator(this.parent);
            if (gModel.getData().length !== 0 || !cModel.isEmpty()) {
                this.parent.notify(constant_1.modelChanged, {});
            }
        };
        Aggregate.prototype.addEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.on(constant_1.initialEnd, this.initiateRender, this);
            this.parent.on(constant_1.uiUpdate, this.onPropertyChanged, this);
        };
        Aggregate.prototype.removeEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.footerRenderer.removeEventListener();
            this.parent.off(constant_1.initialEnd, this.initiateRender);
            this.parent.off(constant_1.dataReady, this.footerRenderer.refresh);
            this.parent.off(constant_1.uiUpdate, this.onPropertyChanged);
        };
        Aggregate.prototype.destroy = function () {
            this.removeEventListener();
            ej2_base_1.remove(this.parent.element.querySelector('.e-gridfooter'));
        };
        return Aggregate;
    }());
    exports.Aggregate = Aggregate;
    function summaryIterator(aggregates, callback) {
        aggregates.forEach(function (row) {
            row.columns.forEach(function (column) {
                callback(column, row);
            });
        });
    }
    exports.summaryIterator = summaryIterator;
});
