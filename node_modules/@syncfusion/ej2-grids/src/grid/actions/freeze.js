define(["require", "exports", "../base/constant", "../base/enum", "../base/util", "@syncfusion/ej2-base", "../renderer/freeze-renderer"], function (require, exports, events, enum_1, util_1, ej2_base_1, freeze_renderer_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Freeze = (function () {
        function Freeze(parent, locator) {
            this.parent = parent;
            this.locator = locator;
            this.addEventListener();
        }
        Freeze.prototype.getModuleName = function () {
            return 'freeze';
        };
        Freeze.prototype.addEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.on(events.initialLoad, this.instantiateRenderer, this);
            this.parent.on(events.initialEnd, this.wireEvents, this);
        };
        Freeze.prototype.wireEvents = function () {
            if (this.parent.frozenRows) {
                ej2_base_1.EventHandler.add(this.parent.getHeaderContent(), 'dblclick', this.dblClickHandler, this);
            }
        };
        Freeze.prototype.dblClickHandler = function (e) {
            if (util_1.parentsUntil(e.target, 'e-grid').id !== this.parent.element.id) {
                return;
            }
            this.parent.notify(events.dblclick, e);
        };
        Freeze.prototype.instantiateRenderer = function () {
            var renderer = this.locator.getService('rendererFactory');
            if (this.parent.getFrozenColumns()) {
                renderer.addRenderer(enum_1.RenderType.Header, new freeze_renderer_1.FreezeRender(this.parent, this.locator));
                renderer.addRenderer(enum_1.RenderType.Content, new freeze_renderer_1.FreezeContentRender(this.parent, this.locator));
            }
        };
        Freeze.prototype.removeEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.off(events.initialLoad, this.instantiateRenderer);
        };
        Freeze.prototype.destroy = function () {
            this.removeEventListener();
        };
        return Freeze;
    }());
    exports.Freeze = Freeze;
});
