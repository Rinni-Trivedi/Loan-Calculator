define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "../base/constant", "../renderer/edit-renderer", "../renderer/boolean-edit-cell", "../renderer/dropdown-edit-cell", "../renderer/numeric-edit-cell", "../renderer/default-edit-cell", "./inline-edit", "./batch-edit", "./dialog-edit", "@syncfusion/ej2-popups", "../base/util", "@syncfusion/ej2-inputs", "../renderer/datepicker-edit-cell", "@syncfusion/ej2-popups"], function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, ej2_base_4, events, edit_renderer_1, boolean_edit_cell_1, dropdown_edit_cell_1, numeric_edit_cell_1, default_edit_cell_1, inline_edit_1, batch_edit_1, dialog_edit_1, ej2_popups_1, util_1, ej2_inputs_1, datepicker_edit_cell_1, ej2_popups_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Edit = (function () {
        function Edit(parent, serviceLocator) {
            this.editCellType = {
                'dropdownedit': dropdown_edit_cell_1.DropDownEditCell, 'numericedit': numeric_edit_cell_1.NumericEditCell,
                'datepickeredit': datepicker_edit_cell_1.DatePickerEditCell, 'booleanedit': boolean_edit_cell_1.BooleanEditCell, 'defaultedit': default_edit_cell_1.DefaultEditCell
            };
            this.editType = { 'Inline': inline_edit_1.InlineEdit, 'Normal': inline_edit_1.InlineEdit, 'Batch': batch_edit_1.BatchEdit, 'Dialog': dialog_edit_1.DialogEdit };
            this.parent = parent;
            this.serviceLocator = serviceLocator;
            this.l10n = this.serviceLocator.getService('localization');
            this.addEventListener();
            this.updateEditObj();
            this.createAlertDlg();
            this.createConfirmDlg();
        }
        Edit.prototype.updateColTypeObj = function () {
            for (var _i = 0, _a = this.parent.getColumns(); _i < _a.length; _i++) {
                var col = _a[_i];
                col.edit = ej2_base_2.extend(new this.editCellType[col.editType && this.editCellType[col.editType] ?
                    col.editType : 'defaultedit'](this.parent, this.serviceLocator), col.edit || {});
            }
        };
        Edit.prototype.getModuleName = function () {
            return 'edit';
        };
        Edit.prototype.onPropertyChanged = function (e) {
            if (e.module !== this.getModuleName()) {
                return;
            }
            var gObj = this.parent;
            var newProp = e.properties;
            for (var _i = 0, _a = Object.keys(e.properties); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                    case 'allowAdding':
                    case 'allowDeleting':
                    case 'allowEditing':
                        if (gObj.editSettings.allowAdding || gObj.editSettings.allowEditing || gObj.editSettings.allowDeleting) {
                            this.initialEnd();
                        }
                        break;
                    case 'mode':
                        this.updateEditObj();
                        gObj.isEdit = false;
                        gObj.refresh();
                        break;
                }
            }
        };
        Edit.prototype.updateEditObj = function () {
            if (this.editModule) {
                this.editModule.destroy();
            }
            this.renderer = new edit_renderer_1.EditRender(this.parent, this.serviceLocator);
            this.editModule = new this.editType[this.parent.editSettings.mode](this.parent, this.serviceLocator, this.renderer);
        };
        Edit.prototype.initialEnd = function () {
            this.updateColTypeObj();
        };
        Edit.prototype.wireEvents = function () {
            ej2_base_1.EventHandler.add(this.parent.getContent(), 'touchstart', this.tapEvent, this);
        };
        Edit.prototype.unwireEvents = function () {
            ej2_base_1.EventHandler.remove(this.parent.getContent(), 'touchstart', this.tapEvent);
        };
        Edit.prototype.tapEvent = function (e) {
            if (this.getUserAgent()) {
                if (!Global.timer) {
                    Global.timer = setTimeout(function () {
                        Global.timer = null;
                    }, 300);
                }
                else {
                    clearTimeout(Global.timer);
                    Global.timer = null;
                    this.parent.notify(events.doubleTap, e);
                }
            }
        };
        Edit.prototype.getUserAgent = function () {
            var userAgent = window.navigator.userAgent.toLowerCase();
            return /iphone|ipod|ipad/.test(userAgent);
        };
        Edit.prototype.startEdit = function (tr) {
            var gObj = this.parent;
            if (!gObj.editSettings.allowEditing || gObj.isEdit || gObj.editSettings.mode === 'Batch') {
                return;
            }
            if (!gObj.getSelectedRows().length) {
                if (!tr) {
                    this.showDialog('EditOperationAlert', this.alertDObj);
                    return;
                }
            }
            else if (!tr) {
                tr = gObj.getSelectedRows()[0];
            }
            if (tr.style.display === 'none') {
                return;
            }
            this.editModule.startEdit(tr);
            this.refreshToolbar();
            gObj.element.querySelector('.e-gridpopup').style.display = 'none';
            this.parent.notify('start-edit', {});
        };
        Edit.prototype.closeEdit = function () {
            if (this.parent.editSettings.mode === 'Batch' && this.parent.editSettings.showConfirmDialog
                && this.parent.element.querySelectorAll('.e-updatedtd').length) {
                this.showDialog('CancelEdit', this.dialogObj);
                return;
            }
            this.editModule.closeEdit();
            this.refreshToolbar();
            this.parent.notify('close-edit', {});
        };
        Edit.prototype.refreshToolbar = function () {
            this.parent.notify(events.toolbarRefresh, {});
        };
        Edit.prototype.addRecord = function (data, index) {
            if (!this.parent.editSettings.allowAdding) {
                return;
            }
            this.editModule.addRecord(data, index);
            this.refreshToolbar();
            this.parent.notify('start-add', {});
        };
        Edit.prototype.deleteRecord = function (fieldname, data) {
            var gObj = this.parent;
            if (!gObj.editSettings.allowDeleting) {
                return;
            }
            if (!data) {
                if (ej2_base_4.isNullOrUndefined(gObj.selectedRowIndex) || gObj.selectedRowIndex === -1) {
                    this.showDialog('DeleteOperationAlert', this.alertDObj);
                    return;
                }
            }
            if (gObj.editSettings.showDeleteConfirmDialog) {
                this.showDialog('ConfirmDelete', this.dialogObj);
                return;
            }
            this.editModule.deleteRecord(fieldname, data);
        };
        Edit.prototype.deleteRow = function (tr) {
            this.deleteRecord(null, this.parent.getCurrentViewRecords()[parseInt(tr.getAttribute('aria-rowindex'), 10)]);
        };
        Edit.prototype.endEdit = function () {
            if (this.parent.editSettings.mode === 'Batch' && this.parent.editSettings.showConfirmDialog &&
                (ej2_base_4.isNullOrUndefined(this.formObj) || this.formObj.validate())) {
                this.showDialog('BatchSaveConfirm', this.dialogObj);
                return;
            }
            this.endEditing();
        };
        Edit.prototype.updateCell = function (rowIndex, field, value) {
            this.editModule.updateCell(rowIndex, field, value);
        };
        Edit.prototype.updateRow = function (index, data) {
            this.editModule.updateRow(index, data);
        };
        Edit.prototype.batchCancel = function () {
            this.closeEdit();
        };
        Edit.prototype.batchSave = function () {
            this.endEdit();
        };
        Edit.prototype.editCell = function (index, field) {
            this.editModule.editCell(index, field);
        };
        Edit.prototype.editFormValidate = function () {
            if (this.formObj) {
                return this.formObj.validate();
            }
            return false;
        };
        Edit.prototype.getBatchChanges = function () {
            return this.editModule.getBatchChanges ? this.editModule.getBatchChanges() : {};
        };
        Edit.prototype.getCurrentEditCellData = function () {
            var obj = this.getCurrentEditedData(this.formObj.element, {});
            return obj[Object.keys(obj)[0]];
        };
        Edit.prototype.saveCell = function () {
            this.editModule.saveCell();
        };
        Edit.prototype.endEditing = function () {
            this.editModule.endEdit();
            this.refreshToolbar();
        };
        Edit.prototype.showDialog = function (content, obj) {
            obj.content = '<div>' + this.l10n.getConstant(content) + '</div>';
            obj.dataBind();
            obj.show();
        };
        Edit.prototype.getValueFromType = function (col, value) {
            var val = value;
            switch (col.type) {
                case 'number':
                    val = !isNaN(parseFloat(value)) ? parseFloat(value) : null;
                    break;
                case 'boolean':
                    if (col.editType !== 'booleanedit') {
                        val = value === this.l10n.getConstant('True') ? true : false;
                    }
                    break;
                case 'date':
                case 'datetime':
                    if (col.editType !== 'datepicker' && value && value.length) {
                        val = new Date(value);
                    }
                    break;
            }
            return val;
        };
        Edit.prototype.destroyToolTip = function () {
            var elements = [].slice.call(this.parent.element.querySelectorAll('.e-griderror'));
            for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
                var elem = elements_1[_i];
                ej2_base_3.remove(elem);
            }
            this.parent.getContent().firstElementChild.style.position = 'relative';
        };
        Edit.prototype.createConfirmDlg = function () {
            this.dialogObj = this.dlgWidget([
                {
                    click: this.dlgOk.bind(this),
                    buttonModel: { content: this.l10n.getConstant('OKButton'), cssClass: 'e-primary', isPrimary: true }
                },
                {
                    click: this.dlgCancel.bind(this),
                    buttonModel: { cssClass: 'e-flat', content: this.l10n.getConstant('CancelButton') }
                }
            ], 'EditConfirm');
        };
        Edit.prototype.createAlertDlg = function () {
            this.alertDObj = this.dlgWidget([
                {
                    click: this.alertClick.bind(this), buttonModel: { content: this.l10n.getConstant('OKButton'), cssClass: 'e-flat', isPrimary: true }
                }
            ], 'EditAlert');
        };
        Edit.prototype.alertClick = function () {
            this.alertDObj.hide();
        };
        Edit.prototype.dlgWidget = function (btnOptions, name) {
            var div = ej2_base_3.createElement('div', { id: this.parent.element.id + name });
            this.parent.element.appendChild(div);
            var options = {
                showCloseIcon: false,
                isModal: true,
                visible: false,
                closeOnEscape: true,
                target: this.parent.element,
                width: '320px',
                animationSettings: { effect: 'None' }
            };
            options.buttons = btnOptions;
            var obj = new ej2_popups_1.Dialog(options);
            obj.appendTo(div);
            util_1.changeButtonType(obj.element);
            return obj;
        };
        Edit.prototype.dlgCancel = function () {
            this.dialogObj.hide();
        };
        Edit.prototype.dlgOk = function (e) {
            switch (this.dialogObj.element.querySelector('.e-dlg-content').firstElementChild.innerText) {
                case this.l10n.getConstant('ConfirmDelete'):
                    this.editModule.deleteRecord();
                    break;
                case this.l10n.getConstant('CancelEdit'):
                    this.editModule.closeEdit();
                    break;
                case this.l10n.getConstant('BatchSaveConfirm'):
                    this.endEditing();
                    break;
                case this.l10n.getConstant('BatchSaveLostChanges'):
                    this.executeAction();
                    break;
            }
            this.dlgCancel();
        };
        Edit.prototype.addEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.on(events.inBoundModelChanged, this.onPropertyChanged, this);
            this.parent.on(events.initialEnd, this.initialEnd, this);
            this.parent.on(events.keyPressed, this.keyPressHandler, this);
            this.parent.on(events.autoCol, this.updateColTypeObj, this);
            this.parent.on(events.tooltipDestroy, this.destroyToolTip, this);
            this.parent.on(events.preventBatch, this.preventBatch, this);
            this.parent.on(events.destroyForm, this.destroyForm, this);
            this.actionBeginFunction = this.onActionBegin.bind(this);
            this.actionCompleteFunction = this.actionComplete.bind(this);
            this.parent.addEventListener(events.actionBegin, this.actionBeginFunction);
            this.parent.addEventListener(events.actionComplete, this.actionCompleteFunction);
            this.parent.on(events.initialEnd, this.wireEvents, this);
        };
        Edit.prototype.removeEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.off(events.inBoundModelChanged, this.onPropertyChanged);
            this.parent.off(events.initialEnd, this.initialEnd);
            this.parent.off(events.keyPressed, this.keyPressHandler);
            this.parent.off(events.autoCol, this.updateColTypeObj);
            this.parent.off(events.tooltipDestroy, this.destroyToolTip);
            this.parent.off(events.preventBatch, this.preventBatch);
            this.parent.off(events.destroyForm, this.destroyForm);
            this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunction);
            this.parent.removeEventListener(events.actionBegin, this.actionBeginFunction);
            this.parent.off(events.initialEnd, this.unwireEvents);
        };
        Edit.prototype.actionComplete = function (e) {
            var actions = ['add', 'beginEdit', 'save', 'delete', 'cancel'];
            if (actions.indexOf(e.requestType) < 0) {
                this.parent.isEdit = false;
            }
            this.refreshToolbar();
        };
        Edit.prototype.getCurrentEditedData = function (form, editedData) {
            var gObj = this.parent;
            var inputs = [].slice.call(form.querySelectorAll('.e-field'));
            for (var i = 0, len = inputs.length; i < len; i++) {
                var col = gObj.getColumnByUid(inputs[i].getAttribute('e-mappinguid'));
                var value = void 0;
                if (col && col.field) {
                    var temp = col.edit.read;
                    if (col.type !== 'checkbox') {
                        if (typeof temp === 'string') {
                            temp = ej2_base_2.getValue(temp, window);
                            value = gObj.editModule.getValueFromType(col, (temp)(inputs[i]));
                        }
                        else {
                            value = gObj.editModule.getValueFromType(col, col.edit.read(inputs[i]));
                        }
                    }
                    else {
                        value = inputs[i].checked;
                    }
                    ej2_base_4.setValue(col.field, value, editedData);
                }
            }
            return editedData;
        };
        Edit.prototype.onActionBegin = function (e) {
            var restrictedRequestTypes = ['filterafteropen', 'filterbeforeopen', 'filterchoicerequest', 'save'];
            if (this.parent.editSettings.mode !== 'Batch' && this.formObj && !this.formObj.isDestroyed
                && restrictedRequestTypes.indexOf(e.requestType) === -1) {
                this.destroyForm();
                this.destroyWidgets();
            }
        };
        Edit.prototype.destroyWidgets = function (cols) {
            cols = cols ? cols : this.parent.getColumns();
            for (var _i = 0, cols_1 = cols; _i < cols_1.length; _i++) {
                var col = cols_1[_i];
                var temp = col.edit.destroy;
                if (col.edit.destroy) {
                    if (typeof temp === 'string') {
                        temp = ej2_base_2.getValue(temp, window);
                        temp();
                    }
                    else {
                        col.edit.destroy();
                    }
                }
            }
        };
        Edit.prototype.destroyForm = function () {
            this.destroyToolTip();
            if (this.formObj && !this.formObj.isDestroyed) {
                this.formObj.destroy();
            }
            this.destroyToolTip();
        };
        Edit.prototype.destroy = function () {
            this.destroyForm();
            this.removeEventListener();
            var elem = this.dialogObj.element;
            this.dialogObj.destroy();
            ej2_base_3.remove(elem);
            elem = this.alertDObj.element;
            this.alertDObj.destroy();
            ej2_base_3.remove(elem);
            this.unwireEvents();
            if (this.editModule) {
                this.editModule.destroy();
            }
        };
        Edit.prototype.keyPressHandler = function (e) {
            switch (e.action) {
                case 'insert':
                    this.addRecord();
                    break;
                case 'delete':
                    if (e.target.tagName !== 'INPUT' && !document.querySelector('.e-popup-open')) {
                        this.deleteRecord();
                    }
                    break;
                case 'f2':
                    this.startEdit();
                    break;
                case 'enter':
                    if (!util_1.parentsUntil(e.target, '.e-unboundcelldiv') && this.parent.editSettings.mode !== 'Batch' &&
                        (util_1.parentsUntil(e.target, 'e-gridcontent') || (this.parent.frozenRows
                            && util_1.parentsUntil(e.target, 'e-headercontent')))
                        && !document.querySelectorAll('.e-popup-open').length) {
                        e.preventDefault();
                        this.endEdit();
                    }
                    break;
                case 'escape':
                    this.closeEdit();
                    break;
            }
        };
        Edit.prototype.preventBatch = function (args) {
            this.preventObj = args;
            this.showDialog('BatchSaveLostChanges', this.dialogObj);
        };
        Edit.prototype.executeAction = function () {
            this.preventObj.handler.call(this.preventObj.instance, this.preventObj.arg1, this.preventObj.arg2, this.preventObj.arg3, this.preventObj.arg4, this.preventObj.arg5, this.preventObj.arg6, this.preventObj.arg7);
        };
        Edit.prototype.applyFormValidation = function (cols) {
            var gObj = this.parent;
            var frzCols = gObj.getFrozenColumns();
            var form = gObj.element.querySelector('.e-gridform');
            var mForm = gObj.element.querySelectorAll('.e-gridform')[1];
            var rules = {};
            var mRules = {};
            cols = cols ? cols : gObj.columns;
            for (var _i = 0, cols_2 = cols; _i < cols_2.length; _i++) {
                var col = cols_2[_i];
                if (col.validationRules && form.querySelectorAll('#' + gObj.element.id + col.field).length) {
                    rules[col.field] = col.validationRules;
                }
                else if (frzCols && col.validationRules
                    && mForm.querySelectorAll('#' + gObj.element.id + col.field).length) {
                    mRules[col.field] = col.validationRules;
                }
            }
            this.parent.editModule.formObj = this.createFormObj(form, rules);
            if (frzCols && this.parent.editSettings.mode !== 'Dialog') {
                this.parent.editModule.mFormObj = this.createFormObj(mForm, mRules);
            }
        };
        Edit.prototype.createFormObj = function (form, rules) {
            var _this = this;
            return new ej2_inputs_1.FormValidator(form, {
                rules: rules,
                validationComplete: function (args) {
                    _this.validationComplete(args);
                },
                customPlacement: function (inputElement, error) {
                    _this.valErrorPlacement(inputElement, error);
                }
            });
        };
        Edit.prototype.valErrorPlacement = function (inputElement, error) {
            if (this.parent.isEdit) {
                var id = error.getAttribute('for');
                var elem = this.getElemTable(inputElement).querySelector('#' + id + '_Error');
                if (!elem) {
                    this.createTooltip(inputElement, error, id, '');
                }
                else {
                    elem.querySelector('.e-tip-content').innerHTML = error.innerHTML;
                }
            }
        };
        Edit.prototype.getElemTable = function (inputElement) {
            var isFHdr;
            if (this.parent.editSettings.mode !== 'Dialog') {
                isFHdr = (this.parent.frozenRows && this.parent.frozenRows
                    > (parseInt(ej2_base_1.closest(inputElement, '.e-row').getAttribute('aria-rowindex'), 10) || 0));
            }
            return this.parent.editSettings.mode !== 'Dialog' ? isFHdr ? this.parent.getHeaderTable() : this.parent.getContentTable() :
                this.parent.element.querySelector('#' + this.parent.element.id + '_dialogEdit_wrapper');
        };
        Edit.prototype.validationComplete = function (args) {
            if (this.parent.isEdit) {
                var elem = this.getElemTable(args.element).querySelector('#' + args.inputName + '_Error');
                if (elem) {
                    if (args.status === 'failure') {
                        elem.style.display = '';
                    }
                    else {
                        elem.style.display = 'none';
                    }
                }
            }
        };
        Edit.prototype.createTooltip = function (element, error, name, display) {
            var gcontent = this.parent.getContent().firstElementChild;
            var isScroll = gcontent.scrollHeight > gcontent.clientHeight;
            var isInline = this.parent.editSettings.mode !== 'Dialog';
            var isFHdr;
            if (isInline) {
                isFHdr = (this.parent.frozenRows && this.parent.frozenRows
                    > (parseInt(ej2_base_1.closest(element, '.e-row').getAttribute('aria-rowindex'), 10) || 0));
            }
            var fCont = this.parent.getContent().querySelector('.e-frozencontent');
            var table = isInline ?
                (isFHdr ? this.parent.getHeaderTable() : this.parent.getContentTable()) :
                this.parent.element.querySelector('#' + this.parent.element.id + '_dialogEdit_wrapper').querySelector('.e-dlg-content');
            var client = table.getBoundingClientRect();
            var left = isInline ?
                this.parent.element.getBoundingClientRect().left : client.left;
            var input = util_1.parentsUntil(element, 'e-rowcell');
            var inputClient = input.getBoundingClientRect();
            var td = ej2_base_1.closest(element, 'td').getBoundingClientRect();
            var div = ej2_base_3.createElement('div', {
                className: 'e-tooltip-wrap e-control e-popup e-griderror',
                id: name + '_Error',
                styles: 'display:' + display + ';top:' +
                    ((isFHdr ? inputClient.top + inputClient.height : inputClient.bottom - client.top
                        - (this.parent.getFrozenColumns() ? fCont.scrollTop : 0)) + table.scrollTop + 9) + 'px;left:' +
                    (inputClient.left - left + table.scrollLeft + inputClient.width / 2) + 'px;' +
                    'max-width:' + td.width + 'px;text-align:center;'
            });
            var content = ej2_base_3.createElement('div', { className: 'e-tip-content' });
            content.appendChild(error);
            var arrow = ej2_base_3.createElement('div', { className: 'e-arrow-tip e-tip-top' });
            arrow.appendChild(ej2_base_3.createElement('div', { className: 'e-arrow-tip-outer e-tip-top' }));
            arrow.appendChild(ej2_base_3.createElement('div', { className: 'e-arrow-tip-inner e-tip-top' }));
            div.appendChild(content);
            div.appendChild(arrow);
            table.appendChild(div);
            var lineHeight = parseInt(document.defaultView.getComputedStyle(div, null).getPropertyValue('font-size'), 10);
            if (div.getBoundingClientRect().width < td.width &&
                div.querySelector('label').getBoundingClientRect().height / (lineHeight * 1.2) >= 2) {
                div.style.width = div.style.maxWidth;
            }
            div.style.left = (parseInt(div.style.left, 10) - div.offsetWidth / 2) + 'px';
            if (!isScroll && isInline && !this.parent.allowPaging) {
                gcontent.style.position = 'static';
                var pos = ej2_popups_2.calculateRelativeBasedPosition(input, div);
                div.style.top = pos.top + inputClient.height + 9 + 'px';
            }
        };
        return Edit;
    }());
    exports.Edit = Edit;
    var Global;
    (function (Global) {
        Global.timer = null;
    })(Global = exports.Global || (exports.Global = {}));
});
