var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "./pdf-dictionary", "./pdf-number", "./../input-output/pdf-operators", "./pdf-name", "./pdf-array", "./pdf-reference", "@syncfusion/ej2-compression"], function (require, exports, pdf_dictionary_1, pdf_number_1, pdf_operators_1, pdf_name_1, pdf_array_1, pdf_reference_1, ej2_compression_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfStream = (function (_super) {
        __extends(PdfStream, _super);
        function PdfStream(dictionary, data) {
            var _this = _super.call(this, dictionary) || this;
            _this.dicPrefix = 'stream';
            _this.dicSuffix = 'endstream';
            _this.clonedObject2 = null;
            _this.bCompress = true;
            _this.isImageStream = false;
            if (typeof dictionary !== 'undefined' || typeof data !== 'undefined') {
                _this.dataStream2 = [];
                _this.dataStream2 = data;
                _this.bCompress2 = false;
            }
            else {
                _this.dataStream2 = [];
                _this.bCompress2 = true;
            }
            return _this;
        }
        Object.defineProperty(PdfStream.prototype, "internalStream", {
            get: function () {
                return this.dataStream2;
            },
            set: function (value) {
                this.dataStream2 = [];
                this.dataStream2 = value;
                this.modify();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStream.prototype, "isImage", {
            get: function () {
                return this.isImageStream;
            },
            set: function (value) {
                this.isImageStream = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStream.prototype, "compress", {
            get: function () {
                return this.bCompress;
            },
            set: function (value) {
                this.bCompress = value;
                this.modify();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStream.prototype, "data", {
            get: function () {
                return this.dataStream2;
            },
            set: function (value) {
                this.dataStream2 = [];
                this.dataStream2 = value;
                this.modify();
            },
            enumerable: true,
            configurable: true
        });
        PdfStream.prototype.clearStream = function () {
            this.internalStream = [];
            this.remove(this.dictionaryProperties.filter);
            this.bCompress = true;
            this.modify();
        };
        PdfStream.prototype.write = function (text) {
            if (text == null) {
                throw new Error('ArgumentNullException:text');
            }
            if (text.length <= 0) {
                throw new Error('ArgumentException: Can not write an empty string, text');
            }
            this.dataStream2.push(text);
            this.modify();
        };
        PdfStream.prototype.compressContent = function (data, writer) {
            if (this.bCompress) {
                var sw = new ej2_compression_1.CompressedStreamWriter();
                sw.write(data, 0, data.length);
                sw.close();
                data = sw.getCompressedString;
                this.addFilter(this.dictionaryProperties.flatedecode);
            }
            return data;
        };
        PdfStream.prototype.addFilter = function (filterName) {
            var obj = this.items.getValue(this.dictionaryProperties.filter);
            if (obj instanceof pdf_reference_1.PdfReferenceHolder) {
                var rh = obj;
                obj = rh.object;
            }
            var array = obj;
            var name = obj;
            if (name != null) {
                array = new pdf_array_1.PdfArray();
                array.insert(0, name);
                this.items.setValue(this.dictionaryProperties.filter, array);
            }
            name = new pdf_name_1.PdfName(filterName);
            if (array == null) {
                this.items.setValue(this.dictionaryProperties.filter, name);
            }
            else {
                array.insert(0, name);
            }
        };
        PdfStream.prototype.save = function (writer) {
            var data = '';
            for (var i = 0; i < this.data.length; i++) {
                data = data + this.data[i];
            }
            if (data.length > 1 && !this.isImage) {
                data = 'q\r\n' + data + 'Q\r\n';
            }
            data = this.compressContent(data, writer);
            var length = data.length;
            this.items.setValue(this.dictionaryProperties.length, new pdf_number_1.PdfNumber(length));
            _super.prototype.save.call(this, writer, false);
            writer.write(this.dicPrefix);
            writer.write(pdf_operators_1.Operators.newLine);
            if (data.length > 0) {
                writer.write(data);
            }
            writer.write(pdf_operators_1.Operators.newLine);
            writer.write(this.dicSuffix);
            writer.write(pdf_operators_1.Operators.newLine);
        };
        PdfStream.bytesToString = function (byteArray) {
            var output = '';
            for (var i = 0; i < byteArray.length; i++) {
                output = output + String.fromCharCode(byteArray[i]);
            }
            return output;
        };
        return PdfStream;
    }(pdf_dictionary_1.PdfDictionary));
    exports.PdfStream = PdfStream;
});
