var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "@syncfusion/ej2-base", "./cell-renderer", "../base/util"], function (require, exports, ej2_base_1, cell_renderer_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GroupCaptionCellRenderer = (function (_super) {
        __extends(GroupCaptionCellRenderer, _super);
        function GroupCaptionCellRenderer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.element = ej2_base_1.createElement('TD', { className: 'e-groupcaption', attrs: { role: 'gridcell', tabindex: '-1' } });
            return _this;
        }
        GroupCaptionCellRenderer.prototype.render = function (cell, data) {
            var node = this.element.cloneNode();
            var gObj = this.parent;
            var result;
            var helper = {};
            var fKeyValue;
            if (cell.isForeignKey) {
                fKeyValue = this.format(cell.column, cell.column.valueAccessor('foreignKey', data, cell.column));
            }
            var value = cell.isForeignKey ? fKeyValue : cell.column.enableGroupByFormat ? data.key :
                this.format(cell.column, cell.column.valueAccessor('key', data, cell.column));
            if (!ej2_base_1.isNullOrUndefined(gObj.groupSettings.captionTemplate)) {
                if (gObj.groupSettings.captionTemplate.indexOf('#') !== -1) {
                    result = util_1.templateCompiler(document.querySelector(gObj.groupSettings.captionTemplate).innerHTML.trim())(data);
                }
                else {
                    result = util_1.templateCompiler(gObj.groupSettings.captionTemplate)(data);
                }
                util_1.appendChildren(node, result);
            }
            else {
                node.innerHTML = cell.column.headerText + ': ' + value + ' - ' + data.count + ' ' +
                    (data.count < 2 ? this.localizer.getConstant('Item') : this.localizer.getConstant('Items'));
            }
            node.setAttribute('colspan', cell.colSpan.toString());
            node.setAttribute('aria-label', node.innerHTML + ' is groupcaption cell');
            node.setAttribute('title', node.innerHTML);
            return node;
        };
        return GroupCaptionCellRenderer;
    }(cell_renderer_1.CellRenderer));
    exports.GroupCaptionCellRenderer = GroupCaptionCellRenderer;
    var GroupCaptionEmptyCellRenderer = (function (_super) {
        __extends(GroupCaptionEmptyCellRenderer, _super);
        function GroupCaptionEmptyCellRenderer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.element = ej2_base_1.createElement('TD', { className: 'e-groupcaption' });
            return _this;
        }
        GroupCaptionEmptyCellRenderer.prototype.render = function (cell, data) {
            var node = this.element.cloneNode();
            node.innerHTML = '&nbsp;';
            node.setAttribute('colspan', cell.colSpan.toString());
            return node;
        };
        return GroupCaptionEmptyCellRenderer;
    }(cell_renderer_1.CellRenderer));
    exports.GroupCaptionEmptyCellRenderer = GroupCaptionEmptyCellRenderer;
});
