var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-popups", "@syncfusion/ej2-inputs", "../datepicker/datepicker", "../timepicker/timepicker", "@syncfusion/ej2-lists"], function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, ej2_base_4, ej2_popups_1, ej2_inputs_1, datepicker_1, timepicker_1, ej2_lists_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DATEWRAPPER = 'e-date-wrapper';
    var DATEPICKERROOT = 'e-datepicker';
    var DATETIMEWRAPPER = 'e-datetime-wrapper';
    var DAY = new Date().getDate();
    var MONTH = new Date().getMonth();
    var YEAR = new Date().getFullYear();
    var HOUR = new Date().getHours();
    var MINUTE = new Date().getMinutes();
    var SECOND = new Date().getSeconds();
    var MILLISECOND = new Date().getMilliseconds();
    var ROOT = 'e-datetimepicker';
    var DATETIMEPOPUPWRAPPER = 'e-datetimepopup-wrapper';
    var INPUTWRAPPER = 'e-input-group-icon';
    var POPUP = 'e-popup';
    var TIMEICON = 'e-time-icon';
    var INPUTFOCUS = 'e-input-focus';
    var POPUPDIMENSION = '250px';
    var ICONANIMATION = 'e-icon-anim';
    var DISABLED = 'e-disabled';
    var ERROR = 'e-error';
    var CONTENT = 'e-content';
    var RTL = 'e-rtl';
    var NAVIGATION = 'e-navigation';
    var ACTIVE = 'e-active';
    var HOVER = 'e-hover';
    var ICONS = 'e-icons';
    var HALFPOSITION = 2;
    var LISTCLASS = ej2_lists_1.cssClass.li;
    var ANIMATIONDURATION = 100;
    var OVERFLOW = 'e-time-overflow';
    var DateTimePicker = (function (_super) {
        __extends(DateTimePicker, _super);
        function DateTimePicker(options, element) {
            var _this = _super.call(this, options, element) || this;
            _this.valueWithMinutes = null;
            _this.previousDateTime = null;
            return _this;
        }
        DateTimePicker.prototype.focusHandler = function () {
            ej2_base_3.addClass([this.inputWrapper.container], INPUTFOCUS);
        };
        DateTimePicker.prototype.focusIn = function () {
            _super.prototype.focusIn.call(this);
        };
        DateTimePicker.prototype.focusOut = function () {
            if (document.activeElement === this.inputElement) {
                this.inputElement.blur();
                ej2_base_3.removeClass([this.inputWrapper.container], [INPUTFOCUS]);
            }
        };
        DateTimePicker.prototype.blurHandler = function (e) {
            if (this.isTimePopupOpen() && this.isPreventBlur) {
                this.inputElement.focus();
                return;
            }
            ej2_base_3.removeClass([this.inputWrapper.container], INPUTFOCUS);
            var blurArguments = {
                model: this
            };
            if (this.isTimePopupOpen()) {
                this.hide(e);
            }
            this.trigger('blur', blurArguments);
        };
        DateTimePicker.prototype.destroy = function () {
            if (this.popupObject && this.popupObject.element.classList.contains(POPUP)) {
                this.dateTimeWrapper = undefined;
                this.liCollections = this.timeCollections = [];
                if (!ej2_base_4.isNullOrUndefined(this.rippleFn)) {
                    this.rippleFn();
                }
            }
            var ariaAttribute = {
                'aria-live': 'assertive', 'aria-atomic': 'true', 'aria-invalid': 'false',
                'aria-haspopup': 'true', 'aria-activedescendant': 'null',
                'autocorrect': 'off', 'autocapitalize': 'off', 'spellcheck': 'false',
                'aria-owns': this.element.id + '_options', 'aria-expanded': 'false', 'role': 'combobox', 'autocomplete': 'off'
            };
            if (this.inputElement) {
                ej2_inputs_1.Input.removeAttributes(ariaAttribute, this.inputElement);
                this.inputElement.removeAttribute('aria-placeholder');
            }
            if (this.isCalendar()) {
                if (this.popupWrapper) {
                    ej2_base_2.detach(this.popupWrapper);
                }
                this.popupObject = this.popupWrapper = null;
                this.keyboardHandler.destroy();
            }
            this.unBindInputEvents();
            _super.prototype.destroy.call(this);
        };
        DateTimePicker.prototype.render = function () {
            this.timekeyConfigure = {
                enter: 'enter',
                escape: 'escape',
                end: 'end',
                tab: 'tab',
                home: 'home',
                down: 'downarrow',
                up: 'uparrow',
                left: 'leftarrow',
                right: 'rightarrow',
                open: 'alt+downarrow',
                close: 'alt+uparrow'
            };
            this.valueWithMinutes = null;
            this.previousDateTime = null;
            this.isPreventBlur = false;
            this.cloneElement = this.element.cloneNode(true);
            this.dateTimeFormat = this.cldrDateTimeFormat();
            this.initValue = this.value;
            this.checkAttributes();
            var localeText = { placeholder: this.placeholder };
            this.l10n = new ej2_base_3.L10n('datetimepicker', localeText, this.locale);
            this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant('placeholder') }, true);
            _super.prototype.render.call(this);
            this.createInputElement();
            this.bindInputEvents();
            this.setValue();
        };
        DateTimePicker.prototype.setValue = function () {
            this.initValue = this.validateMinMaxRange(this.value);
            if (!this.strictMode && this.isDateObject(this.initValue)) {
                var value = this.validateMinMaxRange(this.initValue);
                ej2_inputs_1.Input.setValue(this.getFormattedValue(value), this.inputElement, this.floatLabelType, this.showClearButton);
                this.setProperties({ value: value }, true);
            }
            else {
                if (ej2_base_4.isNullOrUndefined(this.value)) {
                    this.initValue = null;
                    this.setProperties({ value: null }, true);
                }
            }
            this.valueWithMinutes = this.value;
            _super.prototype.updateInput.call(this);
        };
        DateTimePicker.prototype.validateMinMaxRange = function (value) {
            var result = value;
            if (this.isDateObject(value)) {
                result = this.validateValue(value);
            }
            else {
                if (+this.min > +this.max) {
                    this.disablePopupButton(true);
                }
            }
            this.checkValidState(result);
            return result;
        };
        DateTimePicker.prototype.checkValidState = function (value) {
            this.isValidState = true;
            if (!this.strictMode) {
                if ((+(value) > +(this.max)) || (+(value) < +(this.min))) {
                    this.isValidState = false;
                }
            }
            this.checkErrorState();
        };
        DateTimePicker.prototype.checkErrorState = function () {
            if (this.isValidState) {
                ej2_base_3.removeClass([this.inputWrapper.container], ERROR);
            }
            else {
                ej2_base_3.addClass([this.inputWrapper.container], ERROR);
            }
            ej2_base_3.attributes(this.inputElement, { 'aria-invalid': this.isValidState ? 'false' : 'true' });
        };
        DateTimePicker.prototype.validateValue = function (value) {
            var dateVal = value;
            if (this.strictMode) {
                if (+this.min > +this.max) {
                    this.disablePopupButton(true);
                    dateVal = this.max;
                }
                else if (+value < +this.min) {
                    dateVal = this.min;
                }
                else if (+value > +this.max) {
                    dateVal = this.max;
                }
            }
            else {
                if (+this.min > +this.max) {
                    this.disablePopupButton(true);
                    dateVal = value;
                }
            }
            return dateVal;
        };
        DateTimePicker.prototype.disablePopupButton = function (isDisable) {
            if (isDisable) {
                ej2_base_3.addClass([this.inputWrapper.buttons[0], this.timeIcon], DISABLED);
                this.hide();
            }
            else {
                ej2_base_3.removeClass([this.inputWrapper.buttons[0], this.timeIcon], DISABLED);
            }
        };
        DateTimePicker.prototype.getFormattedValue = function (value) {
            if (!ej2_base_4.isNullOrUndefined(value)) {
                var dateOptions = { format: this.cldrDateTimeFormat(), type: 'dateTime', skeleton: 'yMd' };
                return this.globalize.formatDate(value, dateOptions);
            }
            else {
                return null;
            }
        };
        DateTimePicker.prototype.isDateObject = function (value) {
            return (!ej2_base_4.isNullOrUndefined(value) && !isNaN(+value)) ? true : false;
        };
        DateTimePicker.prototype.createInputElement = function () {
            ej2_base_3.removeClass([this.inputElement], DATEPICKERROOT);
            ej2_base_3.removeClass([this.inputWrapper.container], DATEWRAPPER);
            ej2_base_3.addClass([this.inputWrapper.container], DATETIMEWRAPPER);
            ej2_base_3.addClass([this.inputElement], ROOT);
            this.renderTimeIcon();
        };
        DateTimePicker.prototype.renderTimeIcon = function () {
            this.timeIcon = ej2_inputs_1.Input.appendSpan(INPUTWRAPPER + ' ' + TIMEICON + ' ' + ICONS, this.inputWrapper.container);
        };
        DateTimePicker.prototype.bindInputEvents = function () {
            ej2_base_1.EventHandler.add(this.timeIcon, 'mousedown touchstart', this.timeHandler, this);
            ej2_base_1.EventHandler.add(this.inputWrapper.buttons[0], 'mousedown touchstart', this.dateHandler, this);
            ej2_base_1.EventHandler.add(this.inputElement, 'blur', this.blurHandler, this);
            ej2_base_1.EventHandler.add(this.inputElement, 'focus', this.focusHandler, this);
            this.keyboardHandler = new ej2_base_4.KeyboardEvents(this.inputElement, {
                eventName: 'keydown',
                keyAction: this.inputKeyAction.bind(this),
                keyConfigs: this.keyConfigs
            });
        };
        DateTimePicker.prototype.unBindInputEvents = function () {
            ej2_base_1.EventHandler.remove(this.timeIcon, 'mousedown touchstart', this.timeHandler);
            ej2_base_1.EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown touchstart', this.dateHandler);
            if (this.inputElement) {
                ej2_base_1.EventHandler.remove(this.inputElement, 'blur', this.blurHandler);
                ej2_base_1.EventHandler.remove(this.inputElement, 'focus', this.focusHandler);
            }
            if (this.keyboardHandler) {
                this.keyboardHandler.destroy();
            }
        };
        DateTimePicker.prototype.cldrTimeFormat = function () {
            var cldrTime;
            if (this.isNullOrEmpty(this.timeFormat)) {
                if (this.locale === 'en' || this.locale === 'en-US') {
                    cldrTime = (ej2_base_4.getValue('timeFormats.short', ej2_base_2.getDefaultDateObject()));
                }
                else {
                    cldrTime = (this.getCultureTimeObject(ej2_base_2.cldrData, '' + this.locale));
                }
            }
            else {
                cldrTime = this.timeFormat;
            }
            return cldrTime;
        };
        DateTimePicker.prototype.cldrDateTimeFormat = function () {
            var cldrTime;
            var culture = new ej2_base_1.Internationalization(this.locale);
            var dateFormat = culture.getDatePattern({ skeleton: 'yMd' });
            if (this.isNullOrEmpty(this.format)) {
                cldrTime = dateFormat + ' ' + this.getCldrFormat('time');
            }
            else {
                cldrTime = this.format;
            }
            return cldrTime;
        };
        DateTimePicker.prototype.getCldrFormat = function (type) {
            var cldrDateTime;
            if (this.locale === 'en' || this.locale === 'en-US') {
                cldrDateTime = (ej2_base_4.getValue('timeFormats.short', ej2_base_2.getDefaultDateObject()));
            }
            else {
                cldrDateTime = (this.getCultureTimeObject(ej2_base_2.cldrData, '' + this.locale));
            }
            return cldrDateTime;
        };
        DateTimePicker.prototype.isNullOrEmpty = function (value) {
            if (ej2_base_4.isNullOrUndefined(value) || (typeof value === 'string' && value.trim() === '')) {
                return true;
            }
            else {
                return false;
            }
        };
        DateTimePicker.prototype.getCultureTimeObject = function (ld, c) {
            return ej2_base_4.getValue('main.' + '' + this.locale + '.dates.calendars.gregorian.timeFormats.short', ld);
        };
        DateTimePicker.prototype.timeHandler = function (e) {
            if (e.currentTarget === this.timeIcon) {
                e.preventDefault();
            }
            if (this.enabled && !this.readonly) {
                if (this.isDatePopupOpen()) {
                    _super.prototype.hide.call(this, e);
                }
                if (this.isTimePopupOpen()) {
                    this.closePopup(e);
                }
                else {
                    if (!ej2_base_1.Browser.isDevice) {
                        this.inputElement.focus();
                    }
                    this.popupCreation('time', e);
                }
            }
            ej2_base_3.addClass([this.inputWrapper.container], [INPUTFOCUS]);
        };
        DateTimePicker.prototype.dateHandler = function (e) {
            if (e.currentTarget === this.inputWrapper.buttons[0]) {
                e.preventDefault();
            }
            if (this.enabled && !this.readonly) {
                if (this.isTimePopupOpen()) {
                    this.closePopup(e);
                }
                if (!ej2_base_4.isNullOrUndefined(this.popupWrapper)) {
                    this.popupCreation('date', e);
                }
            }
        };
        DateTimePicker.prototype.show = function (type, e) {
            if ((this.enabled && this.readonly) || !this.enabled) {
                return;
            }
            else {
                if (type === 'time' && !this.dateTimeWrapper) {
                    if (this.isDatePopupOpen()) {
                        this.hide(e);
                    }
                    this.popupCreation('time', e);
                }
                else if (!this.popupObj) {
                    if (this.isTimePopupOpen()) {
                        this.hide(e);
                    }
                    _super.prototype.show.call(this);
                    this.popupCreation('date', e);
                }
            }
        };
        DateTimePicker.prototype.toggle = function (e) {
            if (this.isDatePopupOpen()) {
                _super.prototype.hide.call(this, e);
                this.show('time', null);
            }
            else if (this.isTimePopupOpen()) {
                this.hide(e);
                _super.prototype.show.call(this, null, e);
                this.popupCreation('date', null);
            }
            else {
                this.show(null, e);
            }
        };
        DateTimePicker.prototype.listCreation = function () {
            var value = ej2_base_4.isNullOrUndefined(this.value) ? this.inputElement.value !== '' ?
                this.globalize.parseDate(this.inputElement.value, { format: this.cldrDateTimeFormat(), type: 'datetime' }) :
                new Date() : this.value;
            this.valueWithMinutes = value;
            this.listWrapper = ej2_base_3.createElement('div', { className: CONTENT, attrs: { 'tabindex': '0' } });
            var min = this.startTime(value);
            var max = this.endTime(value);
            var listDetails = timepicker_1.TimePickerBase.createListItems(min, max, this.globalize, this.cldrTimeFormat(), this.step);
            this.timeCollections = listDetails.collection;
            this.listTag = listDetails.list;
            ej2_base_3.attributes(this.listTag, { 'role': 'listbox', 'aria-hidden': 'false', 'id': this.element.id + '_options' });
            ej2_base_3.append([listDetails.list], this.listWrapper);
            this.wireTimeListEvents();
            var rippleModel = { duration: 300, selector: '.' + LISTCLASS };
            this.rippleFn = ej2_base_4.rippleEffect(this.listWrapper, rippleModel);
            this.liCollections = this.listWrapper.querySelectorAll('.' + LISTCLASS);
        };
        DateTimePicker.prototype.popupCreation = function (type, e) {
            if (type === 'date') {
                if (!this.readonly && this.popupWrapper) {
                    ej2_base_3.addClass([this.popupWrapper], DATETIMEPOPUPWRAPPER);
                    ej2_base_3.attributes(this.popupWrapper, { 'id': this.element.id + '_datepopup' });
                }
            }
            else {
                if (!this.readonly) {
                    this.dateTimeWrapper = ej2_base_3.createElement('div', {
                        className: ROOT + ' ' + POPUP,
                        attrs: { 'id': this.element.id + '_timepopup', 'style': 'visibility:hidden ; display:block' }
                    });
                    if (!ej2_base_4.isNullOrUndefined(this.cssClass)) {
                        this.dateTimeWrapper.classList.add(this.cssClass);
                    }
                    if (!ej2_base_4.isNullOrUndefined(this.step) && this.step > 0) {
                        this.listCreation();
                        ej2_base_3.append([this.listWrapper], this.dateTimeWrapper);
                    }
                    document.body.appendChild(this.dateTimeWrapper);
                    this.addTimeSelection();
                    this.renderPopup();
                    this.setTimeScrollPosition();
                    this.openPopup(e);
                    this.popupObject.refreshPosition(this.inputElement);
                }
            }
        };
        DateTimePicker.prototype.openPopup = function (e) {
            this.preventArgs = {
                cancel: false,
                popup: this.popupObject,
                e: e || null
            };
            this.trigger('open', this.preventArgs);
            if (!this.preventArgs.cancel && !this.readonly) {
                var openAnimation = {
                    name: 'FadeIn',
                    duration: ANIMATIONDURATION,
                };
                this.popupObject.show(new ej2_base_2.Animation(openAnimation));
                ej2_base_3.addClass([this.inputWrapper.container], [ICONANIMATION]);
                ej2_base_3.attributes(this.inputElement, { 'aria-expanded': 'true' });
                ej2_base_1.EventHandler.add(document, 'mousedown touchstart', this.documentClickHandler, this);
            }
        };
        DateTimePicker.prototype.documentClickHandler = function (event) {
            if (!ej2_base_1.Browser.isDevice) {
                event.preventDefault();
            }
            var target = event.target;
            if (!(ej2_base_3.closest(target, '#' + (this.popupObject && this.popupObject.element.id))) && target !== this.inputElement
                && target !== this.timeIcon && target !== this.inputWrapper.container) {
                if (this.isTimePopupOpen()) {
                    this.hide(event);
                }
            }
            else if (target !== this.inputElement) {
                if (!ej2_base_1.Browser.isDevice) {
                    this.isPreventBlur = (ej2_base_1.Browser.isIE || ej2_base_1.Browser.info.name === 'edge') && (document.activeElement === this.inputElement);
                    event.preventDefault();
                }
            }
        };
        DateTimePicker.prototype.isTimePopupOpen = function () {
            return (this.dateTimeWrapper && this.dateTimeWrapper.classList.contains('' + ROOT)) ? true : false;
        };
        DateTimePicker.prototype.isDatePopupOpen = function () {
            return (this.popupWrapper && this.popupWrapper.classList.contains('' + DATETIMEPOPUPWRAPPER)) ? true : false;
        };
        DateTimePicker.prototype.renderPopup = function () {
            var _this = this;
            this.containerStyle = this.inputWrapper.container.getBoundingClientRect();
            if (ej2_base_1.Browser.isDevice) {
                this.timeModal = ej2_base_3.createElement('div');
                this.timeModal.className = '' + ROOT + ' e-time-modal';
                document.body.className += ' ' + OVERFLOW;
                this.timeModal.style.display = 'block';
                document.body.appendChild(this.timeModal);
            }
            var offset = 4;
            this.popupObject = new ej2_popups_1.Popup(this.dateTimeWrapper, {
                width: this.setPopupWidth(),
                zIndex: this.zIndex,
                targetType: 'container',
                collision: ej2_base_1.Browser.isDevice ? { X: 'fit', Y: 'fit' } : { X: 'flip', Y: 'flip' },
                relateTo: ej2_base_1.Browser.isDevice ? document.body : this.inputWrapper.container,
                position: ej2_base_1.Browser.isDevice ? { X: 'center', Y: 'center' } : { X: 'left', Y: 'bottom' },
                enableRtl: this.enableRtl,
                offsetY: offset,
                open: function () {
                    _this.dateTimeWrapper.style.visibility = 'visible';
                    ej2_base_3.addClass([_this.timeIcon], ACTIVE);
                    if (!ej2_base_1.Browser.isDevice) {
                        _this.inputEvent = new ej2_base_4.KeyboardEvents(_this.inputWrapper.container, {
                            keyAction: _this.TimeKeyActionHandle.bind(_this), keyConfigs: _this.timekeyConfigure, eventName: 'keydown'
                        });
                    }
                }, close: function () {
                    ej2_base_3.removeClass([_this.timeIcon], ACTIVE);
                    _this.unWireTimeListEvents();
                    _this.inputElement.setAttribute('aria-activedescendant', 'null');
                    ej2_base_3.remove(_this.popupObject.element);
                    _this.popupObject.destroy();
                    _this.dateTimeWrapper.innerHTML = '';
                    _this.listWrapper = _this.dateTimeWrapper = undefined;
                    if (_this.inputEvent) {
                        _this.inputEvent.destroy();
                    }
                }
            });
            this.popupObject.element.style.maxHeight = POPUPDIMENSION;
        };
        DateTimePicker.prototype.setDimension = function (width) {
            if (typeof width === 'number') {
                width = ej2_base_4.formatUnit(width);
            }
            else if (typeof width === 'string') {
                width = width;
            }
            else {
                width = '100%';
            }
            return width;
        };
        DateTimePicker.prototype.setPopupWidth = function () {
            var width = this.setDimension(this.width);
            if (width.indexOf('%') > -1) {
                var inputWidth = this.containerStyle.width * parseFloat(width) / 100;
                width = inputWidth.toString() + 'px';
            }
            return width;
        };
        DateTimePicker.prototype.wireTimeListEvents = function () {
            ej2_base_1.EventHandler.add(this.listWrapper, 'click', this.onMouseClick, this);
            if (!ej2_base_1.Browser.isDevice) {
                ej2_base_1.EventHandler.add(this.listWrapper, 'mouseover', this.onMouseOver, this);
                ej2_base_1.EventHandler.add(this.listWrapper, 'mouseout', this.onMouseLeave, this);
            }
        };
        DateTimePicker.prototype.unWireTimeListEvents = function () {
            if (this.listWrapper) {
                ej2_base_1.EventHandler.remove(this.listWrapper, 'click', this.onMouseClick);
                ej2_base_1.EventHandler.remove(document, 'mousedown touchstart', this.documentClickHandler);
                if (!ej2_base_1.Browser.isDevice) {
                    ej2_base_1.EventHandler.add(this.listWrapper, 'mouseover', this.onMouseOver, this);
                    ej2_base_1.EventHandler.add(this.listWrapper, 'mouseout', this.onMouseLeave, this);
                }
            }
        };
        DateTimePicker.prototype.onMouseOver = function (event) {
            var currentLi = ej2_base_3.closest(event.target, '.' + LISTCLASS);
            this.setTimeHover(currentLi, HOVER);
        };
        DateTimePicker.prototype.onMouseLeave = function () {
            this.removeTimeHover(HOVER);
        };
        DateTimePicker.prototype.setTimeHover = function (li, className) {
            if (this.enabled && this.isValidLI(li) && !li.classList.contains(className)) {
                this.removeTimeHover(className);
                ej2_base_3.addClass([li], className);
            }
        };
        DateTimePicker.prototype.getPopupHeight = function () {
            var height = parseInt(POPUPDIMENSION, 10);
            var popupHeight = this.dateTimeWrapper.getBoundingClientRect().height;
            return popupHeight > height ? height : popupHeight;
        };
        DateTimePicker.prototype.changeEvent = function (e) {
            if (+this.previousDateTime !== +this.value) {
                _super.prototype.changeEvent.call(this, e);
                if (!ej2_base_1.Browser.isDevice) {
                    this.inputElement.focus();
                }
                this.valueWithMinutes = this.value;
                this.setInputValue('date');
            }
        };
        DateTimePicker.prototype.updateValue = function (e) {
            this.setInputValue('time');
            if (+this.previousDateTime !== +this.value) {
                this.changedArgs = {
                    value: this.value, e: e || null,
                    isInteracted: !ej2_base_4.isNullOrUndefined(e),
                    element: this.element
                };
                this.addTimeSelection();
                this.trigger('change', this.changedArgs);
                this.previousDateTime = this.value;
            }
        };
        DateTimePicker.prototype.setTimeScrollPosition = function () {
            var popupHeight = this.getPopupHeight();
            var popupElement;
            popupElement = this.selectedElement;
            if (!ej2_base_4.isNullOrUndefined(popupElement)) {
                var nextEle = popupElement.nextElementSibling;
                var height = nextEle ? nextEle.offsetTop : popupElement.offsetTop;
                var liHeight = popupElement.getBoundingClientRect().height;
                if ((height + popupElement.offsetTop) > popupHeight) {
                    this.dateTimeWrapper.scrollTop = nextEle ? (height - (popupHeight / HALFPOSITION + liHeight / HALFPOSITION)) : height;
                }
                else {
                    this.dateTimeWrapper.scrollTop = 0;
                }
            }
        };
        DateTimePicker.prototype.setInputValue = function (type) {
            if (type === 'date') {
                this.inputElement.value = this.previousElementValue = this.getFormattedValue(this.getFullDateTime());
                this.setProperties({ value: this.getFullDateTime() }, true);
            }
            else {
                var tempVal = this.getFormattedValue(new Date(this.timeCollections[this.activeIndex]));
                ej2_inputs_1.Input.setValue(tempVal, this.inputElement, this.floatLabelType, this.showClearButton);
                this.previousElementValue = this.inputElement.value;
                this.setProperties({ value: new Date(this.timeCollections[this.activeIndex]) }, true);
            }
        };
        DateTimePicker.prototype.getFullDateTime = function () {
            var value = null;
            if (this.isDateObject(this.valueWithMinutes)) {
                value = this.combineDateTime(this.valueWithMinutes);
            }
            else {
                value = this.previousDate;
            }
            return this.validateMinMaxRange(value);
        };
        DateTimePicker.prototype.combineDateTime = function (value) {
            if (this.isDateObject(value)) {
                var day = this.previousDate.getDate();
                var month = this.previousDate.getMonth();
                var year = this.previousDate.getFullYear();
                var hour = value.getHours();
                var minutes = value.getMinutes();
                var seconds = value.getSeconds();
                return new Date(year, month, day, hour, minutes, seconds);
            }
            else {
                return this.previousDate;
            }
        };
        DateTimePicker.prototype.onMouseClick = function (event) {
            var target = event.target;
            var li = this.selectedElement = ej2_base_3.closest(target, '.' + LISTCLASS);
            if (li && li.classList.contains(LISTCLASS)) {
                this.timeValue = li.getAttribute('data-value');
                this.hide(event);
            }
            this.setSelection(li, event);
        };
        DateTimePicker.prototype.setSelection = function (li, event) {
            if (this.isValidLI(li) && !li.classList.contains(ACTIVE)) {
                var value = li.getAttribute('data-value');
                this.selectedElement = li;
                var index = Array.prototype.slice.call(this.liCollections).indexOf(li);
                this.activeIndex = index;
                this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
                ej2_base_3.addClass([this.selectedElement], ACTIVE);
                this.selectedElement.setAttribute('aria-selected', 'true');
                this.updateValue(event);
            }
        };
        DateTimePicker.prototype.setTimeActiveClass = function () {
            var collections = ej2_base_4.isNullOrUndefined(this.dateTimeWrapper) ? this.listWrapper : this.dateTimeWrapper;
            if (!ej2_base_4.isNullOrUndefined(collections)) {
                var items = collections.querySelectorAll('.' + LISTCLASS);
                if (items.length) {
                    for (var i = 0; i < items.length; i++) {
                        if (this.timeCollections[i] === +(this.valueWithMinutes)) {
                            items[i].setAttribute('aria-selected', 'true');
                            this.selectedElement = items[i];
                            this.activeIndex = i;
                            this.setTimeActiveDescendant();
                            break;
                        }
                    }
                }
            }
        };
        DateTimePicker.prototype.setTimeActiveDescendant = function () {
            if (!ej2_base_4.isNullOrUndefined(this.selectedElement)) {
                ej2_base_3.attributes(this.inputElement, { 'aria-activedescendant': this.selectedElement.getAttribute('id') });
            }
            else {
                ej2_base_3.attributes(this.inputElement, { 'aria-activedescendant': 'null' });
            }
        };
        DateTimePicker.prototype.addTimeSelection = function () {
            this.selectedElement = null;
            this.removeTimeSelection();
            this.setTimeActiveClass();
            if (!ej2_base_4.isNullOrUndefined(this.selectedElement)) {
                ej2_base_3.addClass([this.selectedElement], ACTIVE);
                this.selectedElement.setAttribute('aria-selected', 'true');
            }
        };
        DateTimePicker.prototype.removeTimeSelection = function () {
            this.removeTimeHover(HOVER);
            if (!ej2_base_4.isNullOrUndefined(this.dateTimeWrapper)) {
                var items = this.dateTimeWrapper.querySelectorAll('.' + ACTIVE);
                if (items.length) {
                    ej2_base_3.removeClass(items, ACTIVE);
                    items[0].removeAttribute('aria-selected');
                }
            }
        };
        DateTimePicker.prototype.removeTimeHover = function (className) {
            var hoveredItem = this.getTimeHoverItem(className);
            if (hoveredItem && hoveredItem.length) {
                ej2_base_3.removeClass(hoveredItem, className);
            }
        };
        DateTimePicker.prototype.getTimeHoverItem = function (className) {
            var collections = ej2_base_4.isNullOrUndefined(this.dateTimeWrapper) ? this.listWrapper : this.dateTimeWrapper;
            var hoveredItem;
            if (!ej2_base_4.isNullOrUndefined(collections)) {
                hoveredItem = collections.querySelectorAll('.' + className);
            }
            return hoveredItem;
        };
        DateTimePicker.prototype.isValidLI = function (li) {
            return (li && li.classList.contains(LISTCLASS) && !li.classList.contains(DISABLED));
        };
        DateTimePicker.prototype.calculateStartEnd = function (value, range, method) {
            var day = value.getDate();
            var month = value.getMonth();
            var year = value.getFullYear();
            var hours = value.getHours();
            var minutes = value.getMinutes();
            var seconds = value.getSeconds();
            var milliseconds = value.getMilliseconds();
            if (range) {
                if (method === 'starttime') {
                    return new Date(year, month, day, 0, 0, 0);
                }
                else {
                    return new Date(year, month, day, 23, 59, 59);
                }
            }
            else {
                return new Date(year, month, day, hours, minutes, seconds, milliseconds);
            }
        };
        DateTimePicker.prototype.startTime = function (date) {
            var tempStartValue;
            var start;
            var tempMin = this.min;
            var value;
            value = date === null ? new Date() : date;
            if ((+value.getDate() === +tempMin.getDate() && +value.getMonth() === +tempMin.getMonth() &&
                +value.getFullYear() === +tempMin.getFullYear()) || ((+new Date(value.getFullYear(), value.getMonth(), value.getDate())) <=
                +new Date(tempMin.getFullYear(), tempMin.getMonth(), tempMin.getDate()))) {
                start = false;
                tempStartValue = this.min;
            }
            else if (+value < +this.max && +value > +this.min) {
                start = true;
                tempStartValue = value;
            }
            else if (+value >= +this.max) {
                start = true;
                tempStartValue = this.max;
            }
            return this.calculateStartEnd(tempStartValue, start, 'starttime');
        };
        DateTimePicker.prototype.endTime = function (date) {
            var tempEndValue;
            var end;
            var tempMax = this.max;
            var value;
            value = date === null ? new Date() : date;
            if ((+value.getDate() === +tempMax.getDate() && +value.getMonth() === +tempMax.getMonth() &&
                +value.getFullYear() === +tempMax.getFullYear()) || (+new Date(value.getUTCFullYear(), value.getMonth(), value.getDate()) >=
                +new Date(tempMax.getFullYear(), tempMax.getMonth(), tempMax.getDate()))) {
                end = false;
                tempEndValue = this.max;
            }
            else if (+value < +this.max && +value > +this.min) {
                end = true;
                tempEndValue = value;
            }
            else if (+value <= +this.min) {
                end = true;
                tempEndValue = this.min;
            }
            return this.calculateStartEnd(tempEndValue, end, 'endtime');
        };
        DateTimePicker.prototype.hide = function (e) {
            if (this.popupObj || this.dateTimeWrapper) {
                this.preventArgs = {
                    cancel: false,
                    popup: this.popupObj || this.popupObject,
                    e: e || null
                };
                if (ej2_base_4.isNullOrUndefined(this.popupObj)) {
                    this.trigger('close', this.preventArgs);
                }
                if (!this.preventArgs.cancel) {
                    if (this.isDatePopupOpen()) {
                        _super.prototype.hide.call(this, e);
                    }
                    else if (this.isTimePopupOpen()) {
                        this.closePopup(e);
                        ej2_base_3.removeClass([document.body], OVERFLOW);
                        if (ej2_base_1.Browser.isDevice && this.timeModal) {
                            this.timeModal.style.display = 'none';
                            this.timeModal.outerHTML = '';
                            this.timeModal = null;
                        }
                        this.setTimeActiveDescendant();
                    }
                }
            }
        };
        DateTimePicker.prototype.closePopup = function (e) {
            if (this.isTimePopupOpen() && this.popupObject) {
                var animModel = {
                    name: 'FadeOut',
                    duration: ANIMATIONDURATION,
                    delay: 0
                };
                this.popupObject.hide(new ej2_base_2.Animation(animModel));
                this.inputWrapper.container.classList.remove(ICONANIMATION);
                ej2_base_3.attributes(this.inputElement, { 'aria-expanded': 'false' });
                ej2_base_1.EventHandler.remove(document, 'mousedown touchstart', this.documentClickHandler);
            }
            if (ej2_base_1.Browser.isDevice) {
                ej2_base_3.removeClass([this.inputWrapper.container], INPUTFOCUS);
            }
        };
        DateTimePicker.prototype.preRender = function () {
            _super.prototype.preRender.call(this);
        };
        ;
        DateTimePicker.prototype.getProperty = function (date, val) {
            if (val === 'min') {
                this.setProperties({ min: this.validateValue(date.min) }, true);
            }
            else {
                this.setProperties({ max: this.validateValue(date.max) }, true);
            }
        };
        DateTimePicker.prototype.checkAttributes = function () {
            var attributes = ['style', 'name', 'step', 'disabled', 'readonly', 'value', 'min', 'max', 'placeholder', 'type'];
            var value;
            for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
                var prop = attributes_1[_i];
                if (!ej2_base_4.isNullOrUndefined(this.inputElement.getAttribute(prop))) {
                    switch (prop) {
                        case 'name':
                            this.inputElement.setAttribute('name', this.inputElement.getAttribute(prop));
                            break;
                        case 'step':
                            this.step = parseInt(this.inputElement.getAttribute(prop), 10);
                            break;
                        case 'readonly':
                            var readonly = !ej2_base_4.isNullOrUndefined(this.inputElement.getAttribute(prop));
                            this.setProperties({ readonly: readonly }, true);
                            break;
                        case 'placeholder':
                            this.placeholder = this.inputElement.getAttribute(prop);
                            break;
                        case 'min':
                            value = new Date(this.inputElement.getAttribute(prop));
                            if (!this.isNullOrEmpty(value) && !isNaN(+value)) {
                                this.setProperties({ min: value }, true);
                            }
                            break;
                        case 'disabled':
                            var enabled = ej2_base_4.isNullOrUndefined(this.inputElement.getAttribute(prop));
                            this.setProperties({ enabled: enabled }, true);
                            break;
                        case 'max':
                            value = new Date(this.inputElement.getAttribute(prop));
                            if (!this.isNullOrEmpty(value) && !isNaN(+value)) {
                                this.setProperties({ max: value }, true);
                            }
                            break;
                    }
                }
            }
        };
        DateTimePicker.prototype.getTimeActiveElement = function () {
            if (!ej2_base_4.isNullOrUndefined(this.dateTimeWrapper)) {
                return this.dateTimeWrapper.querySelectorAll('.' + ACTIVE);
            }
            else {
                return null;
            }
        };
        DateTimePicker.prototype.createDateObj = function (val) {
            return val instanceof Date ? val : null;
        };
        DateTimePicker.prototype.getDateObject = function (text) {
            if (!this.isNullOrEmpty(text)) {
                var dateValue = this.createDateObj(text);
                var value = this.valueWithMinutes;
                var status_1 = !ej2_base_4.isNullOrUndefined(value);
                if (this.checkDateValue(dateValue)) {
                    var date = status_1 ? value.getDate() : DAY;
                    var month = status_1 ? value.getMonth() : MONTH;
                    var year = status_1 ? value.getFullYear() : YEAR;
                    var hour = status_1 ? value.getHours() : HOUR;
                    var minute = status_1 ? value.getMinutes() : MINUTE;
                    var second = status_1 ? value.getSeconds() : SECOND;
                    var millisecond = status_1 ? value.getMilliseconds() : MILLISECOND;
                    return new Date(year, month, date, hour, minute, second, millisecond);
                }
            }
            return null;
        };
        DateTimePicker.prototype.findNextTimeElement = function (event) {
            var textVal = (this.inputElement).value;
            var value = ej2_base_4.isNullOrUndefined(this.valueWithMinutes) ? this.createDateObj(textVal) :
                this.getDateObject(this.valueWithMinutes);
            var dateTimeVal = null;
            var listCount = this.liCollections.length;
            if (!ej2_base_4.isNullOrUndefined(this.checkDateValue(value)) || !ej2_base_4.isNullOrUndefined(this.activeIndex)) {
                if (event.action === 'home') {
                    dateTimeVal = +(this.createDateObj(new Date(this.timeCollections[0])));
                    this.activeIndex = 0;
                }
                else if (event.action === 'end') {
                    dateTimeVal = +(this.createDateObj(new Date(this.timeCollections[this.timeCollections.length - 1])));
                    this.activeIndex = this.timeCollections.length - 1;
                }
                else {
                    if (event.action === 'down') {
                        for (var i = 0; i < listCount; i++) {
                            if (+value < this.timeCollections[i]) {
                                dateTimeVal = +(this.createDateObj(new Date(this.timeCollections[i])));
                                this.activeIndex = i;
                                break;
                            }
                        }
                    }
                    else {
                        for (var i = listCount - 1; i >= 0; i--) {
                            if (+value > this.timeCollections[i]) {
                                dateTimeVal = +(this.createDateObj(new Date(this.timeCollections[i])));
                                this.activeIndex = i;
                                break;
                            }
                        }
                    }
                }
                this.selectedElement = this.liCollections[this.activeIndex];
                this.timeElementValue(ej2_base_4.isNullOrUndefined(dateTimeVal) ? null : new Date(dateTimeVal));
            }
        };
        DateTimePicker.prototype.setTimeValue = function (date, value) {
            var time;
            var val = this.validateMinMaxRange(value);
            var newval = this.createDateObj(val);
            if (this.getFormattedValue(newval) !== (!ej2_base_4.isNullOrUndefined(this.value) ? this.getFormattedValue(this.value) : null)) {
                this.valueWithMinutes = ej2_base_4.isNullOrUndefined(newval) ? null : newval;
                time = new Date(+this.valueWithMinutes);
            }
            else {
                if (this.strictMode) {
                    date = newval;
                }
                this.valueWithMinutes = this.checkDateValue(date);
                time = new Date(+this.valueWithMinutes);
            }
            var dateString = this.globalize.formatDate(time, {
                format: !ej2_base_4.isNullOrUndefined(this.format) ? this.format : this.cldrDateTimeFormat(), type: 'dateTime', skeleton: 'yMd'
            });
            if (!this.strictMode && ej2_base_4.isNullOrUndefined(time)) {
                ej2_inputs_1.Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton);
            }
            else {
                ej2_inputs_1.Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton);
            }
            return time;
        };
        DateTimePicker.prototype.timeElementValue = function (value) {
            if (!ej2_base_4.isNullOrUndefined(this.checkDateValue(value)) && !this.isNullOrEmpty(value)) {
                var date = value instanceof Date ? value : this.getDateObject(value);
                return this.setTimeValue(date, value);
            }
            return null;
        };
        DateTimePicker.prototype.timeKeyHandler = function (event) {
            if (ej2_base_4.isNullOrUndefined(this.step) || this.step <= 0) {
                return;
            }
            var listCount = this.timeCollections.length;
            if (ej2_base_4.isNullOrUndefined(this.getTimeActiveElement()) || this.getTimeActiveElement().length === 0) {
                if (this.liCollections.length > 0) {
                    if (ej2_base_4.isNullOrUndefined(this.value) && ej2_base_4.isNullOrUndefined(this.activeIndex)) {
                        this.activeIndex = 0;
                        this.selectedElement = this.liCollections[0];
                        this.timeElementValue(new Date(this.timeCollections[0]));
                    }
                    else {
                        this.findNextTimeElement(event);
                    }
                }
            }
            else {
                var nextItemValue = void 0;
                if ((event.keyCode >= 37) && (event.keyCode <= 40)) {
                    var index = (event.keyCode === 40 || event.keyCode === 39) ? ++this.activeIndex : --this.activeIndex;
                    this.activeIndex = index = this.activeIndex === (listCount) ? 0 : this.activeIndex;
                    this.activeIndex = index = this.activeIndex < 0 ? (listCount - 1) : this.activeIndex;
                    nextItemValue = ej2_base_4.isNullOrUndefined(this.timeCollections[index]) ? this.timeCollections[0] : this.timeCollections[index];
                }
                else if (event.action === 'home') {
                    this.activeIndex = 0;
                    nextItemValue = this.timeCollections[0];
                }
                else if (event.action === 'end') {
                    this.activeIndex = listCount - 1;
                    nextItemValue = this.timeCollections[listCount - 1];
                }
                this.selectedElement = this.liCollections[this.activeIndex];
                this.timeElementValue(new Date(nextItemValue));
            }
            this.isNavigate = true;
            this.setTimeHover(this.selectedElement, NAVIGATION);
            this.setTimeActiveDescendant();
            if (this.isTimePopupOpen() && this.selectedElement !== null && (!event || event.type !== 'click')) {
                this.setTimeScrollPosition();
            }
        };
        DateTimePicker.prototype.TimeKeyActionHandle = function (event) {
            if (this.enabled) {
                if (event.action !== 'right' && event.action !== 'left' && event.action !== 'tab') {
                    event.preventDefault();
                }
                switch (event.action) {
                    case 'up':
                    case 'down':
                    case 'home':
                    case 'end':
                        this.timeKeyHandler(event);
                        break;
                    case 'enter':
                        if (this.isNavigate) {
                            this.selectedElement = this.liCollections[this.activeIndex];
                            this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
                            this.setInputValue('time');
                            if (+this.previousDateTime !== +this.value) {
                                this.changedArgs.value = this.value;
                                this.addTimeSelection();
                                this.previousDateTime = this.value;
                            }
                        }
                        else {
                            this.updateValue(event);
                        }
                        this.hide(event);
                        ej2_base_3.addClass([this.inputWrapper.container], INPUTFOCUS);
                        this.isNavigate = false;
                        break;
                    case 'escape':
                        this.hide(event);
                        break;
                    default:
                        this.isNavigate = false;
                        break;
                }
            }
        };
        DateTimePicker.prototype.inputKeyAction = function (event) {
            switch (event.action) {
                case 'altDownArrow':
                    this.strictModeUpdate();
                    this.updateInput();
                    this.toggle(event);
                    break;
            }
        };
        DateTimePicker.prototype.onPropertyChanged = function (newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                    case 'value':
                        var options = { format: this.cldrDateTimeFormat(), type: 'dateTime', skeleton: 'yMd' };
                        if (typeof newProp.value === 'string') {
                            this.setProperties({ value: this.globalize.parseDate(newProp.value, options) }, true);
                            newProp.value = this.globalize.parseDate(newProp.value, options);
                        }
                        newProp.value = this.validateValue(newProp.value);
                        ej2_inputs_1.Input.setValue(this.getFormattedValue(newProp.value), this.inputElement, this.floatLabelType, this.showClearButton);
                        this.valueWithMinutes = newProp.value;
                        this.setProperties({ value: newProp.value }, true);
                        this.previousDateTime = new Date(this.inputElement.value);
                        this.updateInput();
                        this.changeTrigger(null);
                        break;
                    case 'min':
                    case 'max':
                        this.getProperty(newProp, prop);
                        this.updateInput();
                        break;
                    case 'enableRtl':
                        ej2_inputs_1.Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
                        break;
                    case 'cssClass':
                        ej2_inputs_1.Input.setCssClass(newProp.cssClass, [this.inputWrapper.container]);
                        if (this.dateTimeWrapper) {
                            ej2_base_3.addClass([this.dateTimeWrapper], [newProp.cssClass]);
                        }
                        break;
                    case 'locale':
                        this.globalize = new ej2_base_1.Internationalization(this.locale);
                        this.l10n.setLocale(this.locale);
                        this.setProperties({ placeholder: this.l10n.getConstant('placeholder') }, true);
                        ej2_inputs_1.Input.setPlaceholder(this.l10n.getConstant('placeholder'), this.inputElement);
                        this.dateTimeFormat = this.cldrDateTimeFormat();
                        _super.prototype.updateInput.call(this);
                        break;
                    case 'format':
                        this.setProperties({ format: newProp.format }, true);
                        this.setValue();
                        break;
                    case 'placeholder':
                        ej2_inputs_1.Input.setPlaceholder(newProp.placeholder, this.inputElement);
                        this.inputElement.setAttribute('aria-placeholder', newProp.placeholder);
                        break;
                    case 'enabled':
                        ej2_inputs_1.Input.setEnabled(this.enabled, this.inputElement);
                        this.bindEvents();
                        break;
                    case 'strictMode':
                        this.updateInput();
                        break;
                    case 'width':
                        this.setWidth(newProp.width);
                        break;
                    case 'readonly':
                        ej2_inputs_1.Input.setReadonly(this.readonly, this.inputElement);
                        break;
                    case 'floatLabelType':
                        this.floatLabelType = newProp.floatLabelType;
                        ej2_inputs_1.Input.removeFloating(this.inputWrapper);
                        ej2_inputs_1.Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
                        break;
                    default:
                        _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
                        break;
                }
                this.hide(null);
            }
        };
        DateTimePicker.prototype.getModuleName = function () {
            return 'datetimepicker';
        };
        __decorate([
            ej2_base_1.Property(null)
        ], DateTimePicker.prototype, "timeFormat", void 0);
        __decorate([
            ej2_base_1.Property(30)
        ], DateTimePicker.prototype, "step", void 0);
        __decorate([
            ej2_base_1.Property(1000)
        ], DateTimePicker.prototype, "zIndex", void 0);
        __decorate([
            ej2_base_1.Property(false)
        ], DateTimePicker.prototype, "enablePersistence", void 0);
        __decorate([
            ej2_base_1.Property(true)
        ], DateTimePicker.prototype, "showClearButton", void 0);
        __decorate([
            ej2_base_1.Property(null)
        ], DateTimePicker.prototype, "placeholder", void 0);
        __decorate([
            ej2_base_1.Property(false)
        ], DateTimePicker.prototype, "strictMode", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateTimePicker.prototype, "open", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateTimePicker.prototype, "close", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateTimePicker.prototype, "blur", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateTimePicker.prototype, "focus", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateTimePicker.prototype, "created", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateTimePicker.prototype, "destroyed", void 0);
        DateTimePicker = __decorate([
            ej2_base_1.NotifyPropertyChanges
        ], DateTimePicker);
        return DateTimePicker;
    }(datepicker_1.DatePicker));
    exports.DateTimePicker = DateTimePicker;
});
