define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-data", "../services/value-formatter", "../base/enum", "../actions/data", "../models/column", "../models/row", "../models/cell", "../base/constant", "../base/util", "../renderer/content-renderer", "../renderer/header-renderer", "../renderer/cell-renderer", "../renderer/header-cell-renderer", "../renderer/stacked-cell-renderer", "../renderer/indent-cell-renderer", "../renderer/caption-cell-renderer", "../renderer/expand-cell-renderer", "../renderer/header-indent-renderer", "../renderer/detail-header-indent-renderer", "../renderer/detail-expand-cell-renderer"], function (require, exports, ej2_base_1, ej2_base_2, ej2_data_1, value_formatter_1, enum_1, data_1, column_1, row_1, cell_1, events, util_1, content_renderer_1, header_renderer_1, cell_renderer_1, header_cell_renderer_1, stacked_cell_renderer_1, indent_cell_renderer_1, caption_cell_renderer_1, expand_cell_renderer_1, header_indent_renderer_1, detail_header_indent_renderer_1, detail_expand_cell_renderer_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Render = (function () {
        function Render(parent, locator) {
            this.emptyGrid = false;
            this.parent = parent;
            this.locator = locator;
            this.data = new data_1.Data(parent, locator);
            this.l10n = locator.getService('localization');
            this.ariaService = this.locator.getService('ariaService');
            this.renderer = this.locator.getService('rendererFactory');
            this.addEventListener();
        }
        Render.prototype.render = function () {
            var gObj = this.parent;
            this.headerRenderer = this.renderer.getRenderer(enum_1.RenderType.Header);
            this.contentRenderer = this.renderer.getRenderer(enum_1.RenderType.Content);
            this.headerRenderer.renderPanel();
            this.contentRenderer.renderPanel();
            if (gObj.getColumns().length) {
                this.isLayoutRendered = true;
                this.headerRenderer.renderTable();
                this.contentRenderer.renderTable();
                this.emptyRow(false);
            }
            this.refreshDataManager();
        };
        Render.prototype.refresh = function (e) {
            if (e === void 0) { e = { requestType: 'refresh' }; }
            this.parent.notify(e.requestType + "-begin", e);
            this.parent.trigger(events.actionBegin, e);
            if (e.cancel) {
                return;
            }
            this.refreshDataManager(e);
        };
        Render.prototype.refreshComplete = function (e) {
            this.parent.trigger(events.actionComplete, e);
        };
        Render.prototype.refreshDataManager = function (args) {
            var _this = this;
            if (args === void 0) { args = {}; }
            if (args.requestType !== 'virtualscroll') {
                this.parent.showSpinner();
            }
            this.parent.isEdit = false;
            this.emptyGrid = false;
            var dataManager;
            var isFActon = this.isNeedForeignAction();
            this.ariaService.setBusy(this.parent.getContent().firstChild, true);
            if (isFActon) {
                var deffered = new ej2_data_1.Deferred();
                dataManager = this.getFData(deffered);
            }
            if (!dataManager) {
                dataManager = this.data.getData(args, this.data.generateQuery().requiresCount())
                    .catch(function (e) { _this.parent.trigger(events.actionFailure, e); return e; });
            }
            else {
                dataManager = dataManager.then(function (e) {
                    var query = _this.data.generateQuery().requiresCount();
                    if (_this.emptyGrid) {
                        var def = new ej2_data_1.Deferred();
                        def.resolve({ result: [], count: 0 });
                        return def.promise;
                    }
                    return _this.data.getData(args, query);
                }).catch(function (e) { _this.parent.trigger(events.actionFailure, e); return e; });
            }
            if (this.parent.getForeignKeyColumns().length && (!isFActon || this.parent.searchSettings.key.length)) {
                var deffered_1 = new ej2_data_1.Deferred();
                dataManager = dataManager.then(function (e) {
                    _this.parent.notify(events.getForeignKeyData, { dataManager: dataManager, result: e, promise: deffered_1 });
                    return deffered_1.promise;
                });
            }
            if (this.parent.groupSettings.disablePageWiseAggregates && this.parent.groupSettings.columns.length) {
                dataManager = dataManager.then(function (e) { return _this.validateGroupRecords(e); });
            }
            dataManager.then(function (e) { return _this.dataManagerSuccess(e, args); })
                .catch(function (e) { return _this.dataManagerFailure(e); });
        };
        Render.prototype.getFData = function (deferred) {
            this.parent.notify(events.getForeignKeyData, { isComplex: true, promise: deferred });
            return deferred.promise;
        };
        Render.prototype.isNeedForeignAction = function () {
            var gObj = this.parent;
            return !!((gObj.allowFiltering && gObj.filterSettings.columns.length) ||
                (gObj.searchSettings.key.length)) && this.foreignKey(this.parent.getForeignKeyColumns());
        };
        Render.prototype.foreignKey = function (columns) {
            var _this = this;
            return columns.some(function (col) {
                var fbool = false;
                fbool = _this.parent.filterSettings.columns.some(function (value) {
                    return col.foreignKeyValue === value.field;
                });
                return !!(fbool || _this.parent.searchSettings.key.length);
            });
        };
        Render.prototype.sendBulkRequest = function (args) {
            var _this = this;
            var promise = this.data.saveChanges(args.changes, this.parent.getPrimaryKeyFieldNames()[0]);
            var query = this.data.generateQuery().requiresCount();
            if (this.data.dataManager.dataSource.offline) {
                this.refreshDataManager({ requestType: 'batchsave' });
                return;
            }
            else {
                promise.then(function (e) {
                    _this.data.getData(args, query)
                        .then(function (e) { return _this.dmSuccess(e, args); })
                        .catch(function (e) { return _this.dmFailure(e); });
                })
                    .catch(function (e) { return _this.dmFailure(e); });
            }
        };
        Render.prototype.dmSuccess = function (e, args) {
            this.dataManagerSuccess(e, args);
        };
        Render.prototype.dmFailure = function (e) {
            this.dataManagerFailure(e);
        };
        Render.prototype.renderEmptyRow = function () {
            this.emptyRow(true);
        };
        Render.prototype.emptyRow = function (isTrigger) {
            var gObj = this.parent;
            var tbody = this.contentRenderer.getTable().querySelector('tbody');
            var tr;
            ej2_base_1.remove(tbody);
            tbody = ej2_base_1.createElement('tbody');
            tr = ej2_base_1.createElement('tr', { className: 'e-emptyrow' });
            tr.appendChild(ej2_base_1.createElement('td', {
                innerHTML: this.l10n.getConstant('EmptyRecord'),
                attrs: { colspan: gObj.getColumns().length.toString() }
            }));
            tbody.appendChild(tr);
            this.contentRenderer.renderEmpty(tbody);
            if (isTrigger) {
                this.parent.trigger(events.dataBound, {});
                this.parent.notify(events.onEmpty, { rows: [new row_1.Row({ isDataRow: true, cells: [new cell_1.Cell({ isDataCell: true, visible: true })] })] });
            }
        };
        Render.prototype.dynamicColumnChange = function () {
            if (this.parent.getCurrentViewRecords().length) {
                this.updateColumnType(this.parent.getCurrentViewRecords()[0]);
            }
        };
        Render.prototype.updateColumnType = function (record) {
            var columns = this.parent.getColumns();
            var value;
            var data = record && record.items ? record.items[0] : record;
            var fmtr = this.locator.getService('valueFormatter');
            for (var i = 0, len = columns.length; i < len; i++) {
                value = ej2_base_2.getValue(columns[i].field || '', data);
                if (columns[i].isForeignColumn() && columns[i].columnData) {
                    value = ej2_base_2.getValue(columns[i].foreignKeyValue || '', columns[i].columnData[0]);
                }
                if (!ej2_base_2.isNullOrUndefined(value)) {
                    this.isColTypeDef = true;
                    if (!columns[i].type) {
                        columns[i].type = value.getDay ? (value.getHours() > 0 || value.getMinutes() > 0 ||
                            value.getSeconds() > 0 || value.getMilliseconds() > 0 ? 'datetime' : 'date') : typeof (value);
                    }
                }
                else {
                    columns[i].type = columns[i].type || null;
                }
                var valueFormatter = new value_formatter_1.ValueFormatter();
                if (columns[i].format && (columns[i].format.skeleton || columns[i].format.format)) {
                    columns[i].setFormatter(valueFormatter.getFormatFunction(columns[i].format));
                    columns[i].setParser(valueFormatter.getParserFunction(columns[i].format));
                }
                if (typeof (columns[i].format) === 'string') {
                    util_1.setFormatter(this.locator, columns[i]);
                }
                else if (!columns[i].format && columns[i].type === 'number') {
                    columns[i].setParser(fmtr.getParserFunction({ format: 'n2' }));
                }
            }
        };
        Render.prototype.dataManagerSuccess = function (e, args) {
            var gObj = this.parent;
            if (e.result.length && !Object.keys(e.result[0]).length) {
                return;
            }
            gObj.trigger(events.beforeDataBound, e);
            var len = Object.keys(e.result).length;
            if (this.parent.isDestroyed) {
                return;
            }
            if ((!gObj.getColumns().length && !len) && !(gObj.columns.length && gObj.columns[0] instanceof column_1.Column)) {
                gObj.hideSpinner();
                return;
            }
            this.parent.notify(events.tooltipDestroy, {});
            gObj.currentViewData = e.result;
            if (!len && e.count && gObj.allowPaging) {
                gObj.pageSettings.totalRecordsCount = e.count;
                gObj.pageSettings.currentPage = Math.ceil(e.count / gObj.pageSettings.pageSize);
                gObj.dataBind();
                return;
            }
            if (!gObj.getColumns().length && len || !this.isLayoutRendered) {
                this.updatesOnInitialRender(e);
            }
            if (!this.isColTypeDef && gObj.getCurrentViewRecords()) {
                this.updateColumnType(gObj.getCurrentViewRecords()[0]);
            }
            this.parent.notify(events.dataReady, ej2_base_2.extend({ count: e.count, result: e.result, aggregates: e.aggregates }, args));
            if (gObj.groupSettings.columns.length || (args && args.requestType === 'ungrouping')) {
                this.headerRenderer.refreshUI();
            }
            if (len) {
                this.contentRenderer.refreshContentRows(args);
            }
            else {
                if (!gObj.getColumns().length) {
                    gObj.element.innerHTML = '';
                    if (gObj.isAlert) {
                        alert(this.l10n.getConstant('EmptyDataSourceError'));
                    }
                    return;
                }
                this.contentRenderer.setRowElements([]);
                this.renderEmptyRow();
                if (args) {
                    var action = (args.requestType || '').toLowerCase() + '-complete';
                    this.parent.notify(action, args);
                }
                this.parent.hideSpinner();
            }
            this.parent.notify(events.toolbarRefresh, {});
        };
        Render.prototype.dataManagerFailure = function (e) {
            this.ariaService.setOptions(this.parent.getContent().firstChild, { busy: false, invalid: true });
            this.parent.trigger(events.actionFailure, { error: e });
            this.parent.currentViewData = [];
            this.renderEmptyRow();
            this.parent.hideSpinner();
        };
        Render.prototype.updatesOnInitialRender = function (e) {
            this.isLayoutRendered = true;
            if (this.parent.columns.length < 1) {
                this.buildColumns(e.result[0]);
            }
            util_1.prepareColumns(this.parent.columns);
            this.headerRenderer.renderTable();
            this.contentRenderer.renderTable();
            this.parent.notify(events.autoCol, {});
        };
        Render.prototype.buildColumns = function (record) {
            var columns = Object.keys(record);
            var cols = [];
            for (var i = 0, len = columns.length; i < len; i++) {
                cols[i] = { 'field': columns[i] };
                if (this.parent.enableColumnVirtualization) {
                    cols[i].width = !ej2_base_2.isNullOrUndefined(cols[i].width) ? cols[i].width : 200;
                }
            }
            this.parent.columns = cols;
        };
        Render.prototype.instantiateRenderer = function () {
            this.renderer.addRenderer(enum_1.RenderType.Header, new header_renderer_1.HeaderRender(this.parent, this.locator));
            this.renderer.addRenderer(enum_1.RenderType.Content, new content_renderer_1.ContentRender(this.parent, this.locator));
            var cellrender = this.locator.getService('cellRendererFactory');
            cellrender.addCellRenderer(enum_1.CellType.Header, new header_cell_renderer_1.HeaderCellRenderer(this.parent, this.locator));
            cellrender.addCellRenderer(enum_1.CellType.Data, new cell_renderer_1.CellRenderer(this.parent, this.locator));
            cellrender.addCellRenderer(enum_1.CellType.StackedHeader, new stacked_cell_renderer_1.StackedHeaderCellRenderer(this.parent, this.locator));
            cellrender.addCellRenderer(enum_1.CellType.Indent, new indent_cell_renderer_1.IndentCellRenderer(this.parent, this.locator));
            cellrender.addCellRenderer(enum_1.CellType.GroupCaption, new caption_cell_renderer_1.GroupCaptionCellRenderer(this.parent, this.locator));
            cellrender.addCellRenderer(enum_1.CellType.GroupCaptionEmpty, new caption_cell_renderer_1.GroupCaptionEmptyCellRenderer(this.parent, this.locator));
            cellrender.addCellRenderer(enum_1.CellType.Expand, new expand_cell_renderer_1.ExpandCellRenderer(this.parent, this.locator));
            cellrender.addCellRenderer(enum_1.CellType.HeaderIndent, new header_indent_renderer_1.HeaderIndentCellRenderer(this.parent, this.locator));
            cellrender.addCellRenderer(enum_1.CellType.StackedHeader, new stacked_cell_renderer_1.StackedHeaderCellRenderer(this.parent, this.locator));
            cellrender.addCellRenderer(enum_1.CellType.DetailHeader, new detail_header_indent_renderer_1.DetailHeaderIndentCellRenderer(this.parent, this.locator));
            cellrender.addCellRenderer(enum_1.CellType.DetailExpand, new detail_expand_cell_renderer_1.DetailExpandCellRenderer(this.parent, this.locator));
        };
        Render.prototype.addEventListener = function () {
            var _this = this;
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.on(events.initialLoad, this.instantiateRenderer, this);
            this.parent.on(events.modelChanged, this.refresh, this);
            this.parent.on(events.refreshComplete, this.refreshComplete, this);
            this.parent.on(events.bulkSave, this.sendBulkRequest, this);
            this.parent.on(events.showEmptyGrid, function () { _this.emptyGrid = true; }, this);
            this.parent.on(events.autoCol, this.dynamicColumnChange, this);
        };
        Render.prototype.validateGroupRecords = function (e) {
            var _this = this;
            var index = e.result.length - 1;
            if (index < 0) {
                return Promise.resolve(e);
            }
            var group0 = e.result[0];
            var groupN = e.result[index];
            var predicate = [];
            var addWhere = function (input) {
                [group0, groupN].forEach(function (group) {
                    return predicate.push(new ej2_data_1.Predicate('field', '==', group.field).and(_this.getPredicate('key', 'equal', group.key)));
                });
                input.where(ej2_data_1.Predicate.or(predicate));
            };
            var query = new ej2_data_1.Query();
            addWhere(query);
            var curDm = new ej2_data_1.DataManager(e.result);
            var curFilter = curDm.executeLocal(query);
            var newQuery = this.data.generateQuery(true);
            var rPredicate = [];
            if (this.data.isRemote()) {
                [group0, groupN].forEach(function (group) {
                    return rPredicate.push(_this.getPredicate(group.field, 'equal', group.key));
                });
                newQuery.where(ej2_data_1.Predicate.or(rPredicate));
            }
            else {
                addWhere(newQuery);
            }
            var deferred = new ej2_data_1.Deferred();
            this.data.getData({}, newQuery).then(function (r) {
                _this.updateGroupInfo(curFilter, r.result);
                deferred.resolve(e);
            }).catch(function (e) { return deferred.reject(e); });
            return deferred.promise;
        };
        Render.prototype.getPredicate = function (key, operator, value) {
            if (value instanceof Date) {
                return util_1.getDatePredicate({ field: key, operator: operator, value: value });
            }
            return new ej2_data_1.Predicate(key, operator, value);
        };
        Render.prototype.updateGroupInfo = function (current, untouched) {
            var _this = this;
            var dm = new ej2_data_1.DataManager(untouched);
            current.forEach(function (element, index, array) {
                var uGroup = dm.executeLocal(new ej2_data_1.Query()
                    .where(new ej2_data_1.Predicate('field', '==', element.field).and(_this.getPredicate('key', 'equal', element.key))))[0];
                element.count = uGroup.count;
                var itemGroup = element.items;
                var uGroupItem = uGroup.items;
                if (itemGroup.GroupGuid) {
                    element.items = _this.updateGroupInfo(element.items, uGroup.items);
                }
                _this.parent.aggregates.forEach(function (row) {
                    return row.columns.forEach(function (column) {
                        var types = column.type instanceof Array ? column.type : [column.type];
                        types.forEach(function (type) {
                            var key = column.field + ' - ' + type;
                            element.aggregates[key] = util_1.calculateAggregate(type, itemGroup.level ? uGroupItem.records : uGroup.items, column);
                        });
                    });
                });
            });
            return current;
        };
        return Render;
    }());
    exports.Render = Render;
});
