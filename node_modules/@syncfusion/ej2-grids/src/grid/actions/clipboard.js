define(["require", "exports", "@syncfusion/ej2-base", "../base/constant"], function (require, exports, ej2_base_1, events) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Clipboard = (function () {
        function Clipboard(parent) {
            this.copyContent = '';
            this.isSelect = false;
            this.parent = parent;
            this.addEventListener();
        }
        Clipboard.prototype.addEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.on(events.contentReady, this.initialEnd, this);
            this.parent.on(events.keyPressed, this.keyDownHandler, this);
        };
        Clipboard.prototype.removeEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.off(events.keyPressed, this.keyDownHandler);
        };
        Clipboard.prototype.initialEnd = function () {
            this.parent.off(events.contentReady, this.initialEnd);
            this.clipBoardTextArea = ej2_base_1.createElement('textarea', {
                className: 'e-clipboard',
                styles: 'opacity: 0',
                attrs: { readonly: 'true', tabindex: '-1', 'aria-label': 'clipboard' }
            });
            this.parent.element.appendChild(this.clipBoardTextArea);
        };
        Clipboard.prototype.keyDownHandler = function (e) {
            if (e.action === 'ctrlPlusC') {
                this.copy();
            }
            else if (e.action === 'ctrlShiftPlusH') {
                this.copy(true);
            }
        };
        Clipboard.prototype.setCopyData = function (withHeader) {
            if (window.getSelection().toString() === '') {
                var isFrozen = this.parent.getFrozenColumns();
                this.clipBoardTextArea.value = this.copyContent = '';
                var mRows = void 0;
                var rows = this.parent.getRows();
                if (isFrozen) {
                    mRows = this.parent.getMovableDataRows();
                }
                if (this.parent.selectionSettings.mode !== 'Cell') {
                    var selectedIndexes = this.parent.getSelectedRowIndexes().sort(function (a, b) { return a - b; });
                    if (withHeader) {
                        var headerTextArray = [];
                        for (var i = 0; i < this.parent.getVisibleColumns().length; i++) {
                            headerTextArray[i] = this.parent.getVisibleColumns()[i].headerText;
                        }
                        this.getCopyData(headerTextArray, false, '\t', withHeader);
                        this.copyContent += '\n';
                    }
                    for (var i = 0; i < selectedIndexes.length; i++) {
                        if (i > 0) {
                            this.copyContent += '\n';
                        }
                        var cells = [].slice.call(rows[selectedIndexes[i]].querySelectorAll('.e-rowcell'));
                        if (isFrozen) {
                            cells.push.apply(cells, [].slice.call(mRows[selectedIndexes[i]].querySelectorAll('.e-rowcell')));
                        }
                        this.getCopyData(cells, false, '\t', withHeader);
                    }
                }
                else {
                    var obj = this.checkBoxSelection();
                    if (obj.status) {
                        if (withHeader) {
                            var headers = [];
                            for (var i = 0; i < obj.colIndexes.length; i++) {
                                headers.push(this.parent.getColumnHeaderByIndex(obj.colIndexes[i]));
                            }
                            this.getCopyData(headers, false, '\t', withHeader);
                            this.copyContent += '\n';
                        }
                        for (var i = 0; i < obj.rowIndexes.length; i++) {
                            if (i > 0) {
                                this.copyContent += '\n';
                            }
                            var cells = [].slice.call(rows[obj.rowIndexes[i]].
                                querySelectorAll('.e-cellselectionbackground'));
                            if (isFrozen) {
                                cells.push.apply(cells, [].slice.call(mRows[obj.rowIndexes[i]].querySelectorAll('.e-cellselectionbackground')));
                            }
                            this.getCopyData(cells, false, '\t', withHeader);
                        }
                    }
                    else {
                        this.getCopyData([].slice.call(this.parent.element.querySelectorAll('.e-cellselectionbackground')), true, '\n', withHeader);
                    }
                }
                var args = {
                    data: this.copyContent,
                    cancel: false,
                };
                this.parent.trigger(events.beforeCopy, args);
                if (args.cancel) {
                    return;
                }
                this.clipBoardTextArea.value = this.copyContent = args.data;
                if (!ej2_base_1.Browser.userAgent.match(/ipad|ipod|iphone/i)) {
                    this.clipBoardTextArea.select();
                }
                else {
                    this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);
                }
                this.isSelect = true;
            }
        };
        Clipboard.prototype.getCopyData = function (cells, isCell, splitKey, withHeader) {
            var isElement = typeof cells[0] !== 'string';
            for (var j = 0; j < cells.length; j++) {
                if (withHeader && isCell) {
                    this.copyContent += this.parent.getColumns()[parseInt(cells[j].getAttribute('aria-colindex'), 10)].headerText + '\n';
                }
                if (isElement) {
                    if (!cells[j].classList.contains('e-hide')) {
                        this.copyContent += cells[j].textContent;
                    }
                }
                else {
                    this.copyContent += cells[j];
                }
                if (j < cells.length - 1) {
                    this.copyContent += splitKey;
                }
            }
        };
        Clipboard.prototype.copy = function (withHeader) {
            if (document.queryCommandSupported('copy')) {
                this.setCopyData(withHeader);
                document.execCommand('copy');
                this.clipBoardTextArea.blur();
            }
            if (this.isSelect) {
                window.getSelection().removeAllRanges();
                this.isSelect = false;
            }
        };
        Clipboard.prototype.getModuleName = function () {
            return 'clipboard';
        };
        Clipboard.prototype.destroy = function () {
            this.removeEventListener();
            ej2_base_1.remove(this.clipBoardTextArea);
        };
        Clipboard.prototype.checkBoxSelection = function () {
            var gridObj = this.parent;
            var obj = { status: false };
            if (gridObj.selectionSettings.mode === 'Cell') {
                var rowCellIndxes = gridObj.getSelectedRowCellIndexes();
                var str = void 0;
                var isBox = void 0;
                var rowIndexes = [];
                var i = void 0;
                for (i = 0; i < rowCellIndxes.length; i++) {
                    if (rowCellIndxes[i].cellIndexes.length) {
                        rowIndexes.push(rowCellIndxes[i].rowIndex);
                    }
                    if (rowCellIndxes[i].cellIndexes.length) {
                        if (!str) {
                            str = JSON.stringify(rowCellIndxes[i].cellIndexes.sort());
                        }
                        if (str !== JSON.stringify(rowCellIndxes[i].cellIndexes.sort())) {
                            break;
                        }
                    }
                }
                rowIndexes.sort();
                if (i === rowCellIndxes.length && rowIndexes[rowIndexes.length - 1] - rowIndexes[0] === rowIndexes.length - 1) {
                    obj = { status: true, rowIndexes: rowIndexes, colIndexes: rowCellIndxes[0].cellIndexes };
                }
            }
            return obj;
        };
        return Clipboard;
    }());
    exports.Clipboard = Clipboard;
});
