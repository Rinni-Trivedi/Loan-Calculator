define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-dropdowns", "@syncfusion/ej2-data", "../base/util", "../base/util"], function (require, exports, ej2_base_1, ej2_base_2, ej2_dropdowns_1, ej2_data_1, util_1, util_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DropDownEditCell = (function () {
        function DropDownEditCell(parent) {
            this.parent = parent;
        }
        DropDownEditCell.prototype.create = function (args) {
            var splits = !ej2_base_1.isNullOrUndefined(args.column.field) && args.column.field.split('.');
            var isComplexField = !ej2_base_1.isNullOrUndefined(args.column.field) && args.column.field.split('.').length > 1;
            return ej2_base_2.createElement('input', {
                className: 'e-field', attrs: {
                    id: isComplexField ? this.parent.element.id + splits[0] + splits[1] : this.parent.element.id + args.column.field,
                    name: isComplexField ? splits[0] + splits[1] : args.column.field, type: 'text', 'e-mappinguid': args.column.uid,
                }
            });
        };
        DropDownEditCell.prototype.write = function (args) {
            this.column = args.column;
            var isInline = this.parent.editSettings.mode !== 'Dialog';
            var isComplexField = !ej2_base_1.isNullOrUndefined(args.column.field) && args.column.field.split('.').length > 1;
            var splits = !ej2_base_1.isNullOrUndefined(args.column.field) && args.column.field.split('.');
            this.obj = new ej2_dropdowns_1.DropDownList(ej2_base_1.extend({
                dataSource: this.parent.dataSource instanceof ej2_data_1.DataManager ?
                    this.parent.dataSource : new ej2_data_1.DataManager(this.parent.dataSource),
                query: new ej2_data_1.Query().select(args.column.field), enabled: util_1.isEditable(args.column, args.requestType, args.element),
                fields: { value: args.column.field },
                value: isComplexField ? args.rowData[splits[0]][splits[1]] : args.rowData[args.column.field],
                enableRtl: this.parent.enableRtl, actionComplete: this.ddActionComplete.bind(this),
                placeholder: isInline ? '' : args.column.headerText, popupHeight: '200px',
                floatLabelType: isInline ? 'Never' : 'Always', open: this.dropDownOpen.bind(this),
                sortOrder: 'Ascending'
            }, args.column.edit.params));
            this.obj.appendTo(args.element);
            args.element.setAttribute('name', isComplexField ? splits[0] + splits[1] : args.column.field);
        };
        DropDownEditCell.prototype.read = function (element) {
            return element.ej2_instances[0].value;
        };
        DropDownEditCell.prototype.ddActionComplete = function (e) {
            e.result = ej2_data_1.DataUtil.distinct(e.result, this.column.isForeignColumn() ? this.column.foreignKeyField : this.column.field, true);
            if (this.column.dataSource) {
                this.column.dataSource.dataSource.json = e.result;
            }
        };
        DropDownEditCell.prototype.dropDownOpen = function (args) {
            var dlgElement = util_2.parentsUntil(this.obj.element, 'e-dialog');
            if (!ej2_base_1.isNullOrUndefined(dlgElement)) {
                var dlgObj = this.parent.element.querySelector('#' + dlgElement.id).ej2_instances[0];
                args.popup.element.style.zIndex = (dlgObj.zIndex + 1).toString();
            }
        };
        DropDownEditCell.prototype.destroy = function () {
            if (this.obj) {
                this.obj.destroy();
            }
        };
        return DropDownEditCell;
    }());
    exports.DropDownEditCell = DropDownEditCell;
});
