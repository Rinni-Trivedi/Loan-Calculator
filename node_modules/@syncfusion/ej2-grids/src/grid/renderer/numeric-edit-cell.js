define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-inputs", "../base/util"], function (require, exports, ej2_base_1, ej2_base_2, ej2_inputs_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var NumericEditCell = (function () {
        function NumericEditCell(parent) {
            this.parent = parent;
        }
        NumericEditCell.prototype.create = function (args) {
            var isComplexField = !ej2_base_2.isNullOrUndefined(args.column.field) && args.column.field.split('.').length > 1;
            var splits = !ej2_base_2.isNullOrUndefined(args.column.field) && args.column.field.split('.');
            return ej2_base_2.createElement('input', {
                className: 'e-field', attrs: {
                    id: isComplexField ? this.parent.element.id + splits[0] + splits[1] : this.parent.element.id + args.column.field,
                    name: isComplexField ? splits[0] + splits[1] : args.column.field, 'e-mappinguid': args.column.uid
                }
            });
        };
        NumericEditCell.prototype.read = function (element) {
            element.blur();
            return element.ej2_instances[0].value;
        };
        NumericEditCell.prototype.write = function (args) {
            var col = args.column;
            var isInline = this.parent.editSettings.mode !== 'Dialog';
            var isComplexField = !ej2_base_2.isNullOrUndefined(args.column.field) && args.column.field.split('.').length > 1;
            var splits = !ej2_base_2.isNullOrUndefined(args.column.field) && args.column.field.split('.');
            this.obj = new ej2_inputs_1.NumericTextBox(ej2_base_1.extend({
                value: isComplexField ? parseFloat(args.rowData[splits[0]][splits[1]]) : parseFloat(args.rowData[col.field]),
                enableRtl: this.parent.enableRtl,
                placeholder: isInline ? '' : args.column.headerText,
                enabled: util_1.isEditable(args.column, args.requestType, args.element),
                floatLabelType: this.parent.editSettings.mode !== 'Dialog' ? 'Never' : 'Always',
            }, col.edit.params));
            this.obj.appendTo(args.element);
            args.element.setAttribute('name', isComplexField ? splits[0] + splits[1] : args.column.field);
        };
        NumericEditCell.prototype.destroy = function () {
            if (this.obj && !this.obj.isDestroyed) {
                this.obj.destroy();
            }
        };
        return NumericEditCell;
    }());
    exports.NumericEditCell = NumericEditCell;
});
