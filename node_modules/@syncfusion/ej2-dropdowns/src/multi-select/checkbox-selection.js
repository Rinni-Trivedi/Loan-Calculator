define(["require", "exports", "@syncfusion/ej2-buttons", "@syncfusion/ej2-inputs", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "../drop-down-base/drop-down-base"], function (require, exports, ej2_buttons_1, ej2_inputs_1, ej2_base_1, ej2_base_2, drop_down_base_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ICON = 'e-icons';
    var CHECKBOXFRAME = 'e-frame';
    var CHECK = 'e-check';
    var CHECKBOXWRAP = 'e-checkbox-wrapper';
    var CHECKBOXRIPPLE = 'e-ripple-container';
    var INDETERMINATE = 'e-stop';
    var checkAllParent = 'e-selectall-parent';
    var searchBackIcon = 'e-input-group-icon e-back-icon e-icons';
    var filterBarClearIcon = 'e-input-group-icon e-clear-icon e-icons';
    var filterInput = 'e-input-filter';
    var filterParent = 'e-filter-parent';
    var mobileFilter = 'e-ddl-device-filter';
    var clearIcon = 'e-clear-icon';
    var popupFullScreen = 'e-popup-full-page';
    var device = 'e-ddl-device';
    var FOCUS = 'e-input-focus';
    var CheckBoxSelection = (function () {
        function CheckBoxSelection(parent) {
            this.activeLi = [];
            this.activeEle = [];
            this.parent = parent;
            this.addEventListener();
        }
        CheckBoxSelection.prototype.getModuleName = function () {
            return 'CheckBoxSelection';
        };
        CheckBoxSelection.prototype.addEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.on('updatelist', this.listSelection, this);
            this.parent.on('listoption', this.listOption, this);
            this.parent.on('selectAll', this.setSelectAll, this);
            this.parent.on('checkSelectAll', this.checkSelectAll, this);
            this.parent.on('searchBox', this.setSearchBox, this);
            this.parent.on('blur', this.onBlur, this);
            this.parent.on('targetElement', this.targetElement, this);
            this.parent.on('deviceSearchBox', this.setDeviceSearchBox, this);
            this.parent.on('inputFocus', this.getFocus, this);
            this.parent.on('reOrder', this.setReorder, this);
            this.parent.on('activeList', this.getActiveList, this);
            ej2_base_1.EventHandler.add(document, 'mousedown', this.onDocumentClick, this);
        };
        CheckBoxSelection.prototype.removeEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.off('updatelist', this.listSelection);
            this.parent.off('listoption', this.listOption);
            this.parent.off('selectAll', this.setSelectAll);
            this.parent.off('checkSelectAll', this.checkSelectAll);
            this.parent.off('searchBox', this.setSearchBox);
            this.parent.off('blur', this.onBlur);
            this.parent.off('targetElement', this.targetElement);
            this.parent.off('deviceSearchBox', this.setDeviceSearchBox);
            this.parent.off('inputFocus', this.getFocus);
            this.parent.off('reOrder', this.setReorder);
            this.parent.off('activeList', this.getActiveList);
            ej2_base_1.EventHandler.remove(document, 'mousedown', this.onDocumentClick);
        };
        CheckBoxSelection.prototype.listOption = function (args) {
            var _this = this;
            if (ej2_base_2.isNullOrUndefined(this.parent.listCurrentOptions.itemCreated)) {
                this.parent.listCurrentOptions.itemCreated = function (e) {
                    _this.checboxCreate(e);
                };
            }
            else {
                var itemCreated_1 = this.parent.listCurrentOptions.itemCreated;
                this.parent.listCurrentOptions.itemCreated = function (e) {
                    _this.checboxCreate(e);
                    itemCreated_1.apply(_this, [e]);
                };
            }
        };
        ;
        CheckBoxSelection.prototype.checboxCreate = function (e) {
            var item;
            if (!ej2_base_2.isNullOrUndefined(e.item)) {
                item = e.item;
            }
            else {
                item = e;
            }
            if (item.className !== 'e-list-group-item ' && item.className !== 'e-list-group-item') {
                var checkboxEle = ej2_buttons_1.createCheckBox(true);
                var icon = ej2_base_1.select('div.' + ICON, item);
                var id = item.getAttribute('data-uid');
                item.insertBefore(checkboxEle, item.childNodes[ej2_base_2.isNullOrUndefined(icon) ? 0 : 1]);
                ej2_base_1.select('.' + CHECKBOXFRAME, checkboxEle);
                var frame = ej2_base_1.select('.' + CHECKBOXFRAME, checkboxEle);
                return item;
            }
            else {
                return item;
            }
        };
        CheckBoxSelection.prototype.setSelectAll = function () {
            if (this.parent.showSelectAll) {
                if (ej2_base_2.isNullOrUndefined(this.checkAllParent)) {
                    this.checkAllParent = ej2_base_2.createElement('div', {
                        className: checkAllParent
                    });
                    this.selectAllSpan = ej2_base_2.createElement('span', {
                        className: 'e-all-text'
                    });
                    this.selectAllSpan.textContent = '';
                    this.checkAllParent.appendChild(this.selectAllSpan);
                    this.setLocale();
                    this.checboxCreate(this.checkAllParent);
                    if (this.parent.headerTemplate) {
                        if (!ej2_base_2.isNullOrUndefined(this.filterParent)) {
                            ej2_base_2.append([this.checkAllParent], this.filterParent);
                        }
                        else {
                            ej2_base_2.append([this.checkAllParent], this.parent.popupWrapper);
                        }
                    }
                    if (!this.parent.headerTemplate) {
                        if (!ej2_base_2.isNullOrUndefined(this.filterParent)) {
                            ej2_base_2.append([this.checkAllParent], this.filterParent);
                        }
                        else {
                            ej2_base_2.prepend([this.checkAllParent], this.parent.popupWrapper);
                        }
                    }
                    ej2_base_1.EventHandler.add(this.checkAllParent, 'mousedown', this.clickHandler, this);
                }
                if (this.parent.list.classList.contains('e-nodata')) {
                    this.checkAllParent.style.display = 'none';
                }
                else {
                    this.checkAllParent.style.display = 'block';
                }
                this.parent.selectAllHeight = this.checkAllParent.getBoundingClientRect().height;
            }
            else if (!ej2_base_2.isNullOrUndefined(this.checkAllParent)) {
                this.checkAllParent.parentElement.removeChild(this.checkAllParent);
                this.checkAllParent = null;
            }
        };
        CheckBoxSelection.prototype.destroy = function () {
            this.removeEventListener();
        };
        CheckBoxSelection.prototype.listSelection = function (args) {
            var target;
            if (!ej2_base_2.isNullOrUndefined(args.e)) {
                target = !ej2_base_2.isNullOrUndefined(args.e.target) ?
                    args.e.target.classList.contains('e-frame') ?
                        args.e.target : args.li.querySelector('.e-checkbox-wrapper').childNodes[1]
                    : args.li.querySelector('.e-checkbox-wrapper').childNodes[1];
            }
            else {
                target = args.li.lastElementChild.childNodes[1];
            }
            if (this.parent.itemTemplate) {
                target = args.li.firstElementChild.childNodes[1];
            }
            this.checkWrapper = ej2_base_2.closest(target, '.' + CHECKBOXWRAP);
            if (!ej2_base_2.isNullOrUndefined(this.checkWrapper)) {
                var checkElement = ej2_base_1.select('.' + CHECKBOXFRAME, this.checkWrapper);
                var selectAll = false;
                this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK), args.li, args.e, selectAll);
            }
        };
        CheckBoxSelection.prototype.validateCheckNode = function (checkWrap, isCheck, li, e, selectAll) {
            this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true, selectAll);
        };
        CheckBoxSelection.prototype.clickHandler = function (e) {
            var target;
            if (e.currentTarget.classList.contains(this.checkAllParent.className)) {
                target = e.currentTarget.firstElementChild.lastElementChild;
            }
            else {
                target = e.currentTarget;
            }
            this.checkWrapper = ej2_base_2.closest(target, '.' + CHECKBOXWRAP);
            var selectAll = true;
            if (!ej2_base_2.isNullOrUndefined(this.checkWrapper)) {
                var checkElement = ej2_base_1.select('.' + CHECKBOXFRAME, this.checkWrapper);
                this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK), null, e, selectAll);
            }
            e.preventDefault();
        };
        CheckBoxSelection.prototype.changeState = function (wrapper, state, e, isPrevent, selectAll) {
            var ariaState;
            var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];
            if (state === 'check' && !frameSpan.classList.contains(CHECK)) {
                frameSpan.classList.remove(INDETERMINATE);
                frameSpan.classList.add(CHECK);
                ariaState = 'true';
                if (selectAll) {
                    this.parent.selectAll(true);
                    this.setLocale(true);
                }
            }
            else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {
                ej2_base_1.removeClass([frameSpan], [CHECK, INDETERMINATE]);
                ariaState = 'false';
                if (selectAll) {
                    this.parent.selectAll(false);
                    this.setLocale();
                }
            }
            ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;
            if (!ej2_base_2.isNullOrUndefined(ariaState)) {
                wrapper.setAttribute('aria-checked', ariaState);
            }
        };
        CheckBoxSelection.prototype.setSearchBox = function (args) {
            if (ej2_base_2.isNullOrUndefined(this.filterParent)) {
                this.filterParent = ej2_base_2.createElement('span', {
                    className: filterParent
                });
                this.filterInput = ej2_base_2.createElement('input', {
                    attrs: { type: 'text' },
                    className: filterInput
                });
                this.parent.element.parentNode.insertBefore(this.filterInput, this.parent.element);
                var backIcon = false;
                if (ej2_base_2.Browser.isDevice) {
                    backIcon = true;
                    this.parent.mobFilter = false;
                }
                this.filterInputObj = ej2_inputs_1.Input.createInput({
                    element: this.filterInput,
                    buttons: backIcon ? [searchBackIcon, filterBarClearIcon] : [filterBarClearIcon],
                    properties: { placeholder: this.parent.filterBarPlaceholder }
                });
                ej2_base_2.append([this.filterInputObj.container], this.filterParent);
                ej2_base_2.prepend([this.filterParent], args.popupElement);
                ej2_base_2.attributes(this.filterInput, {
                    'aria-disabled': 'false',
                    'aria-owns': this.parent.element.id + '_options',
                    'role': 'listbox',
                    'aria-activedescendant': null,
                    'autocomplete': 'off',
                    'autocorrect': 'off',
                    'autocapitalize': 'off',
                    'spellcheck': 'false'
                });
                this.clearIconElement = this.filterInput.parentElement.querySelector('.' + clearIcon);
                if (!ej2_base_2.Browser.isDevice && this.clearIconElement) {
                    ej2_base_1.EventHandler.add(this.clearIconElement, 'mousedown', this.clearText, this);
                    this.clearIconElement.style.visibility = 'hidden';
                }
                ej2_base_1.EventHandler.add(this.filterInput, 'input', this.parent.onInput, this.parent);
                ej2_base_1.EventHandler.add(this.filterInput, 'keyup', this.parent.KeyUp, this.parent);
                ej2_base_1.EventHandler.add(this.filterInput, 'keydown', this.parent.onKeyDown, this.parent);
                ej2_base_1.EventHandler.add(this.filterInput, 'blur', this.onBlur, this);
                this.parent.searchBoxHeight = (this.filterInputObj.container.parentElement).getBoundingClientRect().height;
                return this.filterInputObj;
            }
        };
        ;
        CheckBoxSelection.prototype.clickOnBackIcon = function (e) {
            this.parent.hidePopup();
            ej2_base_1.removeClass([document.body, this.parent.popupObj.element], popupFullScreen);
        };
        CheckBoxSelection.prototype.clearText = function (e) {
            this.parent.targetInputElement.value = '';
            this.parent.refreshPopup();
            this.parent.refreshListItems(null);
            this.clearIconElement.style.visibility = 'hidden';
            this.filterInput.focus();
            this.setReorder(e);
            e.preventDefault();
        };
        CheckBoxSelection.prototype.setDeviceSearchBox = function () {
            this.parent.popupObj.element.classList.add(device);
            this.parent.popupObj.element.classList.add(mobileFilter);
            this.parent.popupObj.position = { X: 0, Y: 0 };
            this.parent.popupObj.dataBind();
            ej2_base_2.attributes(this.parent.popupObj.element, { style: 'left:0px;right:0px;top:0px;bottom:0px;' });
            ej2_base_1.addClass([document.body, this.parent.popupObj.element], popupFullScreen);
            this.setSearchBoxPosition();
            this.backIconElement = this.filterInputObj.container.querySelector('.e-back-icon');
            this.clearIconElement = this.filterInputObj.container.querySelector('.' + clearIcon);
            this.clearIconElement.style.visibility = 'hidden';
            ej2_base_1.EventHandler.add(this.backIconElement, 'click', this.clickOnBackIcon, this);
            ej2_base_1.EventHandler.add(this.clearIconElement, 'click', this.clearText, this);
        };
        CheckBoxSelection.prototype.setSearchBoxPosition = function () {
            var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;
            this.parent.popupObj.element.style.maxHeight = '100%';
            this.parent.popupObj.element.style.width = '100%';
            this.parent.list.style.maxHeight = (window.innerHeight - searchBoxHeight) + 'px';
            this.parent.list.style.height = (window.innerHeight - searchBoxHeight) + 'px';
            var clearElement = this.filterInput.parentElement.querySelector('.' + clearIcon);
            ej2_base_1.detach(this.filterInput);
            clearElement.parentElement.insertBefore(this.filterInput, clearElement);
        };
        CheckBoxSelection.prototype.targetElement = function () {
            this.parent.targetInputElement = this.filterInput;
            this.clearIconElement.style.visibility = this.parent.targetInputElement.value === '' ? 'hidden' : 'visible';
            return this.parent.targetInputElement.value;
        };
        CheckBoxSelection.prototype.onBlur = function (e) {
            var target;
            if (ej2_base_2.Browser.isIE) {
                target = !ej2_base_2.isNullOrUndefined(e) && e.target;
            }
            if (!ej2_base_2.Browser.isIE) {
                target = !ej2_base_2.isNullOrUndefined(e) && e.relatedTarget;
            }
            if (document.body.contains(this.parent.popupObj.element) && this.parent.popupObj.element.contains(target) && !ej2_base_2.Browser.isIE) {
                this.filterInput.focus();
                return;
            }
            if (this.parent.scrollFocusStatus) {
                e.preventDefault();
                this.filterInput.focus();
                this.parent.scrollFocusStatus = false;
                return;
            }
            if (document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains('e-popup-close')) {
                this.parent.inputFocus = false;
                this.parent.updateValueState(e, this.parent.value, this.parent.tempValues);
                this.parent.dispatchEvent(this.parent.hiddenElement, 'change');
            }
            if (document.body.contains(this.parent.popupObj.element) &&
                !this.parent.popupObj.element.classList.contains('e-popup-close')) {
                this.parent.inputFocus = false;
                this.parent.overAllWrapper.classList.remove(FOCUS);
                this.parent.trigger('blur');
                this.parent.focused = true;
            }
            if (document.body.contains(this.parent.popupObj.element) &&
                !this.parent.popupObj.element.classList.contains('e-popup-close') && !ej2_base_2.Browser.isDevice) {
                this.parent.hidePopup();
            }
        };
        CheckBoxSelection.prototype.onDocumentClick = function (e) {
            var target = e.target;
            if (!(!ej2_base_2.isNullOrUndefined(this.parent.popupObj) && ej2_base_2.closest(target, '#' + this.parent.popupObj.element.id)) &&
                !this.parent.overAllWrapper.contains(e.target)) {
                if (this.parent.overAllWrapper.classList.contains(drop_down_base_1.dropDownBaseClasses.focus) || this.parent.isPopupOpen()) {
                    this.parent.inputFocus = false;
                    this.parent.hidePopup();
                    this.parent.onBlur();
                    this.parent.focused = true;
                }
            }
        };
        CheckBoxSelection.prototype.getFocus = function (e) {
            this.parent.overAllWrapper.classList.remove(FOCUS);
            if (e.value === 'focus') {
                this.filterInput.focus();
            }
            if (e.value === 'clear') {
                this.filterInput.value = '';
                this.clearIconElement.style.visibility = 'hidden';
            }
        };
        CheckBoxSelection.prototype.checkSelectAll = function (e) {
            if (e.value === 'check' && this.checkAllParent.getAttribute('aria-checked') !== 'true') {
                this.changeState(this.checkAllParent, e.value, null, null, false);
                this.setLocale(true);
            }
            if (e.value === 'uncheck') {
                this.changeState(this.checkAllParent, e.value, null, null, false);
                this.setLocale();
            }
        };
        CheckBoxSelection.prototype.setLocale = function (unSelect) {
            if (this.parent.selectAllText !== 'Select All' || this.parent.unSelectAllText !== 'Unselect All') {
                var template = unSelect ? this.parent.unSelectAllText : this.parent.selectAllText;
                var compiledString = void 0;
                this.selectAllSpan.textContent = '';
                compiledString = ej2_base_1.compile(template);
                for (var _i = 0, _a = compiledString({}); _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.selectAllSpan.textContent = item.textContent;
                }
            }
            else {
                var l10nLocale = { selectAllText: 'Select All', unSelectAllText: 'Unselect All' };
                var l10n = new ej2_base_1.L10n('dropdowns', l10nLocale, this.parent.locale);
                this.selectAllSpan.textContent = unSelect ? l10n.getConstant('unSelectAllText') : l10n.getConstant('selectAllText');
            }
        };
        CheckBoxSelection.prototype.getActiveList = function (args) {
            if (args.li.classList.contains('e-active')) {
                this.activeLi.push(args.li.cloneNode(true));
            }
            else {
                this.activeLi.splice(args.index, 1);
            }
        };
        CheckBoxSelection.prototype.setReorder = function (args) {
            if (this.parent.enableSelectionOrder && !ej2_base_2.isNullOrUndefined(this.parent.value)) {
                var activeLiCount = this.parent.ulElement.querySelectorAll('li.e-active').length;
                var remLi = void 0;
                var ulEle = ej2_base_2.createElement('ul', {
                    className: 'e-list-parent e-ul e-reorder'
                });
                var removeEle = ej2_base_2.createElement('div');
                if (activeLiCount > 0) {
                    ej2_base_2.append(this.parent.ulElement.querySelectorAll('li.e-active'), ulEle);
                    remLi = this.parent.ulElement.querySelectorAll('li.e-active');
                    ej2_base_1.addClass(remLi, 'e-reorder-hide');
                    ej2_base_2.prepend([ulEle], this.parent.list);
                }
                this.parent.focusAtFirstListItem();
            }
        };
        return CheckBoxSelection;
    }());
    exports.CheckBoxSelection = CheckBoxSelection;
});
