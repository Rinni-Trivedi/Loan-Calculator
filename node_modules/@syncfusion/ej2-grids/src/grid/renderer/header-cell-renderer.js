var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "../base/util", "./cell-renderer", "../services/aria-service", "@syncfusion/ej2-buttons"], function (require, exports, ej2_base_1, ej2_base_2, util_1, cell_renderer_1, aria_service_1, ej2_buttons_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var HeaderCellRenderer = (function (_super) {
        __extends(HeaderCellRenderer, _super);
        function HeaderCellRenderer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.element = ej2_base_2.createElement('TH', { className: 'e-headercell', attrs: { role: 'columnheader', tabindex: '-1' } });
            _this.ariaService = new aria_service_1.AriaService();
            _this.hTxtEle = ej2_base_2.createElement('span', { className: 'e-headertext' });
            _this.sortEle = ej2_base_2.createElement('div', { className: 'e-sortfilterdiv e-icons' });
            _this.gui = ej2_base_2.createElement('div');
            _this.chkAllBox = ej2_base_2.createElement('input', { className: 'e-checkselectall', attrs: { 'type': 'checkbox' } });
            return _this;
        }
        HeaderCellRenderer.prototype.getGui = function () {
            return this.gui.cloneNode();
        };
        HeaderCellRenderer.prototype.render = function (cell, data, attributes) {
            var node = this.element.cloneNode();
            var fltrMenuEle = ej2_base_2.createElement('div', { className: 'e-filtermenudiv e-icons e-icon-filter' });
            return this.prepareHeader(cell, node, fltrMenuEle);
        };
        HeaderCellRenderer.prototype.refresh = function (cell, node) {
            this.clean(node);
            var fltrMenuEle = ej2_base_2.createElement('div', { className: 'e-filtermenudiv e-icons e-icon-filter' });
            return this.prepareHeader(cell, node, fltrMenuEle);
        };
        HeaderCellRenderer.prototype.clean = function (node) {
            node.innerHTML = '';
        };
        HeaderCellRenderer.prototype.prepareHeader = function (cell, node, fltrMenuEle) {
            var column = cell.column;
            var ariaAttr = {};
            var innerDIV = this.getGui();
            ej2_base_2.attributes(innerDIV, {
                'e-mappinguid': column.uid,
                'class': 'e-headercelldiv'
            });
            if (column.type !== 'checkbox') {
                var value = column.headerText;
                var headerText = this.hTxtEle.cloneNode();
                headerText[column.getDomSetter()] = value;
                innerDIV.appendChild(headerText);
            }
            else {
                column.editType = 'booleanedit';
                var checkAllWrap = ej2_buttons_1.createCheckBox(false, { checked: false, label: ' ' });
                checkAllWrap.insertBefore(this.chkAllBox.cloneNode(), checkAllWrap.firstChild);
                innerDIV.appendChild(checkAllWrap);
                innerDIV.classList.add('e-headerchkcelldiv');
            }
            this.buildAttributeFromCell(node, cell);
            this.appendHtml(node, innerDIV);
            node.appendChild(this.sortEle.cloneNode());
            if ((this.parent.allowFiltering && this.parent.filterSettings.type !== 'FilterBar') &&
                (column.allowFiltering && !ej2_base_1.isNullOrUndefined(column.field)) &&
                !(this.parent.showColumnMenu && column.showColumnMenu)) {
                ej2_base_2.attributes(fltrMenuEle, {
                    'e-mappinguid': 'e-flmenu-' + column.uid,
                });
                node.classList.add('e-fltr-icon');
                var matchFlColumns = [];
                if (this.parent.filterSettings.columns.length && this.parent.filterSettings.columns.length !== matchFlColumns.length) {
                    for (var index = 0; index < this.parent.columns.length; index++) {
                        for (var count = 0; count < this.parent.filterSettings.columns.length; count++) {
                            if (this.parent.filterSettings.columns[count].field === column.field) {
                                fltrMenuEle.classList.add('e-filtered');
                                matchFlColumns.push(column.field);
                                break;
                            }
                        }
                    }
                }
                node.appendChild(fltrMenuEle.cloneNode());
            }
            if (cell.className) {
                node.classList.add(cell.className);
            }
            if (column.customAttributes) {
                util_1.setStyleAndAttributes(node, column.customAttributes);
            }
            if (column.allowSorting) {
                ariaAttr.sort = 'none';
            }
            if (column.allowGrouping) {
                ariaAttr.grabbed = false;
            }
            node = this.extendPrepareHeader(column, node);
            var result;
            var gridObj = this.parent;
            var colIndex = gridObj.getColumnIndexByField(column.field);
            if (!ej2_base_1.isNullOrUndefined(column.headerTemplate)) {
                result = column.getHeaderTemplate()(ej2_base_1.extend({ 'index': colIndex }, column), gridObj, 'headerTemplate');
                node.firstElementChild.innerHTML = '';
                util_1.appendChildren(node.firstElementChild, result);
            }
            this.ariaService.setOptions(node, ariaAttr);
            if (!ej2_base_1.isNullOrUndefined(column.headerTextAlign) || !ej2_base_1.isNullOrUndefined(column.textAlign)) {
                var alignment = column.headerTextAlign || column.textAlign;
                innerDIV.style.textAlign = alignment;
                if (alignment === 'Right' || alignment === 'Left') {
                    node.classList.add(alignment === 'Right' ? 'e-rightalign' : 'e-leftalign');
                }
                else if (alignment === 'Center') {
                    node.classList.add('e-centeralign');
                }
            }
            if (column.clipMode === 'Clip') {
                node.classList.add('e-gridclip');
            }
            else if (column.clipMode === 'EllipsisWithTooltip') {
                node.classList.add('e-ellipsistooltip');
            }
            node.setAttribute('aria-rowspan', (!ej2_base_1.isNullOrUndefined(cell.rowSpan) ? cell.rowSpan : 1).toString());
            node.setAttribute('aria-colspan', '1');
            return node;
        };
        HeaderCellRenderer.prototype.extendPrepareHeader = function (column, node) {
            if (this.parent.showColumnMenu && column.showColumnMenu && !ej2_base_1.isNullOrUndefined(column.field)) {
                var element = (ej2_base_2.createElement('div', { className: 'e-icons e-columnmenu' }));
                var matchFilteredColumns = [];
                if (this.parent.filterSettings.columns.length && this.parent.filterSettings.columns.length !== matchFilteredColumns.length) {
                    for (var i = 0; i < this.parent.columns.length; i++) {
                        for (var j = 0; j < this.parent.filterSettings.columns.length; j++) {
                            if (this.parent.filterSettings.columns[j].field === column.field) {
                                element.classList.add('e-filtered');
                                matchFilteredColumns.push(column.field);
                                break;
                            }
                        }
                    }
                }
                node.classList.add('e-fltr-icon');
                node.appendChild(element);
            }
            if (this.parent.allowResizing) {
                var handler = ej2_base_2.createElement('div');
                handler.className = column.allowResizing ? 'e-rhandler e-rcursor' : 'e-rsuppress';
                node.appendChild(handler);
            }
            return node;
        };
        HeaderCellRenderer.prototype.appendHtml = function (node, innerHtml) {
            node.appendChild(innerHtml);
            return node;
        };
        return HeaderCellRenderer;
    }(cell_renderer_1.CellRenderer));
    exports.HeaderCellRenderer = HeaderCellRenderer;
});
