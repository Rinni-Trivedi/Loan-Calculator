define(["require", "exports", "../base/constant", "@syncfusion/ej2-excel-export", "@syncfusion/ej2-base", "../actions/data", "./export-helper", "../services/summary-model-generator", "../base/enum", "@syncfusion/ej2-data"], function (require, exports, events, ej2_excel_export_1, ej2_base_1, data_1, export_helper_1, summary_model_generator_1, enum_1, ej2_data_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ExcelExport = (function () {
        function ExcelExport(parent) {
            this.book = {};
            this.workSheet = [];
            this.rows = [];
            this.columns = [];
            this.styles = [];
            this.rowLength = 1;
            this.expType = 'AppendToSheet';
            this.includeHiddenColumn = false;
            this.isCsvExport = false;
            this.isElementIdChanged = false;
            this.foreignKeyData = {};
            this.parent = parent;
            this.helper = new export_helper_1.ExportHelper(parent);
        }
        ExcelExport.prototype.getModuleName = function () {
            return 'ExcelExport';
        };
        ExcelExport.prototype.init = function (gObj) {
            if (gObj.element !== null && gObj.element.id === '') {
                gObj.element.id = new Date().toISOString();
                this.isElementIdChanged = true;
            }
            this.parent = gObj;
            if (this.parent.isDestroyed) {
                return;
            }
            this.isExporting = undefined;
            this.book = {};
            this.workSheet = [];
            this.rows = [];
            this.columns = [];
            this.styles = [];
            this.rowLength = 1;
            this.footer = undefined;
            this.expType = 'AppendToSheet';
            this.includeHiddenColumn = false;
            this.exportValueFormatter = new export_helper_1.ExportValueFormatter();
        };
        ExcelExport.prototype.Map = function (grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {
            var gObj = grid;
            gObj.trigger(events.beforeExcelExport);
            this.data = new data_1.Data(gObj);
            this.isExporting = true;
            this.isBlob = isBlob;
            if (isCsv) {
                this.isCsvExport = isCsv;
            }
            else {
                this.isCsvExport = false;
            }
            return this.processRecords(gObj, exportProperties, isMultipleExport, workbook);
        };
        ExcelExport.prototype.processRecords = function (gObj, exportProperties, isMultipleExport, workbook) {
            var _this = this;
            if (!ej2_base_1.isNullOrUndefined(exportProperties) && !ej2_base_1.isNullOrUndefined(exportProperties.dataSource) &&
                exportProperties.dataSource instanceof ej2_data_1.DataManager) {
                return new Promise(function (resolve, reject) {
                    var dataManager = exportProperties.dataSource.executeQuery(new ej2_data_1.Query());
                    dataManager.then(function (r) {
                        _this.init(gObj);
                        _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r);
                        resolve(_this.book);
                    });
                });
            }
            else {
                var allPromise = [];
                allPromise.push(this.data.getData({}, export_helper_1.ExportHelper.getQuery(gObj, this.data)));
                allPromise.push(this.helper.getColumnData(gObj));
                return Promise.all(allPromise).then(function (e) {
                    _this.init(gObj);
                    _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]);
                    return _this.book;
                }).catch(function (e) {
                    _this.parent.trigger(events.actionFailure, e);
                });
            }
        };
        ExcelExport.prototype.processInnerRecords = function (gObj, exportProperties, isMultipleExport, workbook, r) {
            var blankRows = 5;
            if (!ej2_base_1.isNullOrUndefined(exportProperties) && !ej2_base_1.isNullOrUndefined(exportProperties.multipleExport)) {
                this.expType = (!ej2_base_1.isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : 'AppendToSheet');
                if (!ej2_base_1.isNullOrUndefined(exportProperties.multipleExport.blankRows)) {
                    blankRows = exportProperties.multipleExport.blankRows;
                }
            }
            if (ej2_base_1.isNullOrUndefined(workbook)) {
                this.workSheet = [];
                this.rows = [];
                this.columns = [];
                this.styles = [];
            }
            else if (this.expType === 'NewSheet') {
                this.workSheet = workbook.worksheets;
                this.rows = [];
                this.columns = [];
                this.styles = workbook.styles;
            }
            else {
                this.workSheet = [];
                this.rows = workbook.worksheets[0].rows;
                this.columns = workbook.worksheets[0].columns;
                this.styles = workbook.styles;
                this.rowLength = (this.rows[this.rows.length - 1].index + blankRows);
                this.rowLength++;
            }
            if (!ej2_base_1.isNullOrUndefined(exportProperties)) {
                if (!ej2_base_1.isNullOrUndefined(isMultipleExport)) {
                    if (!ej2_base_1.isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === 'NewSheet')) {
                        this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));
                    }
                    if (!ej2_base_1.isNullOrUndefined(exportProperties.footer)) {
                        if (this.expType === 'AppendToSheet') {
                            if (!isMultipleExport) {
                                this.footer = JSON.parse(JSON.stringify(exportProperties.footer));
                            }
                        }
                        else {
                            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));
                        }
                    }
                }
                else {
                    if (!ej2_base_1.isNullOrUndefined(exportProperties.header)) {
                        this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));
                    }
                    if (!ej2_base_1.isNullOrUndefined(exportProperties.footer)) {
                        this.footer = JSON.parse(JSON.stringify(exportProperties.footer));
                    }
                }
            }
            this.includeHiddenColumn = (!ej2_base_1.isNullOrUndefined(exportProperties) ? exportProperties.includeHiddenColumn : false);
            var headerRow = this.helper.getHeaders(gObj.columns, this.includeHiddenColumn);
            var groupIndent = 0;
            if (!ej2_base_1.isNullOrUndefined((r.result).level)) {
                groupIndent += (r.result).level;
                groupIndent += (r.result).childLevels;
            }
            this.processHeaderContent(gObj, headerRow, exportProperties, groupIndent);
            if (!ej2_base_1.isNullOrUndefined(exportProperties) && !ej2_base_1.isNullOrUndefined(exportProperties.dataSource) && !(exportProperties.dataSource instanceof ej2_data_1.DataManager)) {
                this.processRecordContent(gObj, r, headerRow, isMultipleExport, exportProperties.dataSource);
            }
            else if (!ej2_base_1.isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {
                this.processRecordContent(gObj, r, headerRow, isMultipleExport, gObj.getCurrentViewRecords());
            }
            else {
                this.processRecordContent(gObj, r, headerRow, isMultipleExport);
            }
            this.isExporting = false;
            gObj.trigger(events.excelExportComplete, this.isBlob ? { promise: this.blobPromise } : {});
        };
        ExcelExport.prototype.processRecordContent = function (gObj, returnType, headerRow, isMultipleExport, currentViewRecords) {
            var column = gObj.columns;
            var record = undefined;
            if (!ej2_base_1.isNullOrUndefined(currentViewRecords)) {
                record = currentViewRecords;
            }
            else {
                record = returnType.result;
            }
            if (!ej2_base_1.isNullOrUndefined(record.level)) {
                this.processGroupedRows(gObj, record, headerRow, record.level);
            }
            else {
                this.processRecordRows(gObj, record, headerRow, 0);
            }
            if (!ej2_base_1.isNullOrUndefined(returnType.aggregates)) {
                if (!ej2_base_1.isNullOrUndefined(currentViewRecords)) {
                    this.processAggregates(gObj, returnType.result, currentViewRecords);
                }
                else {
                    this.processAggregates(gObj, returnType.result);
                }
            }
            if (!ej2_base_1.isNullOrUndefined(this.footer)) {
                if ((this.expType === 'AppendToSheet' && !isMultipleExport) || (this.expType === 'NewSheet')) {
                    this.processExcelFooter(this.footer);
                }
            }
            var sheet = {};
            if (this.columns.length > 0) {
                sheet.columns = this.columns;
            }
            sheet.rows = this.rows;
            this.workSheet.push(sheet);
            this.book.worksheets = this.workSheet;
            this.book.styles = this.styles;
            if (!isMultipleExport) {
                if (this.isCsvExport) {
                    var book = new ej2_excel_export_1.Workbook(this.book, 'csv', gObj.locale);
                    if (!this.isBlob) {
                        book.save('Export.csv');
                    }
                    else {
                        this.blobPromise = book.saveAsBlob('text/csv');
                    }
                }
                else {
                    var book = new ej2_excel_export_1.Workbook(this.book, 'xlsx', gObj.locale);
                    if (!this.isBlob) {
                        book.save('Export.xlsx');
                    }
                    else {
                        this.blobPromise = book.saveAsBlob('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
                    }
                }
                if (this.isElementIdChanged) {
                    gObj.element.id = '';
                }
            }
        };
        ExcelExport.prototype.processGroupedRows = function (gObj, dataSource, headerRow, level) {
            for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
                var item = dataSource_1[_i];
                var cells = [];
                var index = 1;
                var cell = {};
                cell.index = index + level;
                var col = gObj.getColumnByField(item.field);
                var args = {
                    value: item.key,
                    column: col,
                    style: undefined,
                    isForeignKey: col.isForeignColumn(),
                };
                cell.value = this.parent.getColumnByField(item.field).headerText +
                    ': ' + this.exportValueFormatter.formatCellValue(args) + ' - ';
                if (item.count > 1) {
                    cell.value += item.count + ' items';
                }
                else {
                    cell.value += item.count + ' item';
                }
                cell.style = this.getCaptionThemeStyle(this.theme);
                var captionModelGen = new summary_model_generator_1.CaptionSummaryModelGenerator(gObj);
                var groupCaptionSummaryRows = captionModelGen.generateRows(item);
                this.fillAggregates(gObj, groupCaptionSummaryRows, dataSource.level + dataSource.childLevels, this.rowLength);
                cells.push(cell);
                if (this.rows[this.rows.length - 1].cells.length > 0) {
                    var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;
                    var hIndex = 0;
                    for (var _a = 0, _b = this.rows[this.rows.length - 1].cells; _a < _b.length; _a++) {
                        var tCell = _b[_a];
                        if (tCell.index < lIndex) {
                            lIndex = tCell.index;
                        }
                        if (tCell.index > hIndex) {
                            hIndex = tCell.index;
                        }
                        tCell.style = this.getCaptionThemeStyle(this.theme);
                        if (cells[cells.length - 1].index !== tCell.index) {
                            cells.push(tCell);
                        }
                    }
                    if ((lIndex - cell.index) > 1) {
                        cell.colSpan = lIndex - cell.index;
                    }
                    while (hIndex < (headerRow.columns.length + level)) {
                        var sCell = {};
                        if (dataSource.childLevels === 0) {
                            sCell.index = (hIndex);
                        }
                        else {
                            sCell.index = (hIndex + 1);
                        }
                        sCell.style = this.getCaptionThemeStyle(this.theme);
                        cells.push(sCell);
                        hIndex++;
                    }
                }
                else {
                    var span = 0;
                    for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {
                        var col_1 = _d[_c];
                        if (col_1.visible) {
                            span++;
                        }
                    }
                    cell.colSpan = (dataSource.childLevels + span);
                }
                this.rows[this.rows.length - 1].cells = cells;
                this.rowLength++;
                if (!ej2_base_1.isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {
                    this.processGroupedRows(gObj, item.items, headerRow, item.items.level);
                }
                else {
                    this.processRecordRows(gObj, item.items, headerRow, (level));
                    this.processAggregates(gObj, item, undefined, (level), true);
                }
            }
        };
        ExcelExport.prototype.processRecordRows = function (gObj, record, headerRow, level) {
            var rLen = Object.keys(record).length;
            var index = 1;
            var cells = [];
            for (var r = 0; r < rLen; r++) {
                cells = [];
                index = 1;
                for (var c = 0, len = headerRow.columns.length; c < len; c++) {
                    var value = !ej2_base_1.isNullOrUndefined(headerRow.columns[c].field) ? ej2_base_1.getValue(headerRow.columns[c].field, record[r]) : '';
                    var column = headerRow.columns[c];
                    var foreignKeyData = void 0;
                    if (column.isForeignColumn && column.isForeignColumn()) {
                        foreignKeyData = this.helper.getFData(value, column);
                        value = ej2_base_1.getValue(column.foreignKeyValue, foreignKeyData);
                    }
                    if (!ej2_base_1.isNullOrUndefined(value)) {
                        var excelCellArgs = { data: record[r], column: headerRow.columns[c], foreignKeyData: foreignKeyData };
                        gObj.trigger(events.excelQueryCellInfo, ej2_base_1.extend(excelCellArgs, {
                            column: headerRow.columns[c], data: record[r],
                            value: value, style: undefined, colSpan: 1
                        }));
                        var cell = {};
                        cell.index = index + level;
                        cell.value = excelCellArgs.value;
                        if (excelCellArgs.colSpan > 1) {
                            cell.colSpan = excelCellArgs.colSpan;
                        }
                        if (!ej2_base_1.isNullOrUndefined(excelCellArgs.style)) {
                            var styleIndex = this.getColumnStyle(gObj, index + level);
                            cell.style = this.mergeOptions(this.styles[styleIndex], excelCellArgs.style);
                        }
                        else {
                            cell.style = { name: gObj.element.id + 'column' + (index + level) };
                        }
                        cells.push(cell);
                    }
                    index++;
                }
                this.rows.push({ index: this.rowLength++, cells: cells });
            }
        };
        ExcelExport.prototype.processAggregates = function (gObj, rec, currentViewRecords, indent, byGroup) {
            var summaryModel = new summary_model_generator_1.SummaryModelGenerator(gObj);
            var data = undefined;
            if (!ej2_base_1.isNullOrUndefined(currentViewRecords)) {
                data = currentViewRecords;
            }
            else {
                data = rec;
            }
            if (indent === undefined) {
                indent = 0;
            }
            if (gObj.groupSettings.columns.length > 0 && byGroup) {
                var groupSummaryModel = new summary_model_generator_1.GroupSummaryModelGenerator(gObj);
                var groupSummaryRows = groupSummaryModel.generateRows(data, { level: data.level });
                if (groupSummaryRows.length > 0) {
                    this.fillAggregates(gObj, groupSummaryRows, indent);
                }
            }
            else {
                indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;
                var sRows = summaryModel.generateRows(data, rec.aggregates);
                if (sRows.length > 0 && !byGroup) {
                    this.fillAggregates(gObj, sRows, indent);
                }
            }
        };
        ExcelExport.prototype.fillAggregates = function (gObj, cells, indent, customIndex) {
            for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
                var row = cells_1[_i];
                var cells_2 = [];
                var index = 0;
                for (var _a = 0, _b = row.cells; _a < _b.length; _a++) {
                    var cell = _b[_a];
                    var eCell = {};
                    if ((cell.visible || this.includeHiddenColumn)) {
                        index++;
                        if (cell.isDataCell) {
                            eCell.index = index + indent;
                            if (!ej2_base_1.isNullOrUndefined(cell.column.footerTemplate)) {
                                eCell.value = this.getAggreateValue(enum_1.CellType.Summary, cell.column.footerTemplate, cell, row);
                            }
                            else if (!ej2_base_1.isNullOrUndefined(cell.column.groupFooterTemplate)) {
                                eCell.value = this.getAggreateValue(enum_1.CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row);
                            }
                            else if (!ej2_base_1.isNullOrUndefined(cell.column.groupCaptionTemplate)) {
                                eCell.value = this.getAggreateValue(enum_1.CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row);
                            }
                            else {
                                for (var _c = 0, _d = Object.keys(row.data[cell.column.field]); _c < _d.length; _c++) {
                                    var key = _d[_c];
                                    if (key === cell.column.type) {
                                        if (!ej2_base_1.isNullOrUndefined(row.data[cell.column.field].Sum)) {
                                            eCell.value = row.data[cell.column.field].Sum;
                                        }
                                        else if (!ej2_base_1.isNullOrUndefined(row.data[cell.column.field].Average)) {
                                            eCell.value = row.data[cell.column.field].Average;
                                        }
                                        else if (!ej2_base_1.isNullOrUndefined(row.data[cell.column.field].Max)) {
                                            eCell.value = row.data[cell.column.field].Max;
                                        }
                                        else if (!ej2_base_1.isNullOrUndefined(row.data[cell.column.field].Min)) {
                                            eCell.value = row.data[cell.column.field].Min;
                                        }
                                        else if (!ej2_base_1.isNullOrUndefined(row.data[cell.column.field].Count)) {
                                            eCell.value = row.data[cell.column.field].Count;
                                        }
                                        else if (!ej2_base_1.isNullOrUndefined(row.data[cell.column.field].TrueCount)) {
                                            eCell.value = row.data[cell.column.field].TrueCount;
                                        }
                                        else if (!ej2_base_1.isNullOrUndefined(row.data[cell.column.field].FalseCount)) {
                                            eCell.value = row.data[cell.column.field].FalseCount;
                                        }
                                        else if (!ej2_base_1.isNullOrUndefined(row.data[cell.column.field].Custom)) {
                                            eCell.value = row.data[cell.column.field].Custom;
                                        }
                                    }
                                }
                            }
                            eCell.style = this.getCaptionThemeStyle(this.theme);
                            if (cell.attributes.style.textAlign) {
                                eCell.style.hAlign = cell.attributes.style.textAlign;
                            }
                            cells_2.push(eCell);
                        }
                        else {
                            if (customIndex === undefined) {
                                eCell.index = index + indent;
                                eCell.style = this.getCaptionThemeStyle(this.theme);
                                cells_2.push(eCell);
                            }
                        }
                    }
                }
                if (!ej2_base_1.isNullOrUndefined(customIndex)) {
                    this.rows.push({ index: customIndex, cells: cells_2 });
                }
                else {
                    this.rows.push({ index: this.rowLength++, cells: cells_2 });
                }
            }
        };
        ExcelExport.prototype.getAggreateValue = function (cellType, template, cell, row) {
            var templateFn = {};
            templateFn[ej2_base_1.getEnumValue(enum_1.CellType, cell.cellType)] = ej2_base_1.compile(template);
            var txt = (templateFn[ej2_base_1.getEnumValue(enum_1.CellType, cell.cellType)](row.data[cell.column.field ? cell.column.field : cell.column.columnName]));
            return txt[0].wholeText;
        };
        ExcelExport.prototype.mergeOptions = function (JSON1, JSON2) {
            var result = {};
            var attrname = Object.keys(JSON1);
            for (var index = 0; index < attrname.length; index++) {
                if (attrname[index] !== 'name') {
                    result[attrname[index]] = JSON1[attrname[index]];
                }
            }
            attrname = Object.keys(JSON2);
            for (var index = 0; index < attrname.length; index++) {
                if (attrname[index] !== 'name') {
                    result[attrname[index]] = JSON2[attrname[index]];
                }
            }
            return result;
        };
        ExcelExport.prototype.getColumnStyle = function (gObj, columnIndex) {
            var index = 0;
            for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {
                var style = _a[_i];
                if (style.name === gObj.element.id + 'column' + columnIndex) {
                    return index;
                }
                index++;
            }
            return undefined;
        };
        ExcelExport.prototype.processHeaderContent = function (gObj, headerRow, exportProperties, indent) {
            var column = gObj.columns;
            var rowIndex = 1;
            var returnValue = headerRow;
            var gridRows = returnValue.rows;
            var gridColumns = returnValue.columns;
            var spannedCells = [];
            if (indent > 0) {
                var index = 0;
                while (index !== indent) {
                    this.columns.push({ index: index + 1, width: 30 });
                    index++;
                }
            }
            for (var row = 0; row < gridRows.length; row++) {
                var currentCellIndex = 1 + indent;
                var cells = [];
                for (var column_1 = 0; column_1 < gridRows[row].cells.length; column_1++) {
                    var style = {};
                    var cell = {};
                    var gridCell = gridRows[row].cells[column_1];
                    var result = { contains: true, index: 1 };
                    while (result.contains) {
                        result = this.getIndex(spannedCells, rowIndex, currentCellIndex);
                        currentCellIndex = result.index;
                        if (!result.contains) {
                            cell.index = result.index;
                            break;
                        }
                    }
                    if (!ej2_base_1.isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {
                        cell.rowSpan = gridCell.rowSpan;
                        for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {
                            var spannedCell = { rowIndex: 0, columnIndex: 0 };
                            spannedCell.rowIndex = i;
                            spannedCell.columnIndex = currentCellIndex;
                            spannedCells.push(spannedCell);
                        }
                    }
                    if (!ej2_base_1.isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {
                        cell.colSpan = gridCell.colSpan;
                        currentCellIndex = currentCellIndex + cell.colSpan - 1;
                    }
                    cell.value = gridCell.column.headerText;
                    if (!ej2_base_1.isNullOrUndefined(exportProperties) && !ej2_base_1.isNullOrUndefined(exportProperties.theme)) {
                        this.theme = exportProperties.theme;
                    }
                    style = this.getHeaderThemeStyle(this.theme);
                    if (!ej2_base_1.isNullOrUndefined(gridCell.column.textAlign)) {
                        style.hAlign = gridCell.column.textAlign;
                    }
                    if (!ej2_base_1.isNullOrUndefined(gridCell.column.headerTextAlign)) {
                        style.hAlign = gridCell.column.headerTextAlign;
                    }
                    cell.style = style;
                    cells.push(cell);
                    currentCellIndex++;
                }
                this.rows.push({ index: this.rowLength++, cells: cells });
            }
            for (var col = 0; col < gridColumns.length; col++) {
                this.parseStyles(gObj, gridColumns[col], this.getRecordThemeStyle(this.theme), indent + col + 1);
            }
        };
        ExcelExport.prototype.getHeaderThemeStyle = function (theme) {
            var style = {};
            style.fontSize = 12;
            style.borders = { color: '#E0E0E0' };
            if (!ej2_base_1.isNullOrUndefined(theme) && !ej2_base_1.isNullOrUndefined(theme.header)) {
                style = this.updateThemeStyle(theme.header, style);
            }
            return style;
        };
        ExcelExport.prototype.updateThemeStyle = function (themestyle, style) {
            if (!ej2_base_1.isNullOrUndefined(themestyle.fontColor)) {
                style.fontColor = themestyle.fontColor;
            }
            if (!ej2_base_1.isNullOrUndefined(themestyle.fontName)) {
                style.fontName = themestyle.fontName;
            }
            if (!ej2_base_1.isNullOrUndefined(themestyle.fontSize)) {
                style.fontSize = themestyle.fontSize;
            }
            if (!ej2_base_1.isNullOrUndefined(themestyle.borders)) {
                if (!ej2_base_1.isNullOrUndefined(themestyle.borders.color)) {
                    style.borders.color = themestyle.borders.color;
                }
                if (!ej2_base_1.isNullOrUndefined(themestyle.borders.lineStyle)) {
                    style.borders.lineStyle = themestyle.borders.lineStyle;
                }
            }
            if (themestyle.bold !== false) {
                style.bold = themestyle.bold;
            }
            return style;
        };
        ExcelExport.prototype.getCaptionThemeStyle = function (theme) {
            var style = {};
            style.fontSize = 13;
            style.backColor = '#F6F6F6';
            if (!ej2_base_1.isNullOrUndefined(theme) && !ej2_base_1.isNullOrUndefined(theme.caption)) {
                style = this.updateThemeStyle(theme.caption, style);
            }
            return style;
        };
        ExcelExport.prototype.getRecordThemeStyle = function (theme) {
            var style = {};
            style.fontSize = 13;
            style.borders = { color: '#E0E0E0' };
            if (!ej2_base_1.isNullOrUndefined(theme) && !ej2_base_1.isNullOrUndefined(theme.record)) {
                style = this.updateThemeStyle(theme.record, style);
            }
            return style;
        };
        ExcelExport.prototype.processExcelHeader = function (header) {
            if (!ej2_base_1.isNullOrUndefined(header.rows) && (this.expType === 'NewSheet' || this.rowLength === 1)) {
                var noRows = void 0;
                if (header.headerRows === undefined) {
                    this.rowLength = header.rows.length;
                }
                else {
                    this.rowLength = header.headerRows;
                }
                if (this.rowLength < header.rows.length) {
                    noRows = this.rowLength;
                }
                else {
                    noRows = header.rows.length;
                }
                this.rowLength++;
                for (var row = 0; row < noRows; row++) {
                    var json = header.rows[row];
                    if (!(json.index !== null && !ej2_base_1.isNullOrUndefined(json.index))) {
                        json.index = (row + 1);
                    }
                    this.updatedCellIndex(json);
                }
            }
        };
        ExcelExport.prototype.updatedCellIndex = function (json) {
            var cellsLength = json.cells.length;
            for (var cellId = 0; cellId < cellsLength; cellId++) {
                var jsonCell = json.cells[cellId];
                if (!(jsonCell.index !== null && !ej2_base_1.isNullOrUndefined(jsonCell.index))) {
                    jsonCell.index = (cellId + 1);
                }
            }
            this.rows.push(json);
        };
        ExcelExport.prototype.processExcelFooter = function (footer) {
            if (!ej2_base_1.isNullOrUndefined(footer.rows)) {
                var noRows = void 0;
                if (footer.footerRows === undefined) {
                    this.rowLength += footer.rows.length;
                }
                else {
                    if (footer.footerRows > footer.rows.length) {
                        this.rowLength += (footer.footerRows - footer.rows.length);
                        noRows = footer.rows.length;
                    }
                    else {
                        noRows = footer.footerRows;
                    }
                }
                for (var row = 0; row < noRows; row++) {
                    var json = footer.rows[row];
                    if (json.index === null || json.index === undefined) {
                        json.index = this.rowLength++;
                    }
                    else {
                        json.index += this.rowLength;
                    }
                    this.updatedCellIndex(json);
                }
            }
        };
        ExcelExport.prototype.getIndex = function (spannedCells, rowIndex, columnIndex) {
            for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {
                var spannedCell = spannedCells_1[_i];
                if ((spannedCell.rowIndex === rowIndex) && (spannedCell.columnIndex === columnIndex)) {
                    columnIndex = columnIndex + 1;
                    return { contains: true, index: columnIndex };
                }
            }
            return { contains: false, index: columnIndex };
        };
        ExcelExport.prototype.parseStyles = function (gObj, col, style, index) {
            if (!ej2_base_1.isNullOrUndefined(col.format)) {
                if (!ej2_base_1.isNullOrUndefined(col.format.skeleton)) {
                    style.numberFormat = col.format.skeleton;
                    if (!ej2_base_1.isNullOrUndefined(col.format.type)) {
                        style.type = col.format.type;
                    }
                }
                else {
                    style.numberFormat = col.format;
                    style.type = col.type;
                }
            }
            if (!ej2_base_1.isNullOrUndefined(col.textAlign)) {
                style.hAlign = col.textAlign;
            }
            if (Object.keys(style).length > 0) {
                style.name = gObj.element.id + 'column' + index;
                this.styles.push(style);
            }
            if (!ej2_base_1.isNullOrUndefined(col.width)) {
                this.columns.push({ index: index, width: typeof col.width === 'number' ? col.width : this.helper.getConvertedWidth(col.width) });
            }
        };
        ExcelExport.prototype.destroy = function () {
        };
        return ExcelExport;
    }());
    exports.ExcelExport = ExcelExport;
});
