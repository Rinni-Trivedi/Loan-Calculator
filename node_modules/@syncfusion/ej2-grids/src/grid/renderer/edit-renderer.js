define(["require", "exports", "@syncfusion/ej2-base", "./inline-edit-renderer", "./batch-edit-renderer", "./dialog-edit-renderer", "@syncfusion/ej2-base", "../base/enum", "../services/row-model-generator"], function (require, exports, ej2_base_1, inline_edit_renderer_1, batch_edit_renderer_1, dialog_edit_renderer_1, ej2_base_2, enum_1, row_model_generator_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EditRender = (function () {
        function EditRender(parent, serviceLocator) {
            this.editType = {
                'Inline': inline_edit_renderer_1.InlineEditRender,
                'Normal': inline_edit_renderer_1.InlineEditRender, 'Batch': batch_edit_renderer_1.BatchEditRender, 'Dialog': dialog_edit_renderer_1.DialogEditRender
            };
            this.parent = parent;
            this.serviceLocator = serviceLocator;
            this.renderer = new this.editType[this.parent.editSettings.mode](parent, serviceLocator);
            this.focus = serviceLocator.getService('focus');
        }
        EditRender.prototype.addNew = function (args) {
            this.renderer.addNew(this.getEditElements(args), args);
            this.convertWidget(args);
        };
        EditRender.prototype.update = function (args) {
            this.renderer.update(this.getEditElements(args), args);
            this.convertWidget(args);
        };
        EditRender.prototype.convertWidget = function (args) {
            var gObj = this.parent;
            var isFocused;
            var cell;
            var value;
            var fForm;
            var frzCols = gObj.getFrozenColumns();
            var form = gObj.element.querySelector('.e-gridform');
            if (frzCols && gObj.editSettings.mode === 'Normal') {
                var rowIndex = parseInt(args.row.getAttribute('aria-rowindex'), 10);
                if (gObj.frozenRows && (args.requestType === 'add' || rowIndex < gObj.frozenRows)) {
                    fForm = gObj.element.querySelector('.e-movableheader').querySelector('.e-gridform');
                }
                else {
                    fForm = gObj.element.querySelector('.e-movablecontent').querySelector('.e-gridform');
                }
            }
            var cols = gObj.editSettings.mode !== 'Batch' ? gObj.getColumns() : [gObj.getColumnByField(args.columnName)];
            for (var _i = 0, cols_1 = cols; _i < cols_1.length; _i++) {
                var col = cols_1[_i];
                if (!col.visible || col.commands) {
                    continue;
                }
                value = (col.valueAccessor(col.field, args.rowData, col));
                if (frzCols && cols.indexOf(col) >= frzCols && gObj.editSettings.mode === 'Normal') {
                    cell = fForm.querySelector('[e-mappinguid=' + col.uid + ']');
                }
                else {
                    cell = form.querySelector('[e-mappinguid=' + col.uid + ']');
                }
                var temp = col.edit.write;
                if (!ej2_base_1.isNullOrUndefined(cell)) {
                    if (typeof temp === 'string') {
                        temp = ej2_base_1.getValue(temp, window);
                        temp({
                            rowData: args.rowData, element: cell, column: col, requestType: args.requestType, row: args.row,
                            foreignKeyData: col.isForeignColumn() && ej2_base_1.getValue(col.field, args.foreignKeyData)
                        });
                    }
                    else {
                        col.edit.write({
                            rowData: args.rowData, element: cell, column: col, requestType: args.requestType, row: args.row,
                            foreignKeyData: col.isForeignColumn() && ej2_base_1.getValue(col.field, args.foreignKeyData)
                        });
                    }
                    if (!isFocused && !cell.getAttribute('disabled')) {
                        this.focusElement(cell, args.type);
                        isFocused = true;
                    }
                }
            }
        };
        EditRender.prototype.focusElement = function (elem, type) {
            var chkBox = this.parent.element.querySelector('.e-edit-checkselect');
            if (!ej2_base_1.isNullOrUndefined(chkBox)) {
                chkBox.nextElementSibling.classList.add('e-focus');
            }
            if (this.parent.editSettings.mode === 'Batch') {
                this.focus.onClick({ target: ej2_base_1.closest(elem, 'td') }, true);
            }
            else {
                elem.focus();
            }
            if (elem.classList.contains('e-defaultcell')) {
                elem.setSelectionRange(elem.value.length, elem.value.length);
            }
        };
        EditRender.prototype.getEditElements = function (args) {
            var gObj = this.parent;
            var elements = {};
            var cols = gObj.editSettings.mode !== 'Batch' ? gObj.getColumns() : [gObj.getColumnByField(args.columnName)];
            for (var i = 0, len = cols.length; i < len; i++) {
                var col = cols[i];
                if (!col.visible) {
                    continue;
                }
                if (col.commands || col.commandsTemplate) {
                    var cellRendererFact = this.serviceLocator.getService('cellRendererFactory');
                    var model = new row_model_generator_1.RowModelGenerator(this.parent);
                    var cellRenderer = cellRendererFact.getCellRenderer(enum_1.CellType.CommandColumn);
                    var cells = model.generateRows(args.rowData)[0].cells;
                    var td = cellRenderer.render(cells[i], args.rowData, { 'index': args.row ? args.row.getAttribute('aria-rowindex') : 0 });
                    var div = td.firstElementChild;
                    div.setAttribute('textAlign', td.getAttribute('textAlign'));
                    elements[col.uid] = div;
                    continue;
                }
                var value = (col.valueAccessor(col.field, args.rowData, col));
                var tArgs = { column: col, value: value, type: args.requestType, data: args.rowData };
                var temp = col.edit.create;
                var input = void 0;
                if (typeof temp === 'string') {
                    temp = ej2_base_1.getValue(temp, window);
                    input = temp(tArgs);
                }
                else {
                    input = col.edit.create(tArgs);
                }
                if (typeof input === 'string') {
                    var div = ej2_base_2.createElement('div');
                    div.innerHTML = input;
                    input = div.firstChild;
                }
                var isInput = input.tagName !== 'input' && input.querySelectorAll('input').length;
                var isComplexField = !ej2_base_1.isNullOrUndefined(col.field) && col.field.split('.').length > 1;
                var splits = !ej2_base_1.isNullOrUndefined(col.field) && col.field.split('.');
                ej2_base_2.attributes(isInput ? input.querySelector('input') : input, {
                    name: isComplexField ? splits[0] + splits[1] : col.field, 'e-mappinguid': col.uid,
                    id: isComplexField ? gObj.element.id + splits[0] + splits[1] : gObj.element.id + col.field
                });
                ej2_base_2.classList(input, ['e-input', 'e-field'], []);
                if (col.textAlign === 'Right') {
                    input.classList.add('e-ralign');
                }
                if ((col.isPrimaryKey || col.isIdentity) && args.requestType === 'beginEdit' ||
                    (col.isIdentity && args.requestType === 'add')) {
                    input.setAttribute('disabled', 'true');
                }
                elements[col.uid] = input;
            }
            return elements;
        };
        EditRender.prototype.destroy = function () {
            this.renderer.removeEventListener();
        };
        return EditRender;
    }());
    exports.EditRender = EditRender;
});
