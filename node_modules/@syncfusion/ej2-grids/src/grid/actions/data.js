define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-data", "../base/util", "../base/constant", "../services/value-formatter", "../actions/checkbox-filter"], function (require, exports, ej2_base_1, ej2_data_1, util_1, events, value_formatter_1, checkbox_filter_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Data = (function () {
        function Data(parent, serviceLocator) {
            this.dataState = { isPending: false, resolver: null, group: [] };
            this.parent = parent;
            this.serviceLocator = serviceLocator;
            this.initDataManager();
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.on(events.rowsAdded, this.addRows, this);
            this.parent.on(events.rowsRemoved, this.removeRows, this);
            this.parent.on(events.dataSourceModified, this.initDataManager, this);
            this.parent.on(events.destroy, this.destroy, this);
            this.parent.on(events.updateData, this.crudActions, this);
            this.parent.on(events.addDeleteAction, this.getData, this);
        }
        Data.prototype.initDataManager = function () {
            var gObj = this.parent;
            this.dataManager = gObj.dataSource instanceof ej2_data_1.DataManager ? gObj.dataSource :
                (ej2_base_1.isNullOrUndefined(gObj.dataSource) ? new ej2_data_1.DataManager() : new ej2_data_1.DataManager(gObj.dataSource));
            gObj.query = gObj.query instanceof ej2_data_1.Query ? gObj.query : new ej2_data_1.Query();
        };
        Data.prototype.generateQuery = function (skipPage) {
            var gObj = this.parent;
            var query = gObj.query.clone();
            this.filterQuery(query);
            this.searchQuery(query);
            this.aggregateQuery(query);
            this.sortQuery(query);
            this.pageQuery(query, skipPage);
            this.groupQuery(query);
            return query;
        };
        Data.prototype.aggregateQuery = function (query, isForeign) {
            this.parent.aggregates.forEach(function (row) {
                row.columns.forEach(function (column) {
                    var types = column.type instanceof Array ? column.type : [column.type];
                    types.forEach(function (type) { return query.aggregate(type.toLowerCase(), column.field); });
                });
            });
            return query;
        };
        Data.prototype.pageQuery = function (query, skipPage) {
            var gObj = this.parent;
            if ((gObj.allowPaging || gObj.enableVirtualization) && skipPage !== true) {
                gObj.pageSettings.currentPage = Math.max(1, gObj.pageSettings.currentPage);
                if (gObj.pageSettings.pageCount <= 0) {
                    gObj.pageSettings.pageCount = 8;
                }
                if (gObj.pageSettings.pageSize <= 0) {
                    gObj.pageSettings.pageSize = 12;
                }
                query.page(gObj.pageSettings.currentPage, gObj.pageSettings.pageSize);
            }
            return query;
        };
        Data.prototype.groupQuery = function (query) {
            var gObj = this.parent;
            if (gObj.allowGrouping && gObj.groupSettings.columns.length) {
                var columns = gObj.groupSettings.columns;
                for (var i = 0, len = columns.length; i < len; i++) {
                    var column = this.getColumnByField(columns[i]);
                    var isGrpFmt = column.enableGroupByFormat;
                    var format = column.format;
                    if (isGrpFmt) {
                        query.group(columns[i], this.formatGroupColumn.bind(this), format);
                    }
                    else {
                        query.group(columns[i], null);
                    }
                }
            }
            return query;
        };
        Data.prototype.sortQuery = function (query) {
            var gObj = this.parent;
            if ((gObj.allowSorting || gObj.allowGrouping) && gObj.sortSettings.columns.length) {
                var columns = gObj.sortSettings.columns;
                var sortGrp = [];
                for (var i = columns.length - 1; i > -1; i--) {
                    var col = this.getColumnByField(columns[i].field);
                    if (col) {
                        col.setSortDirection(columns[i].direction);
                    }
                    var fn = col.sortComparer && !this.isRemote() ? col.sortComparer.bind(col) :
                        columns[i].direction;
                    if (gObj.groupSettings.columns.indexOf(columns[i].field) === -1) {
                        query.sortBy(col.field, fn);
                    }
                    else {
                        sortGrp.push({ direction: fn, field: col.field });
                    }
                }
                for (var i = 0, len = sortGrp.length; i < len; i++) {
                    query.sortBy(sortGrp[i].field, sortGrp[i].direction);
                }
            }
            return query;
        };
        Data.prototype.searchQuery = function (query) {
            var _this = this;
            var sSettings = this.parent.searchSettings;
            var fields = sSettings.fields.length ? sSettings.fields : this.parent.getColumns().map(function (f) { return f.field; });
            var predicateList = [];
            if (this.parent.searchSettings.key.length) {
                var predicate = void 0;
                if (this.parent.getForeignKeyColumns().length) {
                    fields.forEach(function (columnName) {
                        var column = _this.getColumnByField(columnName);
                        var sQuery = new ej2_data_1.Query();
                        if (column.isForeignColumn()) {
                            predicateList = _this.fGeneratePredicate(column, predicateList);
                        }
                        else {
                            predicateList.push(new ej2_data_1.Predicate(column.field, sSettings.operator, sSettings.key, sSettings.ignoreCase, _this.parent.filterSettings.ignoreAccent));
                        }
                    });
                    query.where(ej2_data_1.Predicate.or(predicateList));
                }
                else {
                    query.search(sSettings.key, fields, sSettings.operator, sSettings.ignoreCase, this.parent.filterSettings.ignoreAccent);
                }
            }
            return query;
        };
        Data.prototype.filterQuery = function (query, column, skipFoerign) {
            var gObj = this.parent;
            var predicateList = [];
            var fPredicate = {};
            var actualFilter = [];
            var foreignColumn = this.parent.getForeignKeyColumns();
            if (gObj.allowFiltering && gObj.filterSettings.columns.length) {
                var columns = column ? column : gObj.filterSettings.columns;
                var colType = {};
                for (var _i = 0, _a = gObj.columns; _i < _a.length; _i++) {
                    var col = _a[_i];
                    colType[col.field] = col.filter.type ? col.filter.type : gObj.filterSettings.type;
                }
                var checkBoxCols = [];
                var defaultFltrCols = [];
                for (var _b = 0, columns_1 = columns; _b < columns_1.length; _b++) {
                    var col = columns_1[_b];
                    if (colType[col.field] === 'CheckBox' || colType[col.field] === 'Excel') {
                        checkBoxCols.push(col);
                    }
                    else {
                        defaultFltrCols.push(col);
                    }
                }
                if (checkBoxCols.length) {
                    var excelPredicate = checkbox_filter_1.CheckBoxFilter.getPredicate(checkBoxCols);
                    for (var _c = 0, _d = Object.keys(excelPredicate); _c < _d.length; _c++) {
                        var prop = _d[_c];
                        var col = util_1.getColumnByForeignKeyValue(prop, foreignColumn);
                        if (col && !skipFoerign) {
                            predicateList = this.fGeneratePredicate(col, predicateList);
                            actualFilter.push(col);
                        }
                        else {
                            predicateList.push(excelPredicate[prop]);
                        }
                    }
                }
                if (defaultFltrCols.length) {
                    for (var _e = 0, defaultFltrCols_1 = defaultFltrCols; _e < defaultFltrCols_1.length; _e++) {
                        var col = defaultFltrCols_1[_e];
                        var column_1 = this.getColumnByField(col.field) ||
                            util_1.getColumnByForeignKeyValue(col.field, this.parent.getForeignKeyColumns());
                        var sType = column_1.type;
                        if (util_1.getColumnByForeignKeyValue(col.field, foreignColumn) && !skipFoerign) {
                            actualFilter.push(col);
                            predicateList = this.fGeneratePredicate(column_1, predicateList);
                        }
                        else {
                            if (sType !== 'date' && sType !== 'datetime') {
                                predicateList.push(new ej2_data_1.Predicate(col.field, col.operator, col.value, !col.matchCase, this.parent.filterSettings.ignoreAccent));
                            }
                            else {
                                predicateList.push(util_1.getDatePredicate(col));
                            }
                        }
                    }
                }
                if (predicateList.length) {
                    query.where(ej2_data_1.Predicate.and(predicateList));
                }
                else {
                    this.parent.notify(events.showEmptyGrid, {});
                }
            }
            return query;
        };
        Data.prototype.fGeneratePredicate = function (col, predicateList) {
            var fPredicate = {};
            if (col) {
                this.parent.notify(events.generateQuery, { predicate: fPredicate, column: col });
                if (fPredicate.predicate.predicates.length) {
                    predicateList.push(fPredicate.predicate);
                }
            }
            return predicateList;
        };
        Data.prototype.getData = function (args, query) {
            var _this = this;
            if (args === void 0) { args = { requestType: '' }; }
            var key = this.getKey(args.foreignKeyData &&
                Object.keys(args.foreignKeyData).length ?
                args.foreignKeyData : this.parent.getPrimaryKeyFieldNames());
            if (this.parent.dataSource && 'result' in this.parent.dataSource) {
                var def = this.eventPromise(args, query, key);
                return def.promise;
            }
            else {
                var crud = void 0;
                switch (args.requestType) {
                    case 'delete':
                        query = query ? query : this.generateQuery();
                        crud = this.dataManager.remove(key, args.data[0], null, query);
                        break;
                    case 'save':
                        query = query ? query : this.generateQuery();
                        args.index = ej2_base_1.isNullOrUndefined(args.index) ? 0 : args.index;
                        crud = this.dataManager.insert(args.data, null, query, args.index);
                        break;
                }
                if (crud && !Array.isArray(crud)) {
                    return crud.then(function (result) {
                        return _this.executeQuery(query);
                    });
                }
                else {
                    return this.executeQuery(query);
                }
            }
        };
        Data.prototype.executeQuery = function (query) {
            var _this = this;
            if (this.dataManager.ready) {
                var deferred_1 = new ej2_data_1.Deferred();
                var ready = this.dataManager.ready;
                ready.then(function (e) {
                    _this.dataManager.executeQuery(query).then(function (result) {
                        deferred_1.resolve(result);
                    });
                }).catch(function (e) {
                    deferred_1.reject(e);
                });
                return deferred_1.promise;
            }
            else {
                return this.dataManager.executeQuery(query);
            }
        };
        Data.prototype.formatGroupColumn = function (value, field) {
            var gObj = this.parent;
            var serviceLocator = this.serviceLocator;
            var column = this.getColumnByField(field);
            var date = value;
            if (!column.type) {
                column.type = date.getDay ? (date.getHours() > 0 || date.getMinutes() > 0 ||
                    date.getSeconds() > 0 || date.getMilliseconds() > 0 ? 'datetime' : 'date') : typeof (value);
            }
            if (ej2_base_1.isNullOrUndefined(column.getFormatter())) {
                util_1.setFormatter(serviceLocator, column);
            }
            var formatVal = value_formatter_1.ValueFormatter.prototype.toView(value, column.getFormatter());
            return formatVal;
        };
        Data.prototype.crudActions = function (args) {
            var query = this.generateQuery();
            var promise = null;
            var pr = 'promise';
            var key = this.getKey(args.foreignKeyData &&
                Object.keys(args.foreignKeyData).length ? args.foreignKeyData :
                this.parent.getPrimaryKeyFieldNames());
            if (this.parent.dataSource && 'result' in this.parent.dataSource) {
                this.eventPromise(args, query, key);
            }
            switch (args.requestType) {
                case 'save':
                    promise = this.dataManager.update(key, args.data, null, this.generateQuery());
                    break;
            }
            args[pr] = promise;
            this.parent.notify(events.crudAction, args);
        };
        Data.prototype.saveChanges = function (changes, key) {
            var query = this.generateQuery().requiresCount();
            if ('result' in this.parent.dataSource) {
                var state = void 0;
                state = this.getStateEventArgument(query);
                var deff = new ej2_data_1.Deferred();
                var args = {
                    requestType: 'batchsave', changes: changes, key: key, query: query,
                    endEdit: deff.resolve
                };
                this.setState({ isPending: true, resolver: deff.resolve });
                this.parent.trigger(events.dataSourceChanged, args);
                return deff.promise;
            }
            else {
                var promise = this.dataManager.saveChanges(changes, key, null, this.generateQuery().requiresCount());
                return promise;
            }
        };
        Data.prototype.getKey = function (keys) {
            if (keys && keys.length) {
                return keys[0];
            }
            return undefined;
        };
        Data.prototype.isRemote = function () {
            return this.dataManager.dataSource.offline !== true && this.dataManager.dataSource.url !== undefined;
        };
        Data.prototype.addRows = function (e) {
            for (var i = e.records.length; i > 0; i--) {
                this.dataManager.dataSource.json.splice(e.toIndex, 0, e.records[i - 1]);
            }
        };
        Data.prototype.removeRows = function (e) {
            var json = this.dataManager.dataSource.json;
            this.dataManager.dataSource.json = json.filter(function (value, index) { return e.records.indexOf(value) === -1; });
        };
        Data.prototype.getColumnByField = function (field) {
            var col;
            return (this.parent.columnModel).some(function (column) {
                col = column;
                return column.field === field;
            }) && col;
        };
        Data.prototype.destroy = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.off(events.rowsAdded, this.addRows);
            this.parent.off(events.rowsRemoved, this.removeRows);
            this.parent.off(events.dataSourceModified, this.initDataManager);
            this.parent.off(events.dataSourceModified, this.destroy);
            this.parent.off(events.updateData, this.crudActions);
            this.parent.off(events.addDeleteAction, this.getData);
        };
        Data.prototype.getState = function () {
            return this.dataState;
        };
        Data.prototype.setState = function (state) {
            return this.dataState = state;
        };
        Data.prototype.getStateEventArgument = function (query) {
            var adaptr = new ej2_data_1.UrlAdaptor();
            var dm = new ej2_data_1.DataManager({ url: '', adaptor: new ej2_data_1.UrlAdaptor });
            var state = adaptr.processQuery(dm, query);
            var data = JSON.parse(state.data);
            var final = Object.assign(data, state.pvtData);
            return final;
        };
        Data.prototype.eventPromise = function (args, query, key) {
            var _this = this;
            var state;
            var dataArgs = args;
            state = this.getStateEventArgument(query);
            var def = new ej2_data_1.Deferred();
            var deff = new ej2_data_1.Deferred();
            if (args.requestType !== undefined && this.dataState.isDataChanged !== false) {
                state.action = args;
                if (args.requestType === 'save' || args.requestType === 'delete') {
                    var editArgs = args;
                    editArgs.key = key;
                    editArgs.state = state;
                    this.setState({ isPending: true, resolver: deff.resolve });
                    dataArgs.endEdit = deff.resolve;
                    this.parent.trigger(events.dataSourceChanged, editArgs);
                    deff.promise.then(function (e) {
                        _this.setState({ isPending: true, resolver: def.resolve, group: state.group, aggregates: state.aggregates });
                        _this.parent.trigger(events.dataStateChange, state);
                    });
                }
                else {
                    this.setState({ isPending: true, resolver: def.resolve, group: state.group, aggregates: state.aggregates });
                    this.parent.trigger(events.dataStateChange, state);
                }
            }
            else {
                this.setState({});
                def.resolve(this.parent.dataSource);
            }
            return def;
        };
        return Data;
    }());
    exports.Data = Data;
});
