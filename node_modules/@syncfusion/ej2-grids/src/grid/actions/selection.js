var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-data", "../base/util", "../base/constant", "../base/enum"], function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, ej2_data_1, util_1, events, enum_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Selection = (function () {
        function Selection(parent, selectionSettings, locator) {
            this.selectedRowIndexes = [];
            this.selectedRowCellIndexes = [];
            this.selectedRecords = [];
            this.preventFocus = false;
            this.isMultiShiftRequest = false;
            this.isMultiCtrlRequest = false;
            this.enableSelectMultiTouch = false;
            this.selectedRowState = {};
            this.totalRecordsCount = 0;
            this.chkAllCollec = [];
            this.isCheckedOnAdd = false;
            this.persistSelectedData = [];
            this.isCancelDeSelect = false;
            this.isPreventCellSelect = false;
            this.disableUI = false;
            this.parent = parent;
            this.selectionSettings = selectionSettings;
            this.factory = locator.getService('rendererFactory');
            this.focus = locator.getService('focus');
            this.addEventListener();
        }
        Selection.prototype.initializeSelection = function () {
            ej2_base_1.EventHandler.add(this.parent.getContent(), 'mousedown', this.mouseDownHandler, this);
        };
        Selection.prototype.onActionBegin = function (args, type) {
            this.parent.trigger(type, this.fDataUpdate(args));
        };
        Selection.prototype.fDataUpdate = function (args) {
            if (args.cellIndex || args.rowIndex) {
                var rowObj = this.getRowObj(ej2_base_2.isNullOrUndefined(args.rowIndex) ? ej2_base_2.isNullOrUndefined(args.cellIndex) ?
                    this.currentIndex : args.cellIndex.rowIndex : args.rowIndex);
                args.foreignKeyData = rowObj.foreignKeyData;
            }
            return args;
        };
        Selection.prototype.onActionComplete = function (args, type) {
            this.parent.trigger(type, this.fDataUpdate(args));
        };
        Selection.prototype.getModuleName = function () {
            return 'selection';
        };
        Selection.prototype.destroy = function () {
            this.hidePopUp();
            this.clearSelection();
            this.removeEventListener();
            ej2_base_1.EventHandler.remove(this.parent.getContent(), 'mousedown', this.mouseDownHandler);
        };
        Selection.prototype.isEditing = function () {
            return (this.parent.editSettings.mode === 'Normal' || (this.parent.editSettings.mode === 'Batch' &&
                this.parent.editModule.formObj && !this.parent.editModule.formObj.validate())) &&
                this.parent.isEdit && !this.parent.isPersistSelection;
        };
        Selection.prototype.getSelectedMovableRow = function (index) {
            var gObj = this.parent;
            if (gObj.getFrozenColumns()) {
                return gObj.getMovableRowByIndex(index);
            }
            return null;
        };
        Selection.prototype.selectRow = function (index, isToggle) {
            var gObj = this.parent;
            var selectedRow = gObj.getRowByIndex(index);
            var selectedMovableRow = this.getSelectedMovableRow(index);
            var selectData = gObj.getCurrentViewRecords()[index];
            if (!this.isRowType() || !selectedRow || this.isEditing()) {
                return;
            }
            var isRowSelected = selectedRow.hasAttribute('aria-selected');
            isToggle = !isToggle ? isToggle :
                !this.selectedRowIndexes.length ? false :
                    (this.selectedRowIndexes.length === 1 ? (index === this.selectedRowIndexes[0] ? true : false) : false);
            var args;
            var can = 'cancel';
            if (!isToggle) {
                args = {
                    data: selectData, rowIndex: index, isCtrlPressed: this.isMultiCtrlRequest,
                    isShiftPressed: this.isMultiShiftRequest, row: selectedRow,
                    previousRow: gObj.getRows()[this.prevRowIndex], previousRowIndex: this.prevRowIndex, target: this.target,
                    cancel: false
                };
                args = this.addMovableArgs(args, selectedMovableRow);
                this.onActionBegin(args, events.rowSelecting);
            }
            if (!ej2_base_2.isNullOrUndefined(args) && args[can] === true) {
                return;
            }
            this.clearRow();
            if (!isToggle) {
                this.updateRowSelection(selectedRow, index);
                if (gObj.getFrozenColumns()) {
                    this.updateRowSelection(selectedMovableRow, index);
                }
                gObj.selectedRowIndex = index;
            }
            this.updateRowProps(index);
            if (!isToggle) {
                args = {
                    data: selectData, rowIndex: index,
                    row: selectedRow, previousRow: gObj.getRows()[this.prevRowIndex],
                    previousRowIndex: this.prevRowIndex, target: this.target
                };
                args = this.addMovableArgs(args, selectedMovableRow);
                this.onActionComplete(args, events.rowSelected);
            }
        };
        Selection.prototype.addMovableArgs = function (targetObj, mRow) {
            if (this.parent.getFrozenColumns()) {
                var mObj = { mRow: mRow, previousMovRow: this.parent.getMovableRows()[this.prevRowIndex] };
                targetObj = __assign({}, targetObj, mObj);
            }
            return targetObj;
        };
        Selection.prototype.selectRowsByRange = function (startIndex, endIndex) {
            this.selectRows(this.getCollectionFromIndexes(startIndex, endIndex));
            this.parent.selectedRowIndex = endIndex;
        };
        Selection.prototype.selectRows = function (rowIndexes) {
            var gObj = this.parent;
            var rowIndex = !this.isSingleSel() ? rowIndexes[0] : rowIndexes[rowIndexes.length - 1];
            var selectedRow = gObj.getRowByIndex(rowIndex);
            var selectedMovableRow = this.getSelectedMovableRow(rowIndex);
            var frzCols = gObj.getFrozenColumns();
            var selectedData = gObj.getCurrentViewRecords()[rowIndexes[0]];
            var can = 'cancel';
            if (!this.isRowType() || this.isEditing()) {
                return;
            }
            var args = {
                rowIndexes: rowIndexes, row: selectedRow, rowIndex: rowIndex, target: this.target,
                prevRow: gObj.getRows()[this.prevRowIndex], previousRowIndex: this.prevRowIndex,
                isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest,
                data: selectedData, cancel: false
            };
            args = this.addMovableArgs(args, selectedMovableRow);
            this.onActionBegin(args, events.rowSelecting);
            if (!ej2_base_2.isNullOrUndefined(args) && args[can] === true) {
                return;
            }
            this.clearRow();
            if (!this.isSingleSel()) {
                for (var _i = 0, rowIndexes_1 = rowIndexes; _i < rowIndexes_1.length; _i++) {
                    var rowIdx = rowIndexes_1[_i];
                    this.updateRowSelection(gObj.getRowByIndex(rowIdx), rowIdx);
                    if (frzCols) {
                        this.updateRowSelection(gObj.getMovableRowByIndex(rowIdx), rowIdx);
                    }
                    this.updateRowProps(rowIndex);
                }
            }
            else {
                this.updateRowSelection(gObj.getRowByIndex(rowIndex), rowIndex);
                if (frzCols) {
                    this.updateRowSelection(gObj.getMovableRowByIndex(rowIndex), rowIndex);
                }
                this.updateRowProps(rowIndex);
            }
            args = {
                rowIndexes: rowIndexes, row: selectedRow, rowIndex: rowIndex, target: this.target,
                prevRow: gObj.getRows()[this.prevRowIndex], previousRowIndex: this.prevRowIndex,
                data: selectedData
            };
            args = this.addMovableArgs(args, selectedMovableRow);
            this.onActionComplete(args, events.rowSelected);
        };
        Selection.prototype.addRowsToSelection = function (rowIndexes) {
            var gObj = this.parent;
            var can = 'cancel';
            var selectedRow = !this.isSingleSel() ? gObj.getRowByIndex(rowIndexes[0]) :
                gObj.getRowByIndex(rowIndexes[rowIndexes.length - 1]);
            var selectedMovableRow = !this.isSingleSel() ? this.getSelectedMovableRow(rowIndexes[0]) :
                this.getSelectedMovableRow(rowIndexes[rowIndexes.length - 1]);
            var frzCols = gObj.getFrozenColumns();
            if (!this.isRowType() || this.isEditing()) {
                return;
            }
            var args;
            for (var _i = 0, rowIndexes_2 = rowIndexes; _i < rowIndexes_2.length; _i++) {
                var rowIndex = rowIndexes_2[_i];
                var rowObj = this.getRowObj(rowIndex);
                var isUnSelected = this.selectedRowIndexes.indexOf(rowIndex) > -1;
                gObj.selectedRowIndex = rowIndex;
                if (isUnSelected) {
                    this.rowDeselect(events.rowDeselecting, [rowIndex], [rowObj.data], [selectedRow], [rowObj.foreignKeyData]);
                    this.selectedRowIndexes.splice(this.selectedRowIndexes.indexOf(rowIndex), 1);
                    this.selectedRecords.splice(this.selectedRecords.indexOf(selectedRow), 1);
                    selectedRow.removeAttribute('aria-selected');
                    this.addRemoveClassesForRow(selectedRow, false, null, 'e-selectionbackground', 'e-active');
                    if (selectedMovableRow) {
                        this.selectedRecords.splice(this.selectedRecords.indexOf(selectedMovableRow), 1);
                        selectedMovableRow.removeAttribute('aria-selected');
                        this.addRemoveClassesForRow(selectedMovableRow, false, null, 'e-selectionbackground', 'e-active');
                    }
                    this.rowDeselect(events.rowDeselected, [rowIndex], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], [selectedMovableRow]);
                }
                else {
                    args = {
                        data: rowObj.data, rowIndex: rowIndex, row: selectedRow, target: this.target,
                        prevRow: gObj.getRows()[this.prevRowIndex], previousRowIndex: this.prevRowIndex,
                        isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest,
                        foreignKeyData: rowObj.foreignKeyData, cancel: false
                    };
                    args = this.addMovableArgs(args, selectedMovableRow);
                    this.onActionBegin(args, events.rowSelecting);
                    if (!ej2_base_2.isNullOrUndefined(args) && args[can] === true) {
                        return;
                    }
                    if (this.isSingleSel()) {
                        this.clearRow();
                    }
                    this.updateRowSelection(selectedRow, rowIndex);
                    if (frzCols) {
                        this.updateRowSelection(selectedMovableRow, rowIndex);
                    }
                }
                this.updateRowProps(rowIndex);
                if (!isUnSelected) {
                    args = {
                        data: rowObj.data, rowIndex: rowIndex, row: selectedRow, target: this.target,
                        prevRow: gObj.getRows()[this.prevRowIndex], previousRowIndex: this.prevRowIndex,
                        foreignKeyData: rowObj.foreignKeyData
                    };
                    args = this.addMovableArgs(args, selectedMovableRow);
                    this.onActionComplete(args, events.rowSelected);
                }
                if (this.isSingleSel()) {
                    break;
                }
            }
        };
        Selection.prototype.getCollectionFromIndexes = function (startIndex, endIndex) {
            var indexes = [];
            var _a = (startIndex < endIndex) ?
                { i: startIndex, max: endIndex } : { i: endIndex, max: startIndex }, i = _a.i, max = _a.max;
            for (; i <= max; i++) {
                indexes.push(i);
            }
            if (startIndex > endIndex) {
                indexes.reverse();
            }
            return indexes;
        };
        Selection.prototype.clearRow = function () {
            this.clearRowSelection();
            this.selectedRowIndexes = [];
            this.selectedRecords = [];
            this.parent.selectedRowIndex = -1;
            if (this.isSingleSel() && this.parent.isPersistSelection) {
                this.selectedRowState = {};
            }
        };
        Selection.prototype.updateRowProps = function (startIndex) {
            this.prevRowIndex = startIndex;
            this.isRowSelected = this.selectedRowIndexes.length && true;
        };
        Selection.prototype.updatePersistCollection = function (selectedRow, chkState) {
            var _this = this;
            if (this.parent.isPersistSelection && !ej2_base_2.isNullOrUndefined(selectedRow)) {
                var rowObj = this.getRowObj(selectedRow);
                var pKey_1 = rowObj.data ? rowObj.data[this.primaryKey] : null;
                if (pKey_1 === null) {
                    return;
                }
                rowObj.isSelected = chkState;
                if (chkState) {
                    this.selectedRowState[pKey_1] = chkState;
                    if (!this.persistSelectedData.some(function (data) { return data[_this.primaryKey] === pKey_1; })) {
                        this.persistSelectedData.push(rowObj.data);
                    }
                }
                else {
                    delete (this.selectedRowState[pKey_1]);
                    var index_1;
                    var isPresent = this.persistSelectedData.some(function (data, i) {
                        index_1 = i;
                        return data[_this.primaryKey] === pKey_1;
                    });
                    if (isPresent) {
                        this.persistSelectedData.splice(index_1, 1);
                    }
                }
            }
        };
        Selection.prototype.updateCheckBoxes = function (row, chkState) {
            if (!ej2_base_2.isNullOrUndefined(row)) {
                var chkBox = row.querySelector('.e-checkselect');
                if (!ej2_base_2.isNullOrUndefined(chkBox)) {
                    util_1.removeAddCboxClasses(chkBox.nextElementSibling, chkState);
                    if (ej2_base_2.isNullOrUndefined(this.checkedTarget) || (!ej2_base_2.isNullOrUndefined(this.checkedTarget)
                        && !this.checkedTarget.classList.contains('e-checkselectall'))) {
                        this.setCheckAllState();
                    }
                }
            }
        };
        Selection.prototype.updateRowSelection = function (selectedRow, startIndex) {
            if (!selectedRow) {
                return;
            }
            this.selectedRowIndexes.push(startIndex);
            var len = this.selectedRowIndexes.length;
            if (this.parent.getFrozenColumns() && len > 1) {
                if ((this.selectedRowIndexes[len - 2] === this.selectedRowIndexes[len - 1])) {
                    this.selectedRowIndexes.pop();
                }
            }
            this.selectedRecords.push(selectedRow);
            selectedRow.setAttribute('aria-selected', 'true');
            this.updatePersistCollection(selectedRow, true);
            this.updateCheckBoxes(selectedRow, true);
            this.addRemoveClassesForRow(selectedRow, true, null, 'e-selectionbackground', 'e-active');
            if (!this.preventFocus) {
                var target = this.focus.getPrevIndexes().cellIndex ?
                    selectedRow.cells[this.focus.getPrevIndexes().cellIndex] :
                    selectedRow.querySelector('.e-selectionbackground:not(.e-hide)');
                if (!target) {
                    return;
                }
                this.focus.onClick({ target: target }, true);
            }
        };
        Selection.prototype.clearSelection = function () {
            if (!this.parent.isPersistSelection || (this.parent.isPersistSelection && !this.parent.isEdit) ||
                (!ej2_base_2.isNullOrUndefined(this.checkedTarget) && this.checkedTarget.classList.contains('e-checkselectall'))) {
                var span = this.parent.element.querySelector('.e-gridpopup').querySelector('span');
                if (span.classList.contains('e-rowselect')) {
                    span.classList.remove('e-spanclicked');
                }
                this.clearRowSelection();
                this.clearCellSelection();
                this.enableSelectMultiTouch = false;
            }
        };
        Selection.prototype.clearRowSelection = function () {
            var _this = this;
            if (this.isRowSelected) {
                var gObj = this.parent;
                var rows = this.parent.getDataRows();
                var data = [];
                var row = [];
                var mRow = [];
                var rowIndex = [];
                var frzCols = gObj.getFrozenColumns();
                var foreignKeyData = [];
                var currentViewData = this.parent.getCurrentViewRecords();
                for (var i = 0, len = this.selectedRowIndexes.length; i < len; i++) {
                    var currentRow = this.parent.getDataRows()[this.selectedRowIndexes[i]];
                    var rowObj = this.getRowObj(currentRow);
                    if (rowObj) {
                        data.push(rowObj.data);
                        row.push(currentRow);
                        rowIndex.push(this.selectedRowIndexes[i]);
                        foreignKeyData.push(rowObj.foreignKeyData);
                    }
                    if (frzCols) {
                        mRow.push(gObj.getMovableRows()[this.selectedRowIndexes[i]]);
                    }
                }
                this.rowDeselect(events.rowDeselecting, rowIndex, data, row, foreignKeyData, mRow);
                if (this.isCancelDeSelect === true) {
                    return;
                }
                rows.filter(function (record) { return record.hasAttribute('aria-selected'); }).forEach(function (ele) {
                    if (!_this.disableUI) {
                        ele.removeAttribute('aria-selected');
                        _this.addRemoveClassesForRow(ele, false, true, 'e-selectionbackground', 'e-active');
                    }
                    _this.updatePersistCollection(ele, false);
                    _this.updateCheckBoxes(ele);
                });
                for (var i = 0, len = this.selectedRowIndexes.length; i < len; i++) {
                    var movableRow = this.getSelectedMovableRow(this.selectedRowIndexes[i]);
                    if (movableRow) {
                        if (!this.disableUI) {
                            movableRow.removeAttribute('aria-selected');
                            this.addRemoveClassesForRow(movableRow, false, true, 'e-selectionbackground', 'e-active');
                        }
                        this.updatePersistCollection(movableRow, false);
                    }
                }
                this.selectedRowIndexes = [];
                this.selectedRecords = [];
                this.isRowSelected = false;
                this.parent.selectedRowIndex = -1;
                this.rowDeselect(events.rowDeselected, rowIndex, data, row, foreignKeyData, mRow);
            }
        };
        Selection.prototype.rowDeselect = function (type, rowIndex, data, row, foreignKeyData, mRow) {
            var cancl = 'cancel';
            this.updatePersistCollection(row[0], false);
            var rowDeselectObj = { rowIndex: rowIndex, data: data, row: row, foreignKeyData: foreignKeyData, cancel: false };
            this.parent.trigger(type, this.parent.getFrozenColumns() ? __assign({}, rowDeselectObj, { mRow: mRow }) : rowDeselectObj);
            this.isCancelDeSelect = rowDeselectObj[cancl];
            this.updateCheckBoxes(row[0]);
        };
        Selection.prototype.getRowObj = function (row) {
            if (row === void 0) { row = this.currentIndex; }
            if (ej2_base_2.isNullOrUndefined(row)) {
                return {};
            }
            if (typeof row === 'number') {
                row = this.parent.getRowByIndex(row);
            }
            if (row) {
                return this.parent.getRowObjectFromUID(row.getAttribute('data-uid')) || {};
            }
            return {};
        };
        Selection.prototype.getSelectedMovableCell = function (cellIndex) {
            var gObj = this.parent;
            var frzCols = gObj.getFrozenColumns();
            if (frzCols) {
                if (cellIndex.cellIndex >= frzCols) {
                    return gObj.getMovableCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex));
                }
                return null;
            }
            return null;
        };
        Selection.prototype.selectCell = function (cellIndex, isToggle) {
            if (!this.isCellType()) {
                return;
            }
            var gObj = this.parent;
            var selectedCell = this.getSelectedMovableCell(cellIndex);
            if (!selectedCell) {
                selectedCell = gObj.getCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex));
            }
            var selectedTable;
            var cIdx;
            this.currentIndex = cellIndex.rowIndex;
            var args;
            var cncl = 'cancel';
            var selectedData = gObj.getCurrentViewRecords()[this.currentIndex];
            if (!this.isCellType() || !selectedCell || this.isEditing()) {
                return;
            }
            var isCellSelected = selectedCell.classList.contains('e-cellselectionbackground');
            isToggle = !isToggle ? isToggle : (!ej2_base_2.isUndefined(this.prevCIdxs) &&
                cellIndex.rowIndex === this.prevCIdxs.rowIndex && cellIndex.cellIndex === this.prevCIdxs.cellIndex &&
                isCellSelected);
            if (!isToggle) {
                args = {
                    data: selectedData, cellIndex: cellIndex, currentCell: selectedCell,
                    isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest, previousRowCellIndex: this.prevECIdxs,
                    previousRowCell: this.prevECIdxs ?
                        this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined,
                    cancel: false
                };
                this.onActionBegin(args, events.cellSelecting);
            }
            if (!ej2_base_2.isNullOrUndefined(args) && args[cncl] === true) {
                return;
            }
            this.clearCell();
            if (!isToggle) {
                this.updateCellSelection(selectedCell, cellIndex.rowIndex, cellIndex.cellIndex);
            }
            this.updateCellProps(cellIndex, cellIndex);
            if (!isToggle) {
                this.onActionComplete({
                    data: selectedData, cellIndex: cellIndex, currentCell: selectedCell,
                    previousRowCellIndex: this.prevECIdxs, selectedRowCellIndex: this.selectedRowCellIndexes,
                    previousRowCell: this.prevECIdxs ?
                        this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined
                }, events.cellSelected);
            }
        };
        Selection.prototype.getCellIndex = function (rIdx, cIdx) {
            return (this.parent.getFrozenColumns() ? (cIdx >= this.parent.getFrozenColumns() ? this.parent.getMovableCellFromIndex(rIdx, cIdx)
                : this.parent.getCellFromIndex(rIdx, cIdx)) : this.parent.getCellFromIndex(rIdx, cIdx));
        };
        Selection.prototype.selectCellsByRange = function (startIndex, endIndex) {
            if (!this.isCellType()) {
                return;
            }
            var gObj = this.parent;
            var selectedCell = this.getSelectedMovableCell(startIndex);
            var frzCols = gObj.getFrozenColumns();
            if (!selectedCell) {
                selectedCell = gObj.getCellFromIndex(startIndex.rowIndex, startIndex.cellIndex);
            }
            var min;
            var max;
            var stIndex = startIndex;
            var edIndex = endIndex = endIndex ? endIndex : startIndex;
            var cellIndexes;
            var cancl = 'cancel';
            this.currentIndex = startIndex.rowIndex;
            var selectedData = gObj.getCurrentViewRecords()[this.currentIndex];
            if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {
                return;
            }
            var args = {
                data: selectedData, cellIndex: startIndex, currentCell: selectedCell,
                isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest, previousRowCellIndex: this.prevECIdxs,
                previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined
            };
            this.onActionBegin(args, events.cellSelecting);
            if (!ej2_base_2.isNullOrUndefined(args) && args[cancl] === true) {
                return;
            }
            this.clearCell();
            if (startIndex.rowIndex > endIndex.rowIndex) {
                var temp = startIndex;
                startIndex = endIndex;
                endIndex = temp;
            }
            for (var i = startIndex.rowIndex; i <= endIndex.rowIndex; i++) {
                if (this.selectionSettings.cellSelectionMode !== 'Box') {
                    min = i === startIndex.rowIndex ? (startIndex.cellIndex) : 0;
                    max = i === endIndex.rowIndex ? (endIndex.cellIndex) : this.getLastColIndex(i);
                }
                else {
                    min = startIndex.cellIndex;
                    max = endIndex.cellIndex;
                }
                cellIndexes = [];
                for (var j = min < max ? min : max, len = min > max ? min : max; j <= len; j++) {
                    if (frzCols) {
                        if (j < frzCols) {
                            selectedCell = gObj.getCellFromIndex(i, j);
                        }
                        else {
                            selectedCell = gObj.getMovableCellFromIndex(i, j);
                        }
                    }
                    else {
                        selectedCell = gObj.getCellFromIndex(i, j);
                    }
                    if (!selectedCell) {
                        continue;
                    }
                    cellIndexes.push(j);
                    this.updateCellSelection(selectedCell);
                    this.addAttribute(selectedCell);
                }
                this.selectedRowCellIndexes.push({ rowIndex: i, cellIndexes: cellIndexes });
            }
            this.updateCellProps(stIndex, edIndex);
            this.onActionComplete({
                data: selectedData, cellIndex: startIndex, currentCell: selectedCell,
                previousRowCellIndex: this.prevECIdxs, selectedRowCellIndex: this.selectedRowCellIndexes,
                previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined
            }, events.cellSelected);
        };
        Selection.prototype.selectCells = function (rowCellIndexes) {
            if (!this.isCellType()) {
                return;
            }
            var gObj = this.parent;
            var selectedCell = this.getSelectedMovableCell(rowCellIndexes[0]);
            var frzCols = gObj.getFrozenColumns();
            if (!selectedCell) {
                selectedCell = gObj.getCellFromIndex(rowCellIndexes[0].rowIndex, rowCellIndexes[0].cellIndexes[0]);
            }
            this.currentIndex = rowCellIndexes[0].rowIndex;
            var selectedData = gObj.getCurrentViewRecords()[this.currentIndex];
            if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {
                return;
            }
            this.onActionBegin({
                data: selectedData, cellIndex: rowCellIndexes[0].cellIndexes[0],
                currentCell: selectedCell, isCtrlPressed: this.isMultiCtrlRequest,
                isShiftPressed: this.isMultiShiftRequest, previousRowCellIndex: this.prevECIdxs,
                previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined
            }, events.cellSelecting);
            for (var i = 0, len = rowCellIndexes.length; i < len; i++) {
                for (var j = 0, cellLen = rowCellIndexes[i].cellIndexes.length; j < cellLen; j++) {
                    if (frzCols) {
                        if (rowCellIndexes[i].cellIndexes[j] < frzCols) {
                            selectedCell = gObj.getCellFromIndex(rowCellIndexes[i].rowIndex, rowCellIndexes[i].cellIndexes[j]);
                        }
                        else {
                            selectedCell = gObj.getMovableCellFromIndex(rowCellIndexes[i].rowIndex, rowCellIndexes[i].cellIndexes[j]);
                        }
                    }
                    else {
                        selectedCell = gObj.getCellFromIndex(rowCellIndexes[i].rowIndex, rowCellIndexes[i].cellIndexes[j]);
                    }
                    if (!selectedCell) {
                        continue;
                    }
                    this.updateCellSelection(selectedCell);
                    this.addAttribute(selectedCell);
                    this.addRowCellIndex({ rowIndex: rowCellIndexes[i].rowIndex, cellIndex: rowCellIndexes[i].cellIndexes[j] });
                }
            }
            this.updateCellProps({ rowIndex: rowCellIndexes[0].rowIndex, cellIndex: rowCellIndexes[0].cellIndexes[0] }, { rowIndex: rowCellIndexes[0].rowIndex, cellIndex: rowCellIndexes[0].cellIndexes[0] });
            this.onActionComplete({
                data: selectedData, cellIndex: rowCellIndexes[0].cellIndexes[0],
                currentCell: selectedCell,
                previousRowCellIndex: this.prevECIdxs, selectedRowCellIndex: this.selectedRowCellIndexes,
                previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined
            }, events.cellSelected);
        };
        Selection.prototype.addCellsToSelection = function (cellIndexes) {
            if (!this.isCellType()) {
                return;
            }
            var gObj = this.parent;
            var selectedTable;
            var cIdx;
            var selectedCell;
            var frzCols = gObj.getFrozenColumns();
            var index;
            this.currentIndex = cellIndexes[0].rowIndex;
            var selectedData = gObj.getCurrentViewRecords()[this.currentIndex];
            if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {
                return;
            }
            var rowObj;
            if (frzCols && cellIndexes[0].cellIndex >= frzCols) {
                rowObj = gObj.getMovableRowsObject()[cellIndexes[0].rowIndex];
            }
            else {
                rowObj = this.getRowObj(cellIndexes[0].rowIndex);
            }
            var foreignKeyData = [];
            for (var _i = 0, cellIndexes_1 = cellIndexes; _i < cellIndexes_1.length; _i++) {
                var cellIndex = cellIndexes_1[_i];
                for (var i = 0, len = this.selectedRowCellIndexes.length; i < len; i++) {
                    if (this.selectedRowCellIndexes[i].rowIndex === cellIndex.rowIndex) {
                        index = i;
                        break;
                    }
                }
                selectedCell = this.getSelectedMovableCell(cellIndex);
                if (!selectedCell) {
                    selectedCell = gObj.getCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex));
                }
                foreignKeyData.push(rowObj.cells[frzCols && cellIndexes[0].cellIndex >= frzCols
                    ? cellIndex.cellIndex - frzCols : cellIndex.cellIndex].foreignKeyData);
                var args = {
                    data: selectedData, cellIndex: cellIndexes[0],
                    isShiftPressed: this.isMultiShiftRequest, previousRowCellIndex: this.prevECIdxs,
                    currentCell: selectedCell, isCtrlPressed: this.isMultiCtrlRequest,
                    previousRowCell: this.prevECIdxs ?
                        gObj.getCellFromIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined,
                };
                var isUnSelected = index > -1;
                if (isUnSelected) {
                    var selectedCellIdx = this.selectedRowCellIndexes[index].cellIndexes;
                    if (selectedCellIdx.indexOf(cellIndex.cellIndex) > -1) {
                        this.cellDeselect(events.cellDeselecting, [{ rowIndex: cellIndex.rowIndex, cellIndexes: [cellIndex.cellIndex] }], selectedData, [selectedCell], foreignKeyData);
                        selectedCellIdx.splice(selectedCellIdx.indexOf(cellIndex.cellIndex), 1);
                        selectedCell.classList.remove('e-cellselectionbackground');
                        selectedCell.removeAttribute('aria-selected');
                        this.cellDeselect(events.cellDeselected, [{ rowIndex: cellIndex.rowIndex, cellIndexes: [cellIndex.cellIndex] }], selectedData, [selectedCell], foreignKeyData);
                    }
                    else {
                        isUnSelected = false;
                        this.onActionBegin(args, events.cellSelecting);
                        this.addRowCellIndex({ rowIndex: cellIndex.rowIndex, cellIndex: cellIndex.cellIndex });
                        this.updateCellSelection(selectedCell);
                        this.addAttribute(selectedCell);
                    }
                }
                else {
                    this.onActionBegin(args, events.cellSelecting);
                    this.updateCellSelection(selectedCell, cellIndex.rowIndex, cellIndex.cellIndex);
                }
                this.updateCellProps(cellIndex, cellIndex);
                if (!isUnSelected) {
                    this.onActionComplete({
                        data: selectedData, cellIndex: cellIndexes[0], currentCell: selectedCell,
                        previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) :
                            undefined, previousRowCellIndex: this.prevECIdxs, selectedRowCellIndex: this.selectedRowCellIndexes
                    }, events.cellSelected);
                }
            }
        };
        Selection.prototype.getColIndex = function (rowIndex, index) {
            var cells;
            var frzCols = this.parent.getFrozenColumns();
            if (frzCols) {
                if (index >= frzCols) {
                    cells = this.parent.getMovableDataRows()[rowIndex].querySelectorAll('td.e-rowcell');
                }
            }
            if (!cells) {
                cells = this.parent.getDataRows()[rowIndex].querySelectorAll('td.e-rowcell');
            }
            for (var m = 0; m < cells.length; m++) {
                var colIndex = parseInt(cells[m].getAttribute('aria-colindex'), 10);
                if (colIndex === index) {
                    if (frzCols) {
                        if (index >= frzCols) {
                            m += frzCols;
                        }
                    }
                    return m;
                }
            }
            return -1;
        };
        Selection.prototype.getLastColIndex = function (rowIndex) {
            var cells = this.parent.getFrozenColumns() ? this.parent.getMovableDataRows()[rowIndex].querySelectorAll('td.e-rowcell')
                : this.parent.getDataRows()[rowIndex].querySelectorAll('td.e-rowcell');
            return parseInt(cells[cells.length - 1].getAttribute('aria-colindex'), 10);
        };
        Selection.prototype.clearCell = function () {
            this.clearCellSelection();
        };
        Selection.prototype.cellDeselect = function (type, cellIndexes, data, cells, foreignKeyData) {
            var cancl = 'cancel';
            if (cells[0] && cells[0].classList.contains('e-gridchkbox')) {
                this.updateCheckBoxes(ej2_base_3.closest(cells[0], 'tr'));
            }
            var args = {
                cells: cells, data: data, cellIndexes: cellIndexes, foreignKeyData: foreignKeyData, cancel: false
            };
            this.parent.trigger(type, args);
            this.isPreventCellSelect = args[cancl];
        };
        Selection.prototype.updateCellSelection = function (selectedCell, rowIndex, cellIndex) {
            if (!ej2_base_2.isNullOrUndefined(rowIndex)) {
                this.addRowCellIndex({ rowIndex: rowIndex, cellIndex: cellIndex });
            }
            selectedCell.classList.add('e-cellselectionbackground');
            if (selectedCell.classList.contains('e-gridchkbox')) {
                this.updateCheckBoxes(ej2_base_3.closest(selectedCell, 'tr'), true);
            }
            this.addAttribute(selectedCell);
        };
        Selection.prototype.addAttribute = function (cell) {
            this.target = cell;
            if (!ej2_base_2.isNullOrUndefined(cell)) {
                cell.setAttribute('aria-selected', 'true');
                if (!this.preventFocus) {
                    this.focus.onClick({ target: cell }, true);
                }
            }
        };
        Selection.prototype.updateCellProps = function (startIndex, endIndex) {
            this.prevCIdxs = startIndex;
            this.prevECIdxs = endIndex;
            this.isCellSelected = this.selectedRowCellIndexes.length && true;
        };
        Selection.prototype.addRowCellIndex = function (rowCellIndex) {
            var isRowAvail;
            var index;
            for (var i = 0, len = this.selectedRowCellIndexes.length; i < len; i++) {
                if (this.selectedRowCellIndexes[i].rowIndex === rowCellIndex.rowIndex) {
                    isRowAvail = true;
                    index = i;
                    break;
                }
            }
            if (isRowAvail) {
                if (this.selectedRowCellIndexes[index].cellIndexes.indexOf(rowCellIndex.cellIndex) < 0) {
                    this.selectedRowCellIndexes[index].cellIndexes.push(rowCellIndex.cellIndex);
                }
            }
            else {
                this.selectedRowCellIndexes.push({ rowIndex: rowCellIndex.rowIndex, cellIndexes: [rowCellIndex.cellIndex] });
            }
        };
        Selection.prototype.clearCellSelection = function () {
            if (this.isCellSelected) {
                var gObj = this.parent;
                var selectedCells = this.getSelectedCellsElement();
                var rowCell = this.selectedRowCellIndexes;
                var data = [];
                var cells = [];
                var foreignKeyData = [];
                var currentViewData = gObj.getCurrentViewRecords();
                var selectedTable = void 0;
                var frzCols = gObj.getFrozenColumns();
                for (var i = 0, len = rowCell.length; i < len; i++) {
                    data.push(currentViewData[rowCell[i].rowIndex]);
                    var rowObj = this.getRowObj(rowCell[i].rowIndex);
                    for (var j = 0, cLen = rowCell[i].cellIndexes.length; j < cLen; j++) {
                        if (frzCols) {
                            if (rowCell[i].cellIndexes[j] < frzCols) {
                                cells.push(gObj.getCellFromIndex(rowCell[i].rowIndex, rowCell[i].cellIndexes[j]));
                            }
                            else {
                                cells.push(gObj.getMovableCellFromIndex(rowCell[i].rowIndex, rowCell[i].cellIndexes[j]));
                            }
                        }
                        else {
                            foreignKeyData.push(rowObj.cells[rowCell[i].cellIndexes[j]].foreignKeyData);
                            cells.push(gObj.getCellFromIndex(rowCell[i].rowIndex, rowCell[i].cellIndexes[j]));
                        }
                    }
                }
                this.cellDeselect(events.cellDeselecting, rowCell, data, cells, foreignKeyData);
                if (this.isPreventCellSelect === true) {
                    return;
                }
                for (var i = 0, len = selectedCells.length; i < len; i++) {
                    selectedCells[i].classList.remove('e-cellselectionbackground');
                    selectedCells[i].removeAttribute('aria-selected');
                }
                this.selectedRowCellIndexes = [];
                this.isCellSelected = false;
                this.cellDeselect(events.cellDeselected, rowCell, data, cells, foreignKeyData);
            }
        };
        Selection.prototype.getSelectedCellsElement = function () {
            var gObj = this.parent;
            var rows = gObj.getDataRows();
            var mRows;
            if (gObj.getFrozenColumns()) {
                mRows = gObj.getMovableDataRows();
                rows = gObj.addMovableRows(rows, mRows);
            }
            var cells = [];
            for (var i = 0, len = rows.length; i < len; i++) {
                cells = cells.concat([].slice.call(rows[i].querySelectorAll('.e-cellselectionbackground')));
            }
            return cells;
        };
        Selection.prototype.mouseMoveHandler = function (e) {
            e.preventDefault();
            var gBRect = this.parent.element.getBoundingClientRect();
            var x1 = this.x;
            var y1 = this.y;
            var position = util_1.getPosition(e);
            var x2 = position.x - gBRect.left;
            var y2 = position.y - gBRect.top;
            var tmp;
            var target = ej2_base_3.closest(e.target, 'tr');
            this.isDragged = true;
            if (!this.isCellDrag) {
                if (!target) {
                    target = ej2_base_3.closest(document.elementFromPoint(this.parent.element.offsetLeft + 2, e.clientY), 'tr');
                }
                if (x1 > x2) {
                    tmp = x2;
                    x2 = x1;
                    x1 = tmp;
                }
                if (y1 > y2) {
                    tmp = y2;
                    y2 = y1;
                    y1 = tmp;
                }
                this.element.style.left = x1 + 'px';
                this.element.style.top = y1 + 'px';
                this.element.style.width = x2 - x1 + 'px';
                this.element.style.height = y2 - y1 + 'px';
            }
            if (target && !e.ctrlKey && !e.shiftKey) {
                var rowIndex = parseInt(target.getAttribute('aria-rowindex'), 10);
                if (!this.isCellDrag) {
                    this.selectRowsByRange(this.startIndex, rowIndex);
                }
                else {
                    var td = util_1.parentsUntil(e.target, 'e-rowcell');
                    if (td) {
                        this.selectLikeExcel(rowIndex, parseInt(td.getAttribute('aria-colindex'), 10));
                    }
                }
            }
        };
        Selection.prototype.selectLikeExcel = function (rowIndex, cellIndex) {
            this.clearCellSelection();
            this.selectCellsByRange({ rowIndex: this.startIndex, cellIndex: this.startCellIndex }, { rowIndex: rowIndex, cellIndex: cellIndex });
        };
        Selection.prototype.mouseUpHandler = function (e) {
            document.body.classList.remove('e-disableuserselect');
            if (this.element) {
                ej2_base_3.remove(this.element);
            }
            ej2_base_1.EventHandler.remove(this.parent.getContent(), 'mousemove', this.mouseMoveHandler);
            ej2_base_1.EventHandler.remove(document.body, 'mouseup', this.mouseUpHandler);
            this.isDragged = false;
        };
        Selection.prototype.mouseDownHandler = function (e) {
            var target = e.target;
            var gObj = this.parent;
            var isDrag;
            var gridElement = util_1.parentsUntil(target, 'e-grid');
            if (gridElement && gridElement.id !== gObj.element.id) {
                return;
            }
            if (e.shiftKey || e.ctrlKey) {
                e.preventDefault();
            }
            if (target.classList.contains('e-rowcell') && !e.shiftKey && !e.ctrlKey) {
                if (gObj.selectionSettings.cellSelectionMode === 'Box' && !this.isRowType() && !this.isSingleSel()) {
                    this.isCellDrag = true;
                    isDrag = true;
                }
                else if (gObj.allowRowDragAndDrop) {
                    if (!this.isRowType() || this.isSingleSel() || ej2_base_3.closest(target, 'td').classList.contains('e-selectionbackground')) {
                        this.isDragged = false;
                        return;
                    }
                    isDrag = true;
                    this.element = ej2_base_3.createElement('div', { className: 'e-griddragarea' });
                    gObj.getContent().appendChild(this.element);
                }
                if (isDrag) {
                    var tr = ej2_base_3.closest(e.target, 'tr');
                    this.startIndex = parseInt(tr.getAttribute('aria-rowindex'), 10);
                    this.startCellIndex = parseInt(util_1.parentsUntil(target, 'e-rowcell').getAttribute('aria-colindex'), 10);
                    document.body.classList.add('e-disableuserselect');
                    var gBRect = gObj.element.getBoundingClientRect();
                    var postion = util_1.getPosition(e);
                    this.x = postion.x - gBRect.left;
                    this.y = postion.y - gBRect.top;
                    ej2_base_1.EventHandler.add(gObj.getContent(), 'mousemove', this.mouseMoveHandler, this);
                    ej2_base_1.EventHandler.add(document.body, 'mouseup', this.mouseUpHandler, this);
                }
            }
        };
        Selection.prototype.clearSelAfterRefresh = function (e) {
            if (e.requestType !== 'virtualscroll' && !this.parent.isPersistSelection) {
                this.clearSelection();
            }
        };
        Selection.prototype.addEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.on(events.initialEnd, this.initializeSelection, this);
            this.parent.on(events.rowSelectionComplete, this.onActionComplete, this);
            this.parent.on(events.cellSelectionComplete, this.onActionComplete, this);
            this.parent.on(events.inBoundModelChanged, this.onPropertyChanged, this);
            this.parent.on(events.cellFocused, this.onCellFocused, this);
            this.parent.on(events.beforeFragAppend, this.clearSelAfterRefresh, this);
            this.parent.on(events.columnPositionChanged, this.columnPositionChanged, this);
            this.parent.on(events.contentReady, this.initialEnd, this);
            this.actionBeginFunction = this.actionBegin.bind(this);
            this.actionCompleteFunction = this.actionComplete.bind(this);
            this.parent.addEventListener(events.actionBegin, this.actionBeginFunction);
            this.parent.addEventListener(events.actionComplete, this.actionCompleteFunction);
            this.parent.on(events.rowsRemoved, this.rowsRemoved, this);
            this.parent.on(events.headerRefreshed, this.refreshHeader, this);
            this.addEventListener_checkbox();
        };
        Selection.prototype.removeEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.off(events.initialEnd, this.initializeSelection);
            this.parent.off(events.rowSelectionComplete, this.onActionComplete);
            this.parent.off(events.cellSelectionComplete, this.onActionComplete);
            this.parent.off(events.inBoundModelChanged, this.onPropertyChanged);
            this.parent.off(events.cellFocused, this.onCellFocused);
            this.parent.off(events.beforeFragAppend, this.clearSelAfterRefresh);
            this.parent.off(events.columnPositionChanged, this.columnPositionChanged);
            this.parent.removeEventListener(events.actionBegin, this.actionBeginFunction);
            this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunction);
            this.parent.off(events.rowsRemoved, this.rowsRemoved);
            this.parent.off(events.headerRefreshed, this.refreshHeader);
            this.removeEventListener_checkbox();
        };
        Selection.prototype.columnPositionChanged = function () {
            if (!this.parent.isPersistSelection) {
                this.clearSelection();
            }
        };
        Selection.prototype.refreshHeader = function () {
            this.setCheckAllState();
        };
        Selection.prototype.rowsRemoved = function (e) {
            for (var i = 0; i < e.records.length; i++) {
                delete (this.selectedRowState[e.records[i][this.primaryKey]]);
                --this.totalRecordsCount;
            }
            this.setCheckAllState();
        };
        ;
        Selection.prototype.beforeFragAppend = function (e) {
            if (e.requestType !== 'virtualscroll' && !this.parent.isPersistSelection) {
                this.clearSelection();
            }
        };
        ;
        Selection.prototype.getCheckAllBox = function () {
            return this.parent.getHeaderContent().querySelector('.e-checkselectall');
        };
        Selection.prototype.onPropertyChanged = function (e) {
            if (e.module !== this.getModuleName()) {
                return;
            }
            var gObj = this.parent;
            if (!ej2_base_2.isNullOrUndefined(e.properties.type) && this.selectionSettings.type === 'Single') {
                if (this.selectedRowCellIndexes.length > 1) {
                    this.clearCellSelection();
                }
                if (this.selectedRowIndexes.length > 1) {
                    this.clearRowSelection();
                }
                this.enableSelectMultiTouch = false;
                this.hidePopUp();
            }
            if (!ej2_base_2.isNullOrUndefined(e.properties.mode) ||
                !ej2_base_2.isNullOrUndefined(e.properties.cellSelectionMode)) {
                this.clearSelection();
            }
            this.checkBoxSelectionChanged();
            this.initPerisistSelection();
        };
        Selection.prototype.hidePopUp = function () {
            if (this.parent.element.querySelector('.e-gridpopup').querySelectorAll('.e-rowselect').length) {
                this.parent.element.querySelector('.e-gridpopup').style.display = 'none';
            }
        };
        Selection.prototype.initialEnd = function () {
            this.parent.off(events.contentReady, this.initialEnd);
            this.selectRow(this.parent.selectedRowIndex);
        };
        Selection.prototype.checkBoxSelectionChanged = function () {
            this.parent.off(events.contentReady, this.checkBoxSelectionChanged);
            var gobj = this.parent;
            var checkboxColumn = gobj.getColumns().filter(function (col) { return col.type === 'checkbox'; });
            if (checkboxColumn.length > 0) {
                gobj.isCheckBoxSelection = true;
                this.chkField = checkboxColumn[0].field;
                this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;
                if (ej2_base_2.isNullOrUndefined(this.totalRecordsCount)) {
                    this.totalRecordsCount = this.parent.getCurrentViewRecords().length;
                }
                if (this.isSingleSel()) {
                    gobj.selectionSettings.type = 'Multiple';
                    gobj.dataBind();
                }
                else {
                    this.initPerisistSelection();
                }
            }
            if (!gobj.isCheckBoxSelection) {
                this.chkField = null;
                this.initPerisistSelection();
            }
        };
        Selection.prototype.initPerisistSelection = function () {
            var gobj = this.parent;
            if (this.parent.selectionSettings.persistSelection && this.parent.getPrimaryKeyFieldNames().length > 0) {
                gobj.isPersistSelection = true;
                this.ensureCheckboxFieldSelection();
            }
            else if (this.parent.getPrimaryKeyFieldNames().length > 0) {
                gobj.isPersistSelection = false;
                this.ensureCheckboxFieldSelection();
            }
            else {
                gobj.isPersistSelection = false;
                this.selectedRowState = {};
            }
        };
        Selection.prototype.ensureCheckboxFieldSelection = function () {
            var gobj = this.parent;
            this.primaryKey = this.parent.getPrimaryKeyFieldNames()[0];
            if (!gobj.enableVirtualization && this.chkField
                && ((gobj.isPersistSelection && Object.keys(this.selectedRowState).length === 0) ||
                    !gobj.isPersistSelection)) {
                var data = this.parent.getDataModule();
                var query = new ej2_data_1.Query().where(this.chkField, 'equal', true);
                var dataManager = data.getData({}, query);
                var proxy_1 = this;
                this.parent.showSpinner();
                dataManager.then(function (e) {
                    proxy_1.dataSuccess(e.result);
                    proxy_1.refreshPersistSelection();
                    proxy_1.parent.hideSpinner();
                });
            }
        };
        Selection.prototype.dataSuccess = function (res) {
            for (var i = 0; i < res.length; i++) {
                if (ej2_base_2.isNullOrUndefined(this.selectedRowState[res[i][this.primaryKey]]) && res[i][this.chkField]) {
                    this.selectedRowState[res[i][this.primaryKey]] = res[i][this.chkField];
                }
            }
            this.persistSelectedData = res;
        };
        Selection.prototype.setRowSelection = function (state) {
            if (!this.parent.getDataModule().isRemote()) {
                if (state) {
                    for (var _i = 0, _a = this.getData(); _i < _a.length; _i++) {
                        var data = _a[_i];
                        this.selectedRowState[data[this.primaryKey]] = true;
                    }
                }
                else {
                    this.selectedRowState = {};
                }
            }
        };
        Selection.prototype.getData = function () {
            return this.parent.getDataModule().dataManager.dataSource.json;
        };
        Selection.prototype.refreshPersistSelection = function () {
            var rows = this.parent.getRows();
            if (rows.length > 0 && (this.parent.isPersistSelection || this.chkField)) {
                var indexes = [];
                for (var j = 0; j < rows.length; j++) {
                    var rowObj = this.getRowObj(rows[j]);
                    var pKey = rowObj ? rowObj.data[this.primaryKey] : null;
                    if (pKey === null) {
                        return;
                    }
                    var checkState = void 0;
                    var chkBox = rows[j].querySelector('.e-checkselect');
                    if (this.selectedRowState[pKey] || (this.parent.checkAllRows === 'Check' && this.chkAllCollec.indexOf(pKey) < 0)
                        || (this.parent.checkAllRows === 'Uncheck' && this.chkAllCollec.indexOf(pKey) > 0)
                        || (this.parent.checkAllRows === 'Intermediate' && !ej2_base_2.isNullOrUndefined(this.chkField) && rowObj.data[this.chkField])) {
                        indexes.push(parseInt(rows[j].getAttribute('aria-rowindex'), 10));
                        checkState = true;
                    }
                    else {
                        checkState = false;
                        if (this.checkedTarget !== chkBox && this.parent.isCheckBoxSelection) {
                            util_1.removeAddCboxClasses(chkBox.nextElementSibling, checkState);
                        }
                    }
                    this.updatePersistCollection(rows[j], checkState);
                }
                this.isSingleSel() && indexes.length > 0 ? this.selectRow(indexes[0], true) : this.selectRows(indexes);
            }
            if (this.parent.isCheckBoxSelection && this.parent.getCurrentViewRecords().length > 0) {
                this.setCheckAllState();
            }
        };
        Selection.prototype.actionBegin = function (e) {
            if (e.requestType === 'save' && this.parent.isPersistSelection) {
                var editChkBox = this.parent.element.querySelector('.e-edit-checkselect');
                if (!ej2_base_2.isNullOrUndefined(editChkBox)) {
                    var row = ej2_base_3.closest(editChkBox, '.e-editedrow');
                    if (row) {
                        if (this.parent.editSettings.mode === 'Dialog') {
                            row = this.parent.element.querySelector('.e-dlgeditrow');
                        }
                        var rowObj = this.getRowObj(row);
                        if (!rowObj) {
                            return;
                        }
                        this.selectedRowState[rowObj.data[this.primaryKey]] = rowObj.isSelected = editChkBox.checked;
                    }
                    else {
                        this.isCheckedOnAdd = editChkBox.checked;
                    }
                }
            }
        };
        Selection.prototype.actionComplete = function (e) {
            if (e.requestType === 'save' && this.parent.isPersistSelection) {
                if (e.action === 'add' && this.isCheckedOnAdd) {
                    var rowObj = this.parent.getRowObjectFromUID(this.parent.getRows()[e.selectedRow].getAttribute('data-uid'));
                    this.selectedRowState[rowObj.data[this.primaryKey]] = rowObj.isSelected = this.isCheckedOnAdd;
                }
                this.refreshPersistSelection();
            }
        };
        Selection.prototype.onDataBound = function () {
            if (!this.parent.enableVirtualization && this.parent.isPersistSelection) {
                this.refreshPersistSelection();
            }
        };
        Selection.prototype.checkSelectAllAction = function (checkState) {
            var cRenderer = this.getRenderer();
            var editForm = this.parent.element.querySelector('.e-gridform');
            this.checkedTarget = this.getCheckAllBox();
            if (checkState && this.parent.getCurrentViewRecords().length) {
                this.selectRowsByRange(cRenderer.getVirtualRowIndex(0), cRenderer.getVirtualRowIndex(this.parent.getCurrentViewRecords().length));
                this.parent.checkAllRows = 'Check';
            }
            else {
                this.clearSelection();
                this.parent.checkAllRows = 'Uncheck';
            }
            this.chkAllCollec = [];
            if (this.parent.isPersistSelection) {
                var rows = this.parent.getRows();
                for (var i = 0; i < rows.length; i++) {
                    this.updatePersistCollection(rows[i], checkState);
                }
                if (this.parent.checkAllRows === 'Uncheck') {
                    this.setRowSelection(false);
                    this.persistSelectedData = [];
                }
                else if (this.parent.checkAllRows === 'Check') {
                    this.setRowSelection(true);
                    this.persistSelectedData = !this.parent.getDataModule().isRemote() ? this.getData().slice() : this.persistSelectedData;
                }
            }
            if (!ej2_base_2.isNullOrUndefined(editForm)) {
                var editChkBox = editForm.querySelector('.e-edit-checkselect');
                util_1.removeAddCboxClasses(editChkBox.nextElementSibling, checkState);
            }
        };
        Selection.prototype.checkSelectAll = function (checkBox) {
            var state = this.getCheckAllStatus(checkBox) === 'Check';
            this.checkSelectAllAction(!state);
            this.target = null;
            if (this.parent.getCurrentViewRecords().length > 0) {
                this.setCheckAllState();
            }
            this.triggerChkChangeEvent(checkBox, !state);
        };
        Selection.prototype.getCheckAllStatus = function (ele) {
            var classes = ele ? ele.nextElementSibling.classList :
                this.getCheckAllBox().nextElementSibling.classList;
            var status;
            if (classes.contains('e-check')) {
                status = 'Check';
            }
            else if (classes.contains('e-uncheck')) {
                status = 'Uncheck';
            }
            else if (classes.contains('e-stop')) {
                status = 'Intermediate';
            }
            else {
                status = 'None';
            }
            return status;
        };
        Selection.prototype.checkSelect = function (checkBox) {
            var target = ej2_base_3.closest(this.checkedTarget, '.e-rowcell');
            var checkObj = checkBox;
            this.isMultiCtrlRequest = true;
            var rIndex = parseInt(target.parentElement.getAttribute('aria-rowindex'), 10);
            if (this.parent.isPersistSelection && this.parent.element.querySelectorAll('.e-addedrow').length > 0) {
                ++rIndex;
            }
            this.rowCellSelectionHandler(rIndex, parseInt(target.getAttribute('aria-colindex'), 10));
            this.moveIntoUncheckCollection(ej2_base_3.closest(target, '.e-row'));
            this.setCheckAllState();
            this.isMultiCtrlRequest = false;
            this.triggerChkChangeEvent(checkBox, checkBox.nextElementSibling.classList.contains('e-check'));
        };
        Selection.prototype.moveIntoUncheckCollection = function (row) {
            if (this.parent.checkAllRows === 'Check' || this.parent.checkAllRows === 'Uncheck') {
                var rowObj = this.getRowObj(row);
                var pKey = rowObj && rowObj.data ? rowObj.data[this.primaryKey] : null;
                if (!pKey) {
                    return;
                }
                if (this.chkAllCollec.indexOf(pKey) < 0) {
                    this.chkAllCollec.push(pKey);
                }
                else {
                    this.chkAllCollec.splice(this.chkAllCollec.indexOf(pKey), 1);
                }
            }
        };
        Selection.prototype.triggerChkChangeEvent = function (checkBox, checkState) {
            this.parent.trigger(events.checkBoxChange, {
                checked: checkState, selectedRowIndexes: this.parent.getSelectedRowIndexes(),
                target: checkBox
            });
            if (!this.parent.isEdit) {
                this.checkedTarget = null;
            }
        };
        Selection.prototype.setCheckAllState = function (isInteraction) {
            if (this.parent.isCheckBoxSelection) {
                var checkedLen = Object.keys(this.selectedRowState).length;
                if (!this.parent.isPersistSelection) {
                    checkedLen = this.selectedRecords.length;
                    this.totalRecordsCount = this.parent.getCurrentViewRecords().length;
                }
                if (this.getCheckAllBox()) {
                    var spanEle = this.getCheckAllBox().nextElementSibling;
                    ej2_base_2.removeClass([spanEle], ['e-check', 'e-stop', 'e-uncheck']);
                    if (checkedLen === this.totalRecordsCount) {
                        ej2_base_2.addClass([spanEle], ['e-check']);
                        if (isInteraction) {
                            this.getRenderer().setSelection(null, true, true);
                        }
                        this.parent.checkAllRows = 'Check';
                    }
                    else if (checkedLen === 0 || this.parent.getCurrentViewRecords().length === 0) {
                        ej2_base_2.addClass([spanEle], ['e-uncheck']);
                        if (isInteraction) {
                            this.getRenderer().setSelection(null, false, true);
                        }
                        this.parent.checkAllRows = 'Uncheck';
                    }
                    else {
                        ej2_base_2.addClass([spanEle], ['e-stop']);
                        this.parent.checkAllRows = 'Intermediate';
                    }
                }
            }
        };
        Selection.prototype.clickHandler = function (e) {
            var target = e.target;
            this.isMultiCtrlRequest = e.ctrlKey || this.enableSelectMultiTouch;
            this.isMultiShiftRequest = e.shiftKey;
            this.popUpClickHandler(e);
            var chkSelect = false;
            this.preventFocus = true;
            var checkBox;
            var checkWrap = util_1.parentsUntil(target, 'e-checkbox-wrapper');
            if (checkWrap && checkWrap.querySelectorAll('.e-checkselect,.e-checkselectall').length > 0) {
                checkBox = checkWrap.querySelector('input[type="checkbox"]');
                chkSelect = true;
            }
            target = util_1.parentsUntil(target, 'e-rowcell');
            if ((target && target.parentElement.classList.contains('e-row') && !this.parent.selectionSettings.checkboxOnly) || chkSelect) {
                if (this.parent.isCheckBoxSelection) {
                    this.isMultiCtrlRequest = true;
                }
                this.target = target;
                if (!ej2_base_2.isNullOrUndefined(checkBox)) {
                    this.checkedTarget = checkBox;
                    if (checkBox.classList.contains('e-checkselectall')) {
                        this.checkSelectAll(checkBox);
                    }
                    else {
                        this.checkSelect(checkBox);
                        this.target = ej2_base_3.closest(target, '.e-rowcell');
                    }
                }
                else {
                    var rIndex = parseInt(target.parentElement.getAttribute('aria-rowindex'), 10);
                    if (this.parent.isPersistSelection && this.parent.element.querySelectorAll('.e-addedrow').length > 0) {
                        ++rIndex;
                    }
                    this.rowCellSelectionHandler(rIndex, parseInt(target.getAttribute('aria-colindex'), 10));
                    if (this.parent.isCheckBoxSelection) {
                        this.moveIntoUncheckCollection(ej2_base_3.closest(target, '.e-row'));
                        this.setCheckAllState();
                    }
                }
                if (!this.parent.isCheckBoxSelection && ej2_base_1.Browser.isDevice && !this.isSingleSel()) {
                    this.showPopup(e);
                }
            }
            this.isMultiCtrlRequest = false;
            this.isMultiShiftRequest = false;
            this.preventFocus = false;
        };
        Selection.prototype.popUpClickHandler = function (e) {
            var target = e.target;
            if (ej2_base_3.closest(target, '.e-headercell') || e.target.classList.contains('e-rowcell') ||
                ej2_base_3.closest(target, '.e-gridpopup')) {
                if (target.classList.contains('e-rowselect')) {
                    if (!target.classList.contains('e-spanclicked')) {
                        target.classList.add('e-spanclicked');
                        this.enableSelectMultiTouch = true;
                    }
                    else {
                        target.classList.remove('e-spanclicked');
                        this.enableSelectMultiTouch = false;
                        this.parent.element.querySelector('.e-gridpopup').style.display = 'none';
                    }
                }
            }
            else {
                this.parent.element.querySelector('.e-gridpopup').style.display = 'none';
            }
        };
        Selection.prototype.showPopup = function (e) {
            util_1.setCssInGridPopUp(this.parent.element.querySelector('.e-gridpopup'), e, 'e-rowselect e-icons e-icon-rowselect' +
                (!this.isSingleSel() && (this.selectedRecords.length > (this.parent.getFrozenColumns() ? 2 : 1)
                    || this.selectedRowCellIndexes.length > 1) ? ' e-spanclicked' : ''));
        };
        Selection.prototype.rowCellSelectionHandler = function (rowIndex, cellIndex) {
            if ((!this.isMultiCtrlRequest && !this.isMultiShiftRequest) || this.isSingleSel()) {
                if (!this.isDragged) {
                    this.selectRow(rowIndex, true);
                }
                this.selectCell({ rowIndex: rowIndex, cellIndex: cellIndex }, true);
            }
            else if (this.isMultiShiftRequest) {
                this.selectRowsByRange(ej2_base_2.isUndefined(this.prevRowIndex) ? rowIndex : this.prevRowIndex, rowIndex);
                this.selectCellsByRange(ej2_base_2.isUndefined(this.prevCIdxs) ? { rowIndex: rowIndex, cellIndex: cellIndex } : this.prevCIdxs, { rowIndex: rowIndex, cellIndex: cellIndex });
            }
            else {
                this.addRowsToSelection([rowIndex]);
                this.addCellsToSelection([{ rowIndex: rowIndex, cellIndex: cellIndex }]);
            }
            this.isDragged = false;
        };
        Selection.prototype.onCellFocused = function (e) {
            if (this.parent.frozenRows && e.container.isHeader && e.byKey) {
                if (e.keyArgs.action === 'upArrow') {
                    if (this.parent.allowFiltering) {
                        e.isJump = e.element.tagName === 'INPUT' ? true : false;
                    }
                    else {
                        e.isJump = e.element.tagName === 'TH' ? true : false;
                    }
                }
                else {
                    if (e.keyArgs.action === 'downArrow') {
                        var rIdx = Number(e.element.parentElement.getAttribute('aria-rowindex'));
                        e.isJump = rIdx === 0 ? true : false;
                    }
                    else {
                        if (e.keyArgs.action === 'ctrlHome') {
                            e.isJump = true;
                        }
                    }
                }
            }
            var clear = this.parent.getFrozenColumns() ? (((e.container.isHeader && e.element.tagName !== 'TD' && e.isJump) ||
                ((e.container.isContent || e.element.tagName === 'TD') && !(e.container.isSelectable || e.element.tagName === 'TD')))
                && !(e.byKey && e.keyArgs.action === 'space')) : ((e.container.isHeader && e.isJump) ||
                (e.container.isContent && !e.container.isSelectable)) && !(e.byKey && e.keyArgs.action === 'space');
            var headerAction = (e.container.isHeader && e.element.tagName !== 'TD' && !ej2_base_3.closest(e.element, '.e-rowcell'))
                && !(e.byKey && e.keyArgs.action === 'space');
            if (!e.byKey || clear) {
                if (clear) {
                    this.clearSelection();
                }
                return;
            }
            var _a = e.container.isContent ? e.container.indexes : e.indexes, rowIndex = _a[0], cellIndex = _a[1];
            var prev = this.focus.getPrevIndexes();
            if (this.parent.frozenRows) {
                if (e.container.isHeader && (e.element.tagName === 'TD' || ej2_base_3.closest(e.element, '.e-rowcell'))) {
                    var thLen = this.parent.getHeaderTable().querySelector('thead').childElementCount;
                    rowIndex -= thLen;
                    prev.rowIndex = prev.rowIndex ? prev.rowIndex - thLen : null;
                }
                else {
                    rowIndex += this.parent.frozenRows;
                    prev.rowIndex = prev.rowIndex === 0 || !ej2_base_2.isNullOrUndefined(prev.rowIndex) ? prev.rowIndex + this.parent.frozenRows : null;
                }
                if (this.parent.getFrozenColumns()) {
                    var cIdx = Number(e.element.getAttribute('aria-colindex'));
                    prev.cellIndex = prev.cellIndex ? (prev.cellIndex === cellIndex ? cIdx : cIdx - 1) : null;
                    cellIndex = cIdx;
                }
            }
            if (headerAction || (['ctrlPlusA', 'escape'].indexOf(e.keyArgs.action) === -1 && e.keyArgs.action !== 'space' &&
                rowIndex === prev.rowIndex && cellIndex === prev.cellIndex)) {
                return;
            }
            this.preventFocus = true;
            switch (e.keyArgs.action) {
                case 'downArrow':
                case 'upArrow':
                case 'enter':
                case 'shiftEnter':
                    this.applyDownUpKey(rowIndex, cellIndex);
                    break;
                case 'rightArrow':
                case 'leftArrow':
                    this.applyRightLeftKey(rowIndex, cellIndex);
                    break;
                case 'shiftDown':
                case 'shiftUp':
                    this.shiftDownKey(rowIndex, cellIndex);
                    break;
                case 'shiftLeft':
                case 'shiftRight':
                    this.applyShiftLeftRightKey(rowIndex, cellIndex);
                    break;
                case 'home':
                case 'end':
                    cellIndex = e.keyArgs.action === 'end' ? this.getLastColIndex(rowIndex) : 0;
                    this.applyHomeEndKey(rowIndex, cellIndex);
                    break;
                case 'ctrlHome':
                case 'ctrlEnd':
                    this.applyCtrlHomeEndKey(rowIndex, cellIndex);
                    break;
                case 'escape':
                    this.clearSelection();
                    break;
                case 'ctrlPlusA':
                    this.ctrlPlusA();
                    break;
                case 'space':
                    this.applySpaceSelection(e.element);
                    break;
            }
            this.preventFocus = false;
        };
        Selection.prototype.ctrlPlusA = function () {
            if (this.isRowType() && !this.isSingleSel()) {
                this.selectRowsByRange(0, this.parent.getRows().length - 1);
            }
            if (this.isCellType() && !this.isSingleSel()) {
                this.selectCellsByRange({ rowIndex: 0, cellIndex: 0 }, { rowIndex: this.parent.getRows().length - 1, cellIndex: this.parent.getColumns().length - 1 });
            }
        };
        Selection.prototype.applySpaceSelection = function (target) {
            if (target.classList.contains('e-checkselectall')) {
                this.checkedTarget = target;
                this.checkSelectAll(this.checkedTarget);
            }
            else {
                if (target.classList.contains('e-checkselect')) {
                    this.checkedTarget = target;
                    this.checkSelect(this.checkedTarget);
                }
            }
        };
        Selection.prototype.applyDownUpKey = function (rowIndex, cellIndex) {
            var gObj = this.parent;
            if (this.parent.isCheckBoxSelection && this.parent.checkAllRows === 'Check') {
                this.checkSelectAllAction(false);
                this.checkedTarget = null;
            }
            if (this.isRowType()) {
                if (this.parent.frozenRows) {
                    this.selectRow(rowIndex, true);
                    this.applyUpDown(gObj.selectedRowIndex);
                }
                else {
                    this.selectRow(rowIndex, true);
                    this.applyUpDown(gObj.selectedRowIndex);
                }
            }
            if (this.isCellType()) {
                this.selectCell({ rowIndex: rowIndex, cellIndex: cellIndex }, true);
            }
        };
        Selection.prototype.applyUpDown = function (rowIndex) {
            if (rowIndex < 0) {
                return;
            }
            if (!this.target) {
                this.target = this.parent.getRows()[0].children[this.parent.groupSettings.columns.length || 0];
            }
            var cIndex = parseInt(this.target.getAttribute('aria-colindex'), 10);
            var frzCols = this.parent.getFrozenColumns();
            if (frzCols) {
                if (cIndex >= frzCols) {
                    this.target =
                        this.contentRenderer.getMovableRowByIndex(rowIndex).querySelectorAll('.e-rowcell')[cIndex - frzCols];
                }
                else {
                    this.target = this.contentRenderer.getRowByIndex(rowIndex).querySelectorAll('.e-rowcell')[cIndex];
                }
            }
            else {
                this.target = this.contentRenderer.getRowByIndex(rowIndex).querySelectorAll('.e-rowcell')[cIndex];
            }
            this.addAttribute(this.target);
        };
        Selection.prototype.applyRightLeftKey = function (rowIndex, cellIndex) {
            var gObj = this.parent;
            if (this.isCellType()) {
                this.selectCell({ rowIndex: rowIndex, cellIndex: cellIndex }, true);
                this.addAttribute(this.target);
            }
        };
        Selection.prototype.applyHomeEndKey = function (rowIndex, cellIndex) {
            if (this.isCellType()) {
                this.selectCell({ rowIndex: rowIndex, cellIndex: cellIndex }, true);
            }
            else {
                this.addAttribute(this.parent.getCellFromIndex(rowIndex, cellIndex));
            }
        };
        Selection.prototype.shiftDownKey = function (rowIndex, cellIndex) {
            var gObj = this.parent;
            this.isMultiShiftRequest = true;
            if (this.isRowType() && !this.isSingleSel()) {
                if (!ej2_base_2.isUndefined(this.prevRowIndex)) {
                    this.selectRowsByRange(this.prevRowIndex, rowIndex);
                    this.applyUpDown(rowIndex);
                }
                else {
                    this.selectRow(0, true);
                }
            }
            if (this.isCellType() && !this.isSingleSel()) {
                this.selectCellsByRange(this.prevCIdxs || { rowIndex: 0, cellIndex: 0 }, { rowIndex: rowIndex, cellIndex: cellIndex });
            }
            this.isMultiShiftRequest = false;
        };
        Selection.prototype.applyShiftLeftRightKey = function (rowIndex, cellIndex) {
            var gObj = this.parent;
            this.isMultiShiftRequest = true;
            this.selectCellsByRange(this.prevCIdxs, { rowIndex: rowIndex, cellIndex: cellIndex });
            this.isMultiShiftRequest = false;
        };
        Selection.prototype.applyCtrlHomeEndKey = function (rowIndex, cellIndex) {
            if (this.isRowType()) {
                this.selectRow(rowIndex, true);
                this.addAttribute(this.parent.getCellFromIndex(rowIndex, cellIndex));
            }
            if (this.isCellType()) {
                this.selectCell({ rowIndex: rowIndex, cellIndex: cellIndex }, true);
            }
        };
        Selection.prototype.addRemoveClassesForRow = function (row, isAdd, clearAll) {
            var args = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args[_i - 3] = arguments[_i];
            }
            if (row) {
                var cells = [].slice.call(row.querySelectorAll('.e-rowcell'));
                var cell = row.querySelector('.e-detailrowcollapse') || row.querySelector('.e-detailrowexpand');
                if (cell) {
                    cells.push(cell);
                }
                util_1.addRemoveActiveClasses.apply(void 0, [cells, isAdd].concat(args));
            }
            this.getRenderer().setSelection(row ? row.getAttribute('data-uid') : null, isAdd, clearAll);
        };
        Selection.prototype.isRowType = function () {
            return this.selectionSettings.mode === 'Row' || this.selectionSettings.mode === 'Both';
        };
        Selection.prototype.isCellType = function () {
            return this.selectionSettings.mode === 'Cell' || this.selectionSettings.mode === 'Both';
        };
        Selection.prototype.isSingleSel = function () {
            return this.selectionSettings.type === 'Single';
        };
        Selection.prototype.getRenderer = function () {
            if (ej2_base_2.isNullOrUndefined(this.contentRenderer)) {
                this.contentRenderer = this.factory.getRenderer(enum_1.RenderType.Content);
            }
            return this.contentRenderer;
        };
        Selection.prototype.getSelectedRecords = function () {
            var selectedData = [];
            if (!this.selectionSettings.persistSelection) {
                selectedData = this.parent.getRowsObject().filter(function (row) { return row.isSelected; })
                    .map(function (m) { return m.data; });
            }
            else {
                selectedData = this.persistSelectedData;
            }
            return selectedData;
        };
        Selection.prototype.addEventListener_checkbox = function () {
            this.parent.on(events.dataReady, this.dataReady, this);
            this.onDataBoundFunction = this.onDataBound.bind(this);
            this.parent.addEventListener(events.dataBound, this.onDataBoundFunction);
            this.parent.on(events.contentReady, this.checkBoxSelectionChanged, this);
            this.actionCompleteFunc = this.actionCompleteHandler.bind(this);
            this.parent.addEventListener(events.actionComplete, this.actionCompleteFunc);
            this.parent.on(events.click, this.clickHandler, this);
        };
        Selection.prototype.removeEventListener_checkbox = function () {
            this.parent.off(events.dataReady, this.dataReady);
            this.parent.removeEventListener(events.dataBound, this.onDataBoundFunction);
            this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunc);
            this.parent.off(events.click, this.clickHandler);
        };
        Selection.prototype.dataReady = function (e) {
            if (e.requestType !== 'virtualscroll' && !this.parent.isPersistSelection) {
                this.disableUI = true;
                this.clearSelection();
                this.disableUI = false;
            }
        };
        Selection.prototype.actionCompleteHandler = function (e) {
            if (e.requestType === 'save' && this.parent.isPersistSelection) {
                this.refreshPersistSelection();
            }
        };
        return Selection;
    }());
    exports.Selection = Selection;
});
