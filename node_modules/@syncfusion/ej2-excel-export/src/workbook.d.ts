import { CellStyles } from './cell-style';
import { SaveType, BlobSaveType } from './enum';
/**
 * Workbook class
 */
export declare class Workbook {
    private mArchive;
    private sharedString;
    private sharedStringCount;
    cellStyles: Map<string, CellStyles>;
    private worksheets;
    private builtInProperties;
    private mFonts;
    private mBorders;
    private mFills;
    private mNumFmt;
    private mStyles;
    private mCellXfs;
    private mCellStyleXfs;
    private mergeCells;
    private csvHelper;
    private mSaveType;
    private mHyperLinks;
    private unitsProportions;
    private hyperlinkStyle;
    private printTitles;
    private culture;
    private intl;
    private globalStyles;
    constructor(json: any, saveType: SaveType, culture?: string);
    private parserBuiltInProperties(jsonBuiltInProperties, builtInProperties);
    private parserWorksheets(json);
    private mergeOptions(fromJson, toJson);
    private applyProperties(sourceJson, destJson);
    private getCellName(row, column);
    private getColumnName(col);
    private parserPrintTitle(json, sheet);
    private parserFreezePanes(json, sheet);
    private parserColumns(json, sheet);
    private parserRows(json, sheet);
    private parserRow(json, rowIndex);
    private parseGrouping(json, row);
    private parseCells(json, row);
    private applyGlobalStyle(json, cellStyle);
    private compareStyleXfs(toCompareStyle);
    private parserCellStyle(json, cellStyle, cellType);
    private parserCellStyle(json, cellStyle, cellType, defStyleIndex);
    private switchNumberFormat(numberFormat, type);
    private getNumberFormat(numberFormat, type);
    private parserBorder(json, border);
    private processCellStyle(style);
    private isNewFont(toCompareStyle);
    private isNewBorder(toCompareStyle);
    private isAllBorder(toCompareBorder);
    private compareStyle(toCompareStyle);
    private contains(array, item);
    private getCellValueType(value);
    private parseCellType(cell);
    saveAsBlob(blobSaveType: BlobSaveType): Promise<{
        blobData: Blob;
    }>;
    save(fileName: string, proxyUrl?: string): void;
    private saveInternal();
    private saveWorkbook();
    private saveWorksheets();
    private saveWorksheet(sheet, index);
    private pixelsToColumnWidth(pixels);
    private trunc(x);
    private pixelsToRowHeight(pixels);
    private saveSheetRelations(sheet);
    private saveFreezePanes(sheet);
    private saveSharedString();
    private processString(value);
    private saveStyles();
    private saveNumberFormats();
    private saveFonts();
    private saveFills();
    private saveBorders();
    private saveCellStyles();
    private saveCellStyleXfs();
    private saveCellXfs();
    private saveApp(builtInProperties);
    private saveCore(builtInProperties);
    private saveTopLevelRelation();
    private saveWorkbookRelation();
    private saveContentType();
    private addToArchive(xmlString, itemName);
    private processMergeCells(cell, rowIndex, mergeCells);
    /**
     * Returns the tick count corresponding to the given year, month, and day.
     * @param year number value of year
     * @param month number value of month
     * @param day number value of day
     */
    private dateToTicks(year, month, day);
    /**
     * Return the tick count corresponding to the given hour, minute, second.
     * @param hour number value of hour
     * @param minute number value if minute
     * @param second number value of second
     */
    private timeToTicks(hour, minute, second);
    /**
     * Checks if given year is a leap year.
     * @param year Year value.
     */
    isLeapYear(year: number): boolean;
    /**
     * Converts `DateTime` to the equivalent OLE Automation date.
     */
    private toOADate(date);
}
export declare class BuiltInProperties {
    author: string;
    comments: string;
    category: string;
    company: string;
    manager: string;
    subject: string;
    title: string;
    createdDate: Date;
    modifiedDate: Date;
    tags: string;
    status: string;
}
