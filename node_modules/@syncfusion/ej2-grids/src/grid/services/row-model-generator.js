define(["require", "exports", "@syncfusion/ej2-base", "../models/row", "../base/enum", "../models/cell", "../base/util", "../../grid/base/util"], function (require, exports, ej2_base_1, row_1, enum_1, cell_1, util_1, util_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var RowModelGenerator = (function () {
        function RowModelGenerator(parent) {
            this.parent = parent;
        }
        RowModelGenerator.prototype.generateRows = function (data, args) {
            var rows = [];
            var startIndex = this.parent.enableVirtualization ? args.startIndex : 0;
            for (var i = 0, len = Object.keys(data).length; i < len; i++, startIndex++) {
                rows[i] = this.generateRow(data[i], startIndex);
            }
            return rows;
        };
        RowModelGenerator.prototype.ensureColumns = function () {
            var cols = [];
            if (this.parent.detailTemplate || this.parent.childGrid) {
                cols.push(this.generateCell({}, null, enum_1.CellType.DetailExpand));
            }
            return cols;
        };
        RowModelGenerator.prototype.generateRow = function (data, index, cssClass, indent) {
            var options = {};
            options.foreignKeyData = {};
            options.uid = util_1.getUid('grid-row');
            options.data = data;
            options.index = index;
            options.indent = indent;
            options.isDataRow = true;
            options.isExpand = false;
            options.cssClass = cssClass;
            options.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;
            options.isSelected = this.parent.getSelectedRowIndexes().indexOf(index) > -1;
            this.refreshForeignKeyRow(options);
            var cells = this.ensureColumns();
            var row = new row_1.Row(options);
            row.cells = cells.concat(this.generateCells(options));
            return row;
        };
        RowModelGenerator.prototype.refreshForeignKeyRow = function (options) {
            this.parent.getForeignKeyColumns().forEach(function (col) {
                ej2_base_1.setValue(col.field, util_2.getForeignData(col, options.data), options.foreignKeyData);
            });
        };
        RowModelGenerator.prototype.generateCells = function (options) {
            var _this = this;
            var dummies = this.parent.getColumns();
            var tmp = [];
            dummies.forEach(function (dummy, index) {
                return tmp.push(_this.generateCell(dummy, options.uid, ej2_base_1.isNullOrUndefined(dummy.commands) ? undefined : enum_1.CellType.CommandColumn, null, index, options.foreignKeyData));
            });
            return tmp;
        };
        RowModelGenerator.prototype.generateCell = function (column, rowId, cellType, colSpan, oIndex, foreignKeyData) {
            var opt = {
                'visible': column.visible,
                'isDataCell': !ej2_base_1.isNullOrUndefined(column.field || column.template),
                'isTemplate': !ej2_base_1.isNullOrUndefined(column.template),
                'rowID': rowId,
                'column': column,
                'cellType': !ej2_base_1.isNullOrUndefined(cellType) ? cellType : enum_1.CellType.Data,
                'colSpan': colSpan,
                'commands': column.commands,
                'isForeignKey': column.isForeignColumn && column.isForeignColumn(),
                'foreignKeyData': column.isForeignColumn && column.isForeignColumn() && ej2_base_1.getValue(column.field, foreignKeyData)
            };
            if (opt.isDataCell || opt.column.type === 'checkbox') {
                opt.index = this.parent.getColumnIndexByField(column.field);
            }
            return new cell_1.Cell(opt);
        };
        RowModelGenerator.prototype.refreshRows = function (input) {
            var _this = this;
            input.forEach(function (row) {
                _this.refreshForeignKeyRow(row);
                row.cells = _this.generateCells(row);
            });
            return input;
        };
        return RowModelGenerator;
    }());
    exports.RowModelGenerator = RowModelGenerator;
});
