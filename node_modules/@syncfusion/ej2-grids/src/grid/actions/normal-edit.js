define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "../base/util", "../base/constant", "../renderer/row-renderer"], function (require, exports, ej2_base_1, ej2_base_2, util_1, events, row_renderer_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var NormalEdit = (function () {
        function NormalEdit(parent, serviceLocator, renderer) {
            this.parent = parent;
            this.renderer = renderer;
            this.serviceLocator = serviceLocator;
            this.addEventListener();
        }
        NormalEdit.prototype.clickHandler = function (e) {
            var target = e.target;
            var gObj = this.parent;
            if ((((util_1.parentsUntil(target, 'e-gridcontent') &&
                util_1.parentsUntil(util_1.parentsUntil(target, 'e-gridcontent'), 'e-grid').id === gObj.element.id)) || (gObj.frozenRows
                && util_1.parentsUntil(target, 'e-headercontent'))) && !util_1.parentsUntil(target, 'e-unboundcelldiv')) {
                this.rowIndex = util_1.parentsUntil(target, 'e-rowcell') ? parseInt(target.parentElement.getAttribute('aria-rowindex'), 10) : -1;
                if (gObj.isEdit) {
                    gObj.editModule.endEdit();
                }
            }
        };
        NormalEdit.prototype.dblClickHandler = function (e) {
            if (util_1.parentsUntil(e.target, 'e-rowcell') && this.parent.editSettings.allowEditOnDblClick) {
                this.parent.editModule.startEdit(util_1.parentsUntil(e.target, 'e-row'));
            }
        };
        NormalEdit.prototype.editComplete = function (e) {
            this.parent.isEdit = false;
            switch (e.requestType) {
                case 'save':
                    if (!(this.parent.isCheckBoxSelection || this.parent.selectionSettings.type === 'Multiple')
                        || (!this.parent.isPersistSelection)) {
                        this.parent.selectRow(0);
                    }
                    this.parent.trigger(events.actionComplete, ej2_base_1.extend(e, {
                        requestType: 'save',
                        type: events.actionComplete
                    }));
                    break;
                case 'delete':
                    this.parent.selectRow(this.editRowIndex);
                    this.parent.trigger(events.actionComplete, ej2_base_1.extend(e, {
                        requestType: 'delete',
                        type: events.actionComplete
                    }));
                    break;
            }
        };
        NormalEdit.prototype.startEdit = function (tr) {
            var gObj = this.parent;
            var primaryKeys = gObj.getPrimaryKeyFieldNames();
            var primaryKeyValues = [];
            this.rowIndex = this.editRowIndex = parseInt(tr.getAttribute('aria-rowindex'), 10);
            this.previousData = gObj.getCurrentViewRecords()[this.rowIndex];
            for (var i = 0; i < primaryKeys.length; i++) {
                primaryKeyValues.push(this.previousData[primaryKeys[i]]);
            }
            this.uid = tr.getAttribute('data-uid');
            var rowObj = gObj.getRowObjectFromUID(this.uid);
            var args = {
                row: tr, primaryKey: primaryKeys, primaryKeyValue: primaryKeyValues, requestType: 'beginEdit',
                rowData: this.previousData, rowIndex: this.rowIndex, type: 'edit', cancel: false,
                foreignKeyData: rowObj && rowObj.foreignKeyData
            };
            gObj.trigger(events.beginEdit, args);
            args.type = 'actionBegin';
            gObj.trigger(events.actionBegin, args);
            if (args.cancel) {
                return;
            }
            gObj.isEdit = true;
            gObj.clearSelection();
            if (gObj.editSettings.mode === 'Dialog') {
                args.row.classList.add('e-dlgeditrow');
            }
            this.renderer.update(args);
            this.uid = tr.getAttribute('data-uid');
            gObj.editModule.applyFormValidation();
            args.type = 'actionComplete';
            gObj.trigger(events.actionComplete, args);
            if (this.parent.allowTextWrap) {
                this.parent.notify(events.freezeRender, { case: 'textwrap' });
            }
        };
        NormalEdit.prototype.updateRow = function (index, data) {
            var gObj = this.parent;
            var args = {
                requestType: 'save', type: events.actionBegin, data: data, cancel: false,
                previousData: gObj.getCurrentViewRecords()[index]
            };
            gObj.showSpinner();
            gObj.notify(events.updateData, args);
            gObj.refresh();
        };
        NormalEdit.prototype.endEdit = function () {
            var gObj = this.parent;
            if (!this.parent.isEdit || !gObj.editModule.formObj.validate() ||
                (gObj.editModule.mFormObj && !gObj.editModule.mFormObj.validate())) {
                return;
            }
            var editedData = ej2_base_1.extend({}, this.previousData);
            var args = {
                requestType: 'save', type: events.actionBegin, data: editedData, cancel: false,
                previousData: this.previousData, selectedRow: gObj.selectedRowIndex, foreignKeyData: {}
            };
            editedData = gObj.editModule.getCurrentEditedData(gObj.element.querySelector('.e-gridform'), editedData);
            if (gObj.getFrozenColumns() && gObj.editSettings.mode === 'Normal') {
                var mForm = gObj.element.querySelector('.e-movableheader').querySelector('.e-gridform');
                if (gObj.frozenRows && mForm) {
                    editedData = gObj.editModule.getCurrentEditedData(mForm, editedData);
                }
                else {
                    editedData = gObj.editModule.getCurrentEditedData(gObj.element.querySelector('.e-movablecontent').querySelector('.e-gridform'), editedData);
                }
            }
            if (gObj.element.querySelectorAll('.e-editedrow').length) {
                args.action = 'edit';
                gObj.trigger(events.actionBegin, args);
                if (args.cancel) {
                    return;
                }
                gObj.showSpinner();
                this.destroyElements();
                gObj.notify(events.updateData, args);
            }
            else {
                args.action = 'add';
                args.selectedRow = 0;
                args.index = this.addedRowIndex;
                gObj.notify(events.modelChanged, args);
                this.addedRowIndex = null;
                if (args.cancel) {
                    return;
                }
                this.destroyElements();
            }
            this.stopEditStatus();
            if (gObj.editSettings.mode === 'Dialog' && args.action !== 'add') {
                gObj.element.querySelector('.e-dlgeditrow').classList.remove('e-dlgeditrow');
            }
        };
        NormalEdit.prototype.destroyElements = function () {
            var gObj = this.parent;
            gObj.editModule.destroyWidgets();
            gObj.editModule.destroyForm();
            gObj.notify(events.dialogDestroy, {});
        };
        NormalEdit.prototype.editHandler = function (args) {
            var _this = this;
            if (args.promise) {
                args.promise.then(function (e) { return _this.edSucc(e, args); }).catch(function (e) { return _this.edFail(e); });
            }
            else {
                this.editSuccess(args.data, args);
            }
        };
        NormalEdit.prototype.edSucc = function (e, args) {
            this.editSuccess(e, args);
        };
        NormalEdit.prototype.edFail = function (e) {
            this.editFailure(e);
        };
        NormalEdit.prototype.updateCurrentViewData = function (data) {
            this.parent.getCurrentViewRecords()[this.editRowIndex] = data;
        };
        NormalEdit.prototype.editSuccess = function (e, args) {
            if (!ej2_base_2.isNullOrUndefined(e)) {
                args.data = e;
            }
            this.parent.trigger(events.beforeDataBound, args);
            args.type = events.actionComplete;
            this.parent.isEdit = false;
            this.refreshRow(args.data);
            this.updateCurrentViewData(args.data);
            this.parent.trigger(events.actionComplete, args);
            if (!(this.parent.isCheckBoxSelection || this.parent.selectionSettings.type === 'Multiple')
                || (!this.parent.isPersistSelection)) {
                this.parent.selectRow(this.rowIndex > -1 ? this.rowIndex : this.editRowIndex);
            }
            this.parent.hideSpinner();
        };
        NormalEdit.prototype.editFailure = function (e) {
            this.parent.trigger(events.actionFailure, e);
        };
        NormalEdit.prototype.refreshRow = function (data) {
            var frzCols = this.parent.getFrozenColumns();
            var row = new row_renderer_1.RowRenderer(this.serviceLocator, null, this.parent);
            var rowObj = this.parent.getRowObjectFromUID(this.uid);
            if (rowObj) {
                rowObj.changes = data;
                util_1.refreshForeignData(rowObj, this.parent.getForeignKeyColumns(), rowObj.changes);
                row.refresh(rowObj, this.parent.getColumns(), true);
                if (frzCols) {
                    var uid = void 0;
                    var tr = this.parent.element.querySelector('[data-uid=' + rowObj.uid + ']');
                    if ((util_1.parentsUntil(tr, 'e-frozencontent')) || (util_1.parentsUntil(tr, 'e-frozenheader'))) {
                        uid = this.parent.getMovableRows()[rowObj.index].getAttribute('data-uid');
                    }
                    else {
                        uid = this.parent.getRows()[rowObj.index].getAttribute('data-uid');
                    }
                    rowObj = this.parent.getRowObjectFromUID(uid);
                    rowObj.changes = data;
                    row.refresh(rowObj, this.parent.columns, true);
                }
            }
        };
        NormalEdit.prototype.closeEdit = function () {
            if (!this.parent.isEdit) {
                return;
            }
            var gObj = this.parent;
            var args = {
                requestType: 'cancel', type: events.actionBegin, data: this.previousData, selectedRow: gObj.selectedRowIndex
            };
            gObj.trigger(events.actionBegin, args);
            if (this.parent.editSettings.mode === 'Dialog') {
                this.parent.notify(events.dialogDestroy, {});
            }
            gObj.isEdit = false;
            this.stopEditStatus();
            args.type = events.actionComplete;
            if (gObj.editSettings.mode !== 'Dialog') {
                this.refreshRow(args.data);
            }
            if (gObj.getContentTable().querySelector('tr.e-emptyrow') &&
                !gObj.getContentTable().querySelector('tr.e-row')) {
                gObj.getContentTable().querySelector('tr.e-emptyrow').classList.remove('e-hide');
            }
            gObj.selectRow(this.rowIndex);
            gObj.trigger(events.actionComplete, args);
        };
        NormalEdit.prototype.addRecord = function (data, index) {
            var gObj = this.parent;
            this.addedRowIndex = !ej2_base_2.isNullOrUndefined(index) ? index : 0;
            if (data) {
                gObj.notify(events.modelChanged, {
                    requestType: 'save', type: events.actionBegin, data: data, selectedRow: 0, action: 'add', index: index
                });
                return;
            }
            if (gObj.isEdit) {
                return;
            }
            this.previousData = {};
            this.uid = '';
            for (var _i = 0, _a = gObj.getColumns(); _i < _a.length; _i++) {
                var col = _a[_i];
                this.previousData[col.field] = data && data[col.field] ? data[col.field] : col.defaultValue;
            }
            var args = {
                cancel: false, foreignKeyData: {},
                requestType: 'add', data: this.previousData, type: events.actionBegin, index: index
            };
            gObj.trigger(events.actionBegin, args);
            if (args.cancel) {
                return;
            }
            gObj.isEdit = true;
            gObj.clearSelection();
            this.renderer.addNew({ rowData: args.data, requestType: 'add' });
            gObj.editModule.applyFormValidation();
            args.type = events.actionComplete;
            args.row = gObj.element.querySelector('.e-addedrow');
            gObj.trigger(events.actionComplete, args);
        };
        NormalEdit.prototype.deleteRecord = function (fieldname, data) {
            this.editRowIndex = this.parent.selectedRowIndex;
            this.parent.notify(events.modelChanged, {
                requestType: 'delete', type: events.actionBegin, foreignKeyData: {},
                data: data ? [data] : this.parent.getSelectedRecords(), tr: this.parent.getSelectedRows(), cancel: false
            });
        };
        NormalEdit.prototype.stopEditStatus = function () {
            var gObj = this.parent;
            var elem = gObj.element.querySelector('.e-addedrow');
            var mElem;
            var editMElem;
            if (gObj.getFrozenColumns()) {
                mElem = gObj.element.querySelectorAll('.e-addedrow')[1];
                editMElem = gObj.element.querySelectorAll('.e-editedrow')[1];
                if (mElem) {
                    ej2_base_2.remove(mElem);
                }
                if (editMElem) {
                    editMElem.classList.remove('e-editedrow');
                }
            }
            if (elem) {
                ej2_base_2.remove(elem);
            }
            elem = gObj.element.querySelector('.e-editedrow');
            if (elem) {
                elem.classList.remove('e-editedrow');
            }
        };
        NormalEdit.prototype.addEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.on(events.crudAction, this.editHandler, this);
            this.parent.on(events.doubleTap, this.dblClickHandler, this);
            this.parent.on(events.click, this.clickHandler, this);
            this.parent.on(events.dblclick, this.dblClickHandler, this);
            this.parent.on(events.deleteComplete, this.editComplete, this);
            this.parent.on(events.saveComplete, this.editComplete, this);
        };
        NormalEdit.prototype.removeEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.off(events.crudAction, this.editHandler);
            this.parent.off(events.doubleTap, this.dblClickHandler);
            this.parent.off(events.click, this.clickHandler);
            this.parent.off(events.dblclick, this.dblClickHandler);
            this.parent.off(events.deleteComplete, this.editComplete);
            this.parent.off(events.saveComplete, this.editComplete);
        };
        NormalEdit.prototype.destroy = function () {
            this.removeEventListener();
            this.renderer.destroy();
        };
        return NormalEdit;
    }());
    exports.NormalEdit = NormalEdit;
});
