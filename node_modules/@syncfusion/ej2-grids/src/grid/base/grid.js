var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-data", "@syncfusion/ej2-popups", "./util", "../base/constant", "../renderer/render", "./enum", "../renderer/row-renderer", "../renderer/cell-renderer", "../services/cell-render-factory", "../services/service-locator", "../services/value-formatter", "../services/renderer-factory", "../services/width-controller", "../services/aria-service", "../services/focus-strategy", "../models/page-settings", "../actions/selection", "../actions/search", "../actions/show-hide", "../actions/scroll", "../actions/print", "../models/aggregate", "../actions/clipboard"], function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, ej2_base_4, ej2_base_5, ej2_data_1, ej2_popups_1, util_1, events, render_1, enum_1, row_renderer_1, cell_renderer_1, cell_render_factory_1, service_locator_1, value_formatter_1, renderer_factory_1, width_controller_1, aria_service_1, focus_strategy_1, page_settings_1, selection_1, search_1, show_hide_1, scroll_1, print_1, aggregate_1, clipboard_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SortDescriptor = (function (_super) {
        __extends(SortDescriptor, _super);
        function SortDescriptor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_4.Property()
        ], SortDescriptor.prototype, "field", void 0);
        __decorate([
            ej2_base_4.Property()
        ], SortDescriptor.prototype, "direction", void 0);
        return SortDescriptor;
    }(ej2_base_1.ChildProperty));
    exports.SortDescriptor = SortDescriptor;
    var SortSettings = (function (_super) {
        __extends(SortSettings, _super);
        function SortSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_4.Collection([], SortDescriptor)
        ], SortSettings.prototype, "columns", void 0);
        __decorate([
            ej2_base_4.Property(true)
        ], SortSettings.prototype, "allowUnsort", void 0);
        return SortSettings;
    }(ej2_base_1.ChildProperty));
    exports.SortSettings = SortSettings;
    var Predicate = (function (_super) {
        __extends(Predicate, _super);
        function Predicate() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_4.Property()
        ], Predicate.prototype, "field", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Predicate.prototype, "operator", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Predicate.prototype, "value", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Predicate.prototype, "matchCase", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Predicate.prototype, "ignoreAccent", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Predicate.prototype, "predicate", void 0);
        __decorate([
            ej2_base_4.Property({})
        ], Predicate.prototype, "actualFilterValue", void 0);
        __decorate([
            ej2_base_4.Property({})
        ], Predicate.prototype, "actualOperator", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Predicate.prototype, "type", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Predicate.prototype, "ejpredicate", void 0);
        return Predicate;
    }(ej2_base_1.ChildProperty));
    exports.Predicate = Predicate;
    var FilterSettings = (function (_super) {
        __extends(FilterSettings, _super);
        function FilterSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_4.Collection([], Predicate)
        ], FilterSettings.prototype, "columns", void 0);
        __decorate([
            ej2_base_4.Property('FilterBar')
        ], FilterSettings.prototype, "type", void 0);
        __decorate([
            ej2_base_4.Property()
        ], FilterSettings.prototype, "mode", void 0);
        __decorate([
            ej2_base_4.Property(true)
        ], FilterSettings.prototype, "showFilterBarStatus", void 0);
        __decorate([
            ej2_base_4.Property(1500)
        ], FilterSettings.prototype, "immediateModeDelay", void 0);
        __decorate([
            ej2_base_4.Property()
        ], FilterSettings.prototype, "operators", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], FilterSettings.prototype, "ignoreAccent", void 0);
        return FilterSettings;
    }(ej2_base_1.ChildProperty));
    exports.FilterSettings = FilterSettings;
    var SelectionSettings = (function (_super) {
        __extends(SelectionSettings, _super);
        function SelectionSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_4.Property('Row')
        ], SelectionSettings.prototype, "mode", void 0);
        __decorate([
            ej2_base_4.Property('Flow')
        ], SelectionSettings.prototype, "cellSelectionMode", void 0);
        __decorate([
            ej2_base_4.Property('Single')
        ], SelectionSettings.prototype, "type", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], SelectionSettings.prototype, "checkboxOnly", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], SelectionSettings.prototype, "persistSelection", void 0);
        return SelectionSettings;
    }(ej2_base_1.ChildProperty));
    exports.SelectionSettings = SelectionSettings;
    var SearchSettings = (function (_super) {
        __extends(SearchSettings, _super);
        function SearchSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_4.Property([])
        ], SearchSettings.prototype, "fields", void 0);
        __decorate([
            ej2_base_4.Property('')
        ], SearchSettings.prototype, "key", void 0);
        __decorate([
            ej2_base_4.Property('contains')
        ], SearchSettings.prototype, "operator", void 0);
        __decorate([
            ej2_base_4.Property(true)
        ], SearchSettings.prototype, "ignoreCase", void 0);
        return SearchSettings;
    }(ej2_base_1.ChildProperty));
    exports.SearchSettings = SearchSettings;
    var RowDropSettings = (function (_super) {
        __extends(RowDropSettings, _super);
        function RowDropSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_4.Property()
        ], RowDropSettings.prototype, "targetID", void 0);
        return RowDropSettings;
    }(ej2_base_1.ChildProperty));
    exports.RowDropSettings = RowDropSettings;
    var TextWrapSettings = (function (_super) {
        __extends(TextWrapSettings, _super);
        function TextWrapSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_4.Property('Both')
        ], TextWrapSettings.prototype, "wrapMode", void 0);
        return TextWrapSettings;
    }(ej2_base_1.ChildProperty));
    exports.TextWrapSettings = TextWrapSettings;
    var GroupSettings = (function (_super) {
        __extends(GroupSettings, _super);
        function GroupSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_4.Property(true)
        ], GroupSettings.prototype, "showDropArea", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], GroupSettings.prototype, "showToggleButton", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], GroupSettings.prototype, "showGroupedColumn", void 0);
        __decorate([
            ej2_base_4.Property(true)
        ], GroupSettings.prototype, "showUngroupButton", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], GroupSettings.prototype, "disablePageWiseAggregates", void 0);
        __decorate([
            ej2_base_4.Property([])
        ], GroupSettings.prototype, "columns", void 0);
        __decorate([
            ej2_base_4.Property()
        ], GroupSettings.prototype, "captionTemplate", void 0);
        return GroupSettings;
    }(ej2_base_1.ChildProperty));
    exports.GroupSettings = GroupSettings;
    var EditSettings = (function (_super) {
        __extends(EditSettings, _super);
        function EditSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_4.Property(false)
        ], EditSettings.prototype, "allowAdding", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], EditSettings.prototype, "allowEditing", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], EditSettings.prototype, "allowDeleting", void 0);
        __decorate([
            ej2_base_4.Property('Normal')
        ], EditSettings.prototype, "mode", void 0);
        __decorate([
            ej2_base_4.Property(true)
        ], EditSettings.prototype, "allowEditOnDblClick", void 0);
        __decorate([
            ej2_base_4.Property(true)
        ], EditSettings.prototype, "showConfirmDialog", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], EditSettings.prototype, "showDeleteConfirmDialog", void 0);
        return EditSettings;
    }(ej2_base_1.ChildProperty));
    exports.EditSettings = EditSettings;
    var Grid = (function (_super) {
        __extends(Grid, _super);
        function Grid(options, element) {
            var _this = _super.call(this, options, element) || this;
            _this.inViewIndexes = [];
            _this.freezeRefresh = ej2_base_1.Component.prototype.refresh;
            _this.currentViewData = [];
            _this.isAlert = true;
            _this.needsID = true;
            ej2_base_2.setValue('mergePersistData', _this.mergePersistGridData, _this);
            return _this;
        }
        Grid.prototype.getPersistData = function () {
            var _this = this;
            var keyEntity = ['pageSettings', 'sortSettings',
                'filterSettings', 'groupSettings', 'columns', 'searchSettings', 'selectedRowIndex'];
            var ignoreOnPersist = {
                pageSettings: ['template', 'pageSizes', 'enableQueryString', 'totalRecordsCount', 'pageCount'],
                filterSettings: ['type', 'mode', 'showFilterBarStatus', 'immediateModeDelay', 'ignoreAccent'],
                groupSettings: ['showDropArea', 'showToggleButton', 'showGroupedColumn', 'showUngroupButton',
                    'disablePageWiseAggregates', 'hideCaptionCount'],
                searchSettings: ['fields', 'operator', 'ignoreCase'],
                sortSettings: [], columns: [], selectedRowIndex: []
            };
            var ignoreOnColumn = ['filter', 'edit', 'filterBarTemplate', 'headerTemplate', 'template',
                'commandTemplate', 'commands', 'dataSource'];
            keyEntity.forEach(function (value) {
                var currentObject = _this[value];
                for (var _i = 0, _a = ignoreOnPersist[value]; _i < _a.length; _i++) {
                    var val = _a[_i];
                    delete currentObject[val];
                }
            });
            this.ignoreInArrays(ignoreOnColumn, this.columns);
            return this.addOnPersist(keyEntity);
        };
        Grid.prototype.ignoreInArrays = function (ignoreOnColumn, columns) {
            var _this = this;
            columns.forEach(function (column) {
                if (column.columns) {
                    _this.ignoreInColumn(ignoreOnColumn, column);
                    _this.ignoreInArrays(ignoreOnColumn, column.columns);
                }
                else {
                    _this.ignoreInColumn(ignoreOnColumn, column);
                }
            });
        };
        Grid.prototype.ignoreInColumn = function (ignoreOnColumn, column) {
            ignoreOnColumn.forEach(function (val) {
                delete column[val];
            });
        };
        Grid.prototype.requiredModules = function () {
            var modules = [];
            if (this.allowFiltering) {
                modules.push({
                    member: 'filter',
                    args: [this, this.filterSettings, this.serviceLocator]
                });
            }
            if (this.allowExcelExport) {
                modules.push({
                    member: 'ExcelExport',
                    args: [this]
                });
            }
            if (this.allowPdfExport) {
                modules.push({
                    member: 'PdfExport',
                    args: [this]
                });
            }
            if (this.allowSorting) {
                modules.push({
                    member: 'sort',
                    args: [this, this.sortSettings, this.sortedColumns, this.serviceLocator]
                });
            }
            if (this.allowPaging) {
                modules.push({
                    member: 'pager',
                    args: [this, this.pageSettings]
                });
            }
            if (this.allowSelection) {
                modules.push({
                    member: 'selection',
                    args: [this, this.selectionSettings, this.serviceLocator]
                });
            }
            modules.push({
                member: 'resize',
                args: [this]
            });
            if (this.allowReordering) {
                modules.push({
                    member: 'reorder',
                    args: [this]
                });
            }
            if (this.allowRowDragAndDrop) {
                modules.push({
                    member: 'rowDragAndDrop',
                    args: [this]
                });
            }
            if (this.allowGrouping) {
                modules.push({
                    member: 'group',
                    args: [this, this.groupSettings, this.sortedColumns, this.serviceLocator]
                });
            }
            if (this.aggregates.length) {
                modules.push({ member: 'aggregate', args: [this, this.serviceLocator] });
            }
            if (this.isDetail()) {
                modules.push({
                    member: 'detailRow',
                    args: [this, this.serviceLocator]
                });
            }
            if (this.toolbar || this.toolbarTemplate) {
                modules.push({
                    member: 'toolbar',
                    args: [this, this.serviceLocator]
                });
            }
            if (this.enableVirtualization || this.enableColumnVirtualization) {
                modules.push({
                    member: 'virtualscroll',
                    args: [this, this.serviceLocator]
                });
            }
            if (this.getFrozenColumns() || this.frozenRows) {
                modules.push({ member: 'freeze', args: [this, this.serviceLocator] });
            }
            if (this.isCommandColumn(this.columns)) {
                modules.push({
                    member: 'commandColumn',
                    args: [this, this.serviceLocator]
                });
            }
            if (this.editSettings.allowAdding || this.editSettings.allowDeleting || this.editSettings.allowEditing) {
                modules.push({
                    member: 'edit',
                    args: [this, this.serviceLocator]
                });
            }
            this.extendRequiredModules(modules);
            return modules;
        };
        Grid.prototype.extendRequiredModules = function (modules) {
            if (this.contextMenuItems) {
                modules.push({
                    member: 'contextMenu',
                    args: [this, this.serviceLocator]
                });
            }
            if (this.showColumnMenu) {
                modules.push({
                    member: 'columnMenu',
                    args: [this, this.serviceLocator]
                });
            }
            if (this.showColumnChooser) {
                modules.push({
                    member: 'columnChooser',
                    args: [this, this.serviceLocator]
                });
            }
            if (this.isForeignKeyEnabled(this.columns)) {
                modules.push({ member: 'foreignKey', args: [this, this.serviceLocator] });
            }
        };
        Grid.prototype.preRender = function () {
            this.serviceLocator = new service_locator_1.ServiceLocator;
            this.initProperties();
            this.initializeServices();
        };
        Grid.prototype.initProperties = function () {
            this.isInitial = true;
            this.sortedColumns = [];
            this.inViewIndexes = [];
            this.mediaCol = [];
            this.isInitialLoad = false;
            this.mergeCells = {};
            this.isEdit = false;
            this.checkAllRows = 'None';
            this.isCheckBoxSelection = false;
            this.isPersistSelection = false;
            this.freezeRefresh = ej2_base_1.Component.prototype.refresh;
            this.filterOperators = {
                contains: 'contains', endsWith: 'endswith', equal: 'equal', greaterThan: 'greaterthan', greaterThanOrEqual: 'greaterthanorequal',
                lessThan: 'lessthan', lessThanOrEqual: 'lessthanorequal', notEqual: 'notequal', startsWith: 'startswith'
            };
            this.defaultLocale = {
                EmptyRecord: 'No records to display',
                True: 'true',
                False: 'false',
                InvalidFilterMessage: 'Invalid Filter Data',
                GroupDropArea: 'Drag a column header here to group its column',
                UnGroup: 'Click here to ungroup',
                GroupDisable: 'Grouping is disabled for this column',
                FilterbarTitle: '\'s filter bar cell',
                EmptyDataSourceError: 'DataSource must not be empty at initial load since columns are generated from dataSource in AutoGenerate Column Grid',
                Add: 'Add',
                Edit: 'Edit',
                Cancel: 'Cancel',
                Update: 'Update',
                Delete: 'Delete',
                Print: 'Print',
                Pdfexport: 'PDF Export',
                Excelexport: 'Excel Export',
                Wordexport: 'Word Export',
                Csvexport: 'CSV Export',
                Search: 'Search',
                Columnchooser: 'Columns',
                Save: 'Save',
                Item: 'item',
                Items: 'items',
                EditOperationAlert: 'No records selected for edit operation',
                DeleteOperationAlert: 'No records selected for delete operation',
                SaveButton: 'Save',
                OKButton: 'OK',
                CancelButton: 'Cancel',
                EditFormTitle: 'Details of ',
                AddFormTitle: 'Add New Record',
                BatchSaveConfirm: 'Are you sure you want to save changes?',
                BatchSaveLostChanges: 'Unsaved changes will be lost. Are you sure you want to continue?',
                ConfirmDelete: 'Are you sure you want to Delete Record?',
                CancelEdit: 'Are you sure you want to Cancel the changes?',
                ChooseColumns: 'Choose Column',
                SearchColumns: 'search columns',
                Matchs: 'No Matches Found',
                FilterButton: 'Filter',
                ClearButton: 'Clear',
                StartsWith: 'Starts With',
                EndsWith: 'Ends With',
                Contains: 'Contains',
                Equal: 'Equal',
                NotEqual: 'Not Equal',
                LessThan: 'Less Than',
                LessThanOrEqual: 'Less Than Or Equal',
                GreaterThan: 'Greater Than',
                GreaterThanOrEqual: 'Greater Than Or Equal',
                ChooseDate: 'Choose a Date',
                EnterValue: 'Enter the value',
                Copy: 'Copy',
                Group: 'Group by this column',
                Ungroup: 'Ungroup by this column',
                autoFitAll: 'Auto Fit all columns',
                autoFit: 'Auto Fit this column',
                Export: 'Export',
                FirstPage: 'First Page',
                LastPage: 'Last Page',
                PreviousPage: 'Previous Page',
                NextPage: 'Next Page',
                SortAscending: 'Sort Ascending',
                SortDescending: 'Sort Descending',
                EditRecord: 'Edit Record',
                DeleteRecord: 'Delete Record',
                FilterMenu: 'Filter',
                SelectAll: 'Select All',
                Blanks: 'Blanks',
                FilterTrue: 'True',
                FilterFalse: 'False',
                NoResult: 'No Matches Found',
                ClearFilter: 'Clear Filter',
                NumberFilter: 'Number Filters',
                TextFilter: 'Text Filters',
                DateFilter: 'Date Filters',
                MatchCase: 'Match Case',
                Between: 'Between',
                CustomFilter: 'Custom Filter',
                CustomFilterPlaceHolder: 'Enter the value',
                CustomFilterDatePlaceHolder: 'Choose a date',
                AND: 'AND',
                OR: 'OR',
                ShowRowsWhere: 'Show rows where:'
            };
            this.keyConfigs = {
                downArrow: 'downarrow',
                upArrow: 'uparrow',
                rightArrow: 'rightarrow',
                leftArrow: 'leftarrow',
                shiftDown: 'shift+downarrow',
                shiftUp: 'shift+uparrow',
                shiftRight: 'shift+rightarrow',
                shiftLeft: 'shift+leftarrow',
                home: 'home',
                end: 'end',
                escape: 'escape',
                ctrlHome: 'ctrl+home',
                ctrlEnd: 'ctrl+end',
                pageUp: 'pageup',
                pageDown: 'pagedown',
                ctrlAltPageUp: 'ctrl+alt+pageup',
                ctrlAltPageDown: 'ctrl+alt+pagedown',
                altPageUp: 'alt+pageup',
                altPageDown: 'alt+pagedown',
                altDownArrow: 'alt+downarrow',
                altUpArrow: 'alt+uparrow',
                ctrlDownArrow: 'ctrl+downarrow',
                ctrlUpArrow: 'ctrl+uparrow',
                ctrlPlusA: 'ctrl+A',
                ctrlPlusP: 'ctrl+P',
                insert: 'insert',
                delete: 'delete',
                f2: 'f2',
                enter: 'enter',
                ctrlEnter: 'ctrl+enter',
                shiftEnter: 'shift+enter',
                tab: 'tab',
                shiftTab: 'shift+tab',
                space: 'space',
                ctrlPlusC: 'ctrl+C',
                ctrlShiftPlusH: 'ctrl+shift+H'
            };
        };
        Grid.prototype.render = function () {
            this.ariaService.setOptions(this.element, { role: 'grid' });
            ej2_popups_1.createSpinner({ target: this.element });
            this.renderModule = new render_1.Render(this, this.serviceLocator);
            this.getMediaColumns();
            this.searchModule = new search_1.Search(this);
            this.scrollModule = new scroll_1.Scroll(this);
            this.notify(events.initialLoad, {});
            this.trigger(events.load);
            util_1.prepareColumns(this.columns, this.enableColumnVirtualization);
            this.getColumns();
            this.processModel();
            this.gridRender();
            this.wireEvents();
            this.addListener();
            this.updateDefaultCursor();
            this.updateStackedFilter();
            this.showSpinner();
            this.notify(events.initialEnd, {});
        };
        Grid.prototype.showSpinner = function () {
            ej2_popups_1.showSpinner(this.element);
        };
        Grid.prototype.hideSpinner = function () {
            ej2_popups_1.hideSpinner(this.element);
        };
        Grid.prototype.updateStackedFilter = function () {
            if (this.allowFiltering && this.filterSettings.type === 'FilterBar' &&
                this.getHeaderContent().querySelectorAll('.e-stackedheadercell').length) {
                this.getHeaderContent().classList.add('e-stackedfilter');
            }
            else {
                this.getHeaderContent().classList.remove('e-stackedfilter');
            }
        };
        Grid.prototype.getMediaColumns = function () {
            if (!this.enableColumnVirtualization) {
                var gcol = this.getColumns();
                this.getShowHideService = this.serviceLocator.getService('showHideService');
                if (!ej2_base_2.isNullOrUndefined(gcol)) {
                    for (var index = 0; index < gcol.length; index++) {
                        if (!ej2_base_2.isNullOrUndefined(gcol[index].hideAtMedia)) {
                            this.mediaCol.push(gcol[index]);
                            var media = window.matchMedia(gcol[index].hideAtMedia);
                            this.mediaQueryUpdate(index, media);
                            media.addListener(this.mediaQueryUpdate.bind(this, index));
                        }
                    }
                }
            }
        };
        Grid.prototype.mediaQueryUpdate = function (columnIndex, e) {
            var col = this.getColumns()[columnIndex];
            col.visible = e.matches;
            if (this.isInitialLoad) {
                if (col.visible) {
                    this.showHider.show(col.headerText, 'headerText');
                }
                else {
                    this.showHider.hide(col.headerText, 'headerText');
                }
            }
        };
        Grid.prototype.refreshMediaCol = function () {
            this.isInitialLoad = true;
        };
        Grid.prototype.eventInitializer = function () {
        };
        Grid.prototype.destroy = function () {
            this.unwireEvents();
            this.removeListener();
            this.notify(events.destroy, {});
            this.destroyDependentModules();
            _super.prototype.destroy.call(this);
            this.element.innerHTML = '';
            ej2_base_3.classList(this.element, [], ['e-rtl', 'e-gridhover', 'e-responsive', 'e-default', 'e-device', 'e-grid-min-height']);
        };
        Grid.prototype.destroyDependentModules = function () {
            this.scrollModule.destroy();
            this.keyboardModule.destroy();
            this.focusModule.destroy();
        };
        Grid.prototype.getModuleName = function () {
            return 'grid';
        };
        Grid.prototype.onPropertyChanged = function (newProp, oldProp) {
            var requireRefresh = false;
            var requireGridRefresh = false;
            var checkCursor;
            var args = { requestType: 'refresh' };
            if (this.isDestroyed) {
                return;
            }
            var properties = Object.keys(newProp);
            if (properties.indexOf('columns') > -1) {
                this.updateColumnObject();
                requireGridRefresh = true;
            }
            for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
                var prop = properties_1[_i];
                switch (prop) {
                    case 'allowPaging':
                        this.notify(events.uiUpdate, { module: 'pager', enable: this.allowPaging });
                        requireRefresh = true;
                        break;
                    case 'pageSettings':
                        this.notify(events.inBoundModelChanged, { module: 'pager', properties: newProp.pageSettings });
                        if (ej2_base_2.isNullOrUndefined(newProp.pageSettings.currentPage) && ej2_base_2.isNullOrUndefined(newProp.pageSettings.totalRecordsCount)
                            || ((newProp.pageSettings.currentPage !== oldProp.pageSettings.currentPage)
                                && !this.enableColumnVirtualization && !this.enableVirtualization
                                && this.pageSettings.totalRecordsCount <= this.pageSettings.pageSize)) {
                            requireRefresh = true;
                        }
                        break;
                    case 'currencyCode':
                    case 'locale':
                        _super.prototype.refresh.call(this);
                        break;
                    case 'allowSorting':
                        this.notify(events.uiUpdate, { module: 'sort', enable: this.allowSorting });
                        requireRefresh = true;
                        checkCursor = true;
                        break;
                    case 'allowFiltering':
                        this.updateStackedFilter();
                        this.notify(events.uiUpdate, { module: 'filter', enable: this.allowFiltering });
                        requireRefresh = true;
                        if (this.filterSettings.type !== 'FilterBar') {
                            this.refreshHeader();
                        }
                        break;
                    case 'height':
                    case 'width':
                        this.notify(events.uiUpdate, { module: 'scroll', properties: { width: newProp.width, height: newProp.height } });
                        break;
                    case 'allowReordering':
                        this.headerModule.refreshUI();
                        checkCursor = true;
                        break;
                    case 'allowRowDragAndDrop':
                        this.notify(events.uiUpdate, { module: 'rowDragAndDrop', enable: this.allowRowDragAndDrop });
                        break;
                    case 'rowTemplate':
                        this.rowTemplateFn = util_1.templateCompiler(this.rowTemplate);
                        requireRefresh = true;
                        break;
                    case 'detailTemplate':
                        this.detailTemplateFn = util_1.templateCompiler(this.detailTemplate);
                        requireRefresh = true;
                        break;
                    case 'allowGrouping':
                        this.notify(events.uiUpdate, { module: 'group', enable: this.allowGrouping });
                        this.headerModule.refreshUI();
                        requireRefresh = true;
                        checkCursor = true;
                        break;
                    case 'childGrid':
                        requireRefresh = true;
                        break;
                    case 'toolbar':
                        this.notify(events.uiUpdate, { module: 'toolbar' });
                        break;
                    case 'groupSettings':
                        if (!(ej2_base_2.isNullOrUndefined(newProp.groupSettings.showDropArea))) {
                            this.headerModule.refreshUI();
                            requireRefresh = true;
                            checkCursor = true;
                        }
                        this.notify(events.inBoundModelChanged, {
                            module: 'group', properties: newProp.groupSettings,
                            oldProperties: oldProp.groupSettings
                        });
                        break;
                    case 'aggregates':
                        if (!this.aggregates.length && this.allowGrouping && this.groupSettings.columns.length) {
                            requireRefresh = true;
                        }
                        this.notify(events.uiUpdate, { module: 'aggregate', properties: newProp });
                        break;
                    default:
                        this.extendedPropertyChange(prop, newProp);
                }
            }
            if (checkCursor) {
                this.updateDefaultCursor();
            }
            if (requireGridRefresh) {
                this.refresh();
            }
            else if (requireRefresh) {
                this.notify(events.modelChanged, args);
                requireRefresh = false;
            }
        };
        Grid.prototype.extendedPropertyChange = function (prop, newProp) {
            switch (prop) {
                case 'enableRtl':
                    this.updateRTL();
                    if (this.allowPaging) {
                        this.element.querySelector('.e-gridpager').ej2_instances[0].enableRtl = newProp.enableRtl;
                        this.element.querySelector('.e-gridpager').ej2_instances[0].dataBind();
                    }
                    if (this.height !== 'auto') {
                        this.scrollModule.removePadding(!newProp.enableRtl);
                        this.scrollModule.setPadding();
                    }
                    if (this.toolbar) {
                        this.toolbarModule.getToolbar().ej2_instances[0].enableRtl = newProp.enableRtl;
                        this.toolbarModule.getToolbar().ej2_instances[0].dataBind();
                    }
                    if (this.contextMenuItems) {
                        this.contextMenuModule.getContextMenu().ej2_instances[0].enableRtl = newProp.enableRtl;
                        this.contextMenuModule.getContextMenu().ej2_instances[0].dataBind();
                    }
                    if (this.showColumnMenu) {
                        this.columnMenuModule.getColumnMenu().ej2_instances[0].enableRtl = newProp.enableRtl;
                        this.columnMenuModule.getColumnMenu().ej2_instances[0].dataBind();
                    }
                    this.notify(events.rtlUpdated, {});
                    break;
                case 'enableAltRow':
                    this.renderModule.refresh();
                    break;
                case 'frozenColumns':
                case 'frozenRows':
                    this.freezeRefresh();
                    break;
                case 'allowResizing':
                    this.headerModule.refreshUI();
                    this.updateResizeLines();
                    break;
                case 'rowHeight':
                    if (this.rowHeight) {
                        ej2_base_3.addClass([this.element], 'e-grid-min-height');
                    }
                    else {
                        ej2_base_3.removeClass([this.element], 'e-grid-min-height');
                    }
                    this.renderModule.refresh();
                    this.headerModule.refreshUI();
                    break;
                case 'gridLines':
                    this.updateGridLines();
                    break;
                case 'showColumnMenu':
                    this.headerModule.refreshUI();
                    this.notify(events.uiUpdate, { module: 'columnMenu', enable: true });
                    break;
                case 'columnMenuItems':
                    this.notify(events.uiUpdate, { module: 'columnMenu', enable: this.columnMenuItems });
                    break;
                case 'contextMenuItems':
                    this.notify(events.uiUpdate, { module: 'contextMenu', enable: this.contextMenuItems });
                    break;
                case 'showColumnChooser':
                    this.notify(events.uiUpdate, { module: 'columnChooser', enable: this.showColumnChooser });
                    break;
                case 'filterSettings':
                    this.updateStackedFilter();
                    this.notify(events.inBoundModelChanged, { module: 'filter', properties: newProp.filterSettings });
                    break;
                case 'searchSettings':
                    this.notify(events.inBoundModelChanged, { module: 'search', properties: newProp.searchSettings });
                    break;
                case 'sortSettings':
                    this.notify(events.inBoundModelChanged, { module: 'sort' });
                    break;
                case 'selectionSettings':
                    this.notify(events.inBoundModelChanged, { module: 'selection', properties: newProp.selectionSettings });
                    break;
                case 'editSettings':
                    this.notify(events.inBoundModelChanged, { module: 'edit', properties: newProp.editSettings });
                    break;
                case 'allowTextWrap':
                case 'textWrapSettings':
                    if (this.allowTextWrap) {
                        this.applyTextWrap();
                    }
                    else {
                        this.removeTextWrap();
                    }
                    this.notify(events.freezeRender, { case: 'textwrap', isModeChg: (prop === 'textWrapSettings') });
                    break;
                case 'dataSource':
                    var pending_1 = this.getDataModule().getState();
                    if (pending_1.isPending) {
                        var gResult_1 = !ej2_base_2.isNullOrUndefined(this.dataSource) ? this.dataSource.result : [];
                        (pending_1.group || []).forEach(function (name) {
                            gResult_1 = ej2_data_1.DataUtil.group(gResult_1, name, pending_1.aggregates || []);
                        });
                        this.dataSource = { result: gResult_1, count: this.dataSource.count };
                        pending_1.resolver(this.dataSource);
                    }
                    else {
                        this.getDataModule().setState({ isDataChanged: false });
                        this.notify(events.dataSourceModified, {});
                        this.renderModule.refresh();
                    }
                    break;
                case 'enableHover':
                    var action = newProp.enableHover ? ej2_base_3.addClass : ej2_base_3.removeClass;
                    action([this.element], 'e-gridhover');
                    break;
            }
        };
        Grid.prototype.setProperties = function (prop, muteOnChange) {
            _super.prototype.setProperties.call(this, prop, muteOnChange);
            if (this.filterModule && muteOnChange) {
                this.filterModule.refreshFilter();
            }
        };
        Grid.prototype.updateDefaultCursor = function () {
            var headerRows = [].slice.call(this.element.querySelectorAll('.e-columnheader'));
            for (var _i = 0, headerRows_1 = headerRows; _i < headerRows_1.length; _i++) {
                var row = headerRows_1[_i];
                if (this.allowSorting || this.allowGrouping || this.allowReordering) {
                    row.classList.remove('e-defaultcursor');
                }
                else {
                    row.classList.add('e-defaultcursor');
                }
            }
        };
        Grid.prototype.updateColumnModel = function (columns) {
            for (var i = 0, len = columns.length; i < len; i++) {
                if (columns[i].columns) {
                    this.updateColumnModel(columns[i].columns);
                }
                else {
                    this.columnModel.push(columns[i]);
                }
            }
            this.updateFrozenColumns();
        };
        Grid.prototype.updateFrozenColumns = function () {
            var cols = this.columnModel;
            var count = 0;
            for (var i = 0, len = cols.length; i < len; i++) {
                if (cols[i].isFrozen) {
                    cols.splice(this.frozenColumns + count, 0, cols.splice(i, 1)[0]);
                    count++;
                }
            }
        };
        Grid.prototype.getColumns = function (isRefresh) {
            var _this = this;
            var inview = this.inViewIndexes.map(function (v) { return v - _this.groupSettings.columns.length; }).filter(function (v) { return v > -1; });
            var vLen = inview.length;
            if (!this.enableColumnVirtualization || ej2_base_2.isNullOrUndefined(this.columnModel) || this.columnModel.length === 0 || isRefresh) {
                this.columnModel = [];
                this.updateColumnModel(this.columns);
            }
            var columns = vLen === 0 ? this.columnModel :
                this.columnModel.slice(inview[0], inview[vLen - 1] + 1);
            return columns;
        };
        Grid.prototype.getColumnIndexesInView = function () {
            return this.inViewIndexes;
        };
        Grid.prototype.getLocaleConstants = function () {
            return this.defaultLocale;
        };
        Grid.prototype.setColumnIndexesInView = function (indexes) {
            this.inViewIndexes = indexes;
        };
        Grid.prototype.getVisibleColumns = function () {
            var cols = [];
            for (var _i = 0, _a = this.columnModel; _i < _a.length; _i++) {
                var col = _a[_i];
                if (col.visible) {
                    cols.push(col);
                }
            }
            return cols;
        };
        Grid.prototype.getHeaderContent = function () {
            return this.headerModule.getPanel();
        };
        Grid.prototype.setGridHeaderContent = function (element) {
            this.headerModule.setPanel(element);
        };
        Grid.prototype.getContentTable = function () {
            return this.contentModule.getTable();
        };
        Grid.prototype.setGridContentTable = function (element) {
            this.contentModule.setTable(element);
        };
        Grid.prototype.getContent = function () {
            return this.contentModule.getPanel();
        };
        Grid.prototype.setGridContent = function (element) {
            this.contentModule.setPanel(element);
        };
        Grid.prototype.getHeaderTable = function () {
            return this.headerModule.getTable();
        };
        Grid.prototype.setGridHeaderTable = function (element) {
            this.headerModule.setTable(element);
        };
        Grid.prototype.getFooterContent = function () {
            if (ej2_base_2.isNullOrUndefined(this.footerElement)) {
                this.footerElement = this.element.getElementsByClassName('e-gridfooter')[0];
            }
            return this.footerElement;
        };
        Grid.prototype.getFooterContentTable = function () {
            if (ej2_base_2.isNullOrUndefined(this.footerElement)) {
                this.footerElement = this.element.getElementsByClassName('e-gridfooter')[0];
            }
            return this.footerElement.firstChild.firstChild;
        };
        Grid.prototype.getPager = function () {
            return this.gridPager;
        };
        Grid.prototype.setGridPager = function (element) {
            this.gridPager = element;
        };
        Grid.prototype.getRowByIndex = function (index) {
            return this.contentModule.getRowByIndex(index);
        };
        Grid.prototype.getMovableRowByIndex = function (index) {
            return this.contentModule.getMovableRowByIndex(index);
        };
        Grid.prototype.getRows = function () {
            return this.contentModule.getRowElements();
        };
        Grid.prototype.getRowInfo = function (target) {
            var ele = target;
            var args = { target: target };
            if (!ej2_base_2.isNullOrUndefined(target) && ej2_base_2.isNullOrUndefined(util_1.parentsUntil(ele, 'e-detailrowcollapse')
                && ej2_base_2.isNullOrUndefined(util_1.parentsUntil(ele, 'e-recordplusexpand'))) && !this.isEdit) {
                var cell = ej2_base_1.closest(ele, '.e-rowcell');
                if (!cell) {
                    return args;
                }
                var cellIndex = parseInt(cell.getAttribute('aria-colindex'), 10);
                if (!ej2_base_2.isNullOrUndefined(cell) && !isNaN(cellIndex)) {
                    var row_1 = ej2_base_1.closest(cell, '.e-row');
                    var rowIndex = parseInt(row_1.getAttribute('aria-rowindex'), 10);
                    var frzCols = this.getFrozenColumns();
                    var isMovable = frzCols ? cellIndex >= frzCols : false;
                    var rows = (isMovable ?
                        this.contentModule.getMovableRows() : this.contentModule.getRows());
                    var rowsObject = rows.filter(function (r) { return r.uid === row_1.getAttribute('data-uid'); });
                    var rowData = rowsObject[0].data;
                    var column = rowsObject[0].cells[isMovable ? cellIndex - frzCols : cellIndex].column;
                    args = { cell: cell, cellIndex: cellIndex, row: row_1, rowIndex: rowIndex, rowData: rowData, column: column, target: target };
                }
            }
            return args;
        };
        Grid.prototype.getMovableRows = function () {
            return this.contentModule.getMovableRowElements();
        };
        Grid.prototype.getDataRows = function () {
            var rows = [].slice.call(this.getContentTable().querySelector('tbody').children);
            if (this.frozenRows) {
                var freezeRows = [].slice.call(this.getHeaderTable().querySelector('tbody').children);
                rows = this.addMovableRows(freezeRows, rows);
            }
            var dataRows = this.generateDataRows(rows);
            return dataRows;
        };
        Grid.prototype.addMovableRows = function (fRows, mrows) {
            for (var i = 0, len = mrows.length; i < len; i++) {
                fRows.push(mrows[i]);
            }
            return fRows;
        };
        Grid.prototype.generateDataRows = function (rows) {
            var dRows = [];
            for (var i = 0, len = rows.length; i < len; i++) {
                if (rows[i].classList.contains('e-row') && !rows[i].classList.contains('e-hiddenrow')) {
                    dRows.push(rows[i]);
                }
            }
            return dRows;
        };
        Grid.prototype.getMovableDataRows = function () {
            var rows = [].slice.call(this.getContent().querySelector('.e-movablecontent').querySelector('tbody').children);
            if (this.frozenRows) {
                var freezeRows = [].slice.call(this.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody').children);
                rows = this.addMovableRows(freezeRows, rows);
            }
            var dataRows = this.generateDataRows(rows);
            return dataRows;
        };
        Grid.prototype.setCellValue = function (key, field, value) {
            var cells = 'cells';
            var rowData = 'data';
            var rowIdx = 'index';
            var rowuID = 'uid';
            var fieldIdx;
            var col;
            var tr;
            var pkName = this.getPrimaryKeyFieldNames()[0];
            var cell = new cell_renderer_1.CellRenderer(this, this.serviceLocator);
            var selectedRow = {};
            var rowObjects = this.contentModule.getRows();
            fieldIdx = this.getColumnIndexByField(field);
            col = this.getColumnByField(field);
            selectedRow = rowObjects.filter(function (r) {
                return ej2_base_2.getValue(pkName, r.data) === key;
            })[0];
            tr = !ej2_base_2.isNullOrUndefined(selectedRow) ? this.element.querySelector('[data-uid=' + selectedRow[rowuID] + ']') : null;
            if (!ej2_base_2.isNullOrUndefined(tr)) {
                ej2_base_2.setValue(field, value, selectedRow[rowData]);
                var td = tr.childNodes[fieldIdx];
                if (!ej2_base_2.isNullOrUndefined(td)) {
                    cell.refreshTD(td, selectedRow[cells][fieldIdx], selectedRow[rowData]);
                    this.trigger(events.queryCellInfo, {
                        cell: td, column: col, data: selectedRow[rowData]
                    });
                }
            }
            else {
                return;
            }
        };
        Grid.prototype.setRowData = function (key, rowData) {
            var rwdata = 'data';
            var rowuID = 'uid';
            var rowObjects = this.contentModule.getRows();
            var selectedRow;
            var pkName = this.getPrimaryKeyFieldNames()[0];
            var rowRenderer = new row_renderer_1.RowRenderer(this.serviceLocator, null, this);
            selectedRow = rowObjects.filter(function (r) {
                return ej2_base_2.getValue(pkName, r.data) === key;
            })[0];
            if (!ej2_base_2.isNullOrUndefined(selectedRow) && this.element.querySelectorAll('[data-uid=' + selectedRow[rowuID] + ']').length) {
                selectedRow.changes = rowData;
                util_1.refreshForeignData(selectedRow, this.getForeignKeyColumns(), selectedRow.changes);
                rowRenderer.refresh(selectedRow, this.getColumns(), true);
            }
            else {
                return;
            }
        };
        Grid.prototype.getCellFromIndex = function (rowIndex, columnIndex) {
            return this.getDataRows()[rowIndex].querySelectorAll('.e-rowcell')[columnIndex];
        };
        Grid.prototype.getMovableCellFromIndex = function (rowIndex, columnIndex) {
            return this.getMovableDataRows()[rowIndex].querySelectorAll('.e-rowcell')[columnIndex - this.getFrozenColumns()];
        };
        Grid.prototype.getColumnHeaderByIndex = function (index) {
            return this.getHeaderTable().querySelectorAll('.e-headercell')[index];
        };
        Grid.prototype.getRowObjectFromUID = function (uid) {
            var rows = this.contentModule.getRows();
            var row = this.rowObject(rows, uid);
            if (this.getFrozenColumns()) {
                if (!row) {
                    row = this.rowObject(this.contentModule.getMovableRows(), uid);
                    return row;
                }
            }
            return row;
        };
        Grid.prototype.rowObject = function (rows, uid) {
            for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                var row = rows_1[_i];
                if (row.uid === uid) {
                    return row;
                }
            }
            return null;
        };
        Grid.prototype.getRowsObject = function () {
            return this.contentModule.getRows();
        };
        Grid.prototype.getMovableRowsObject = function () {
            return this.contentModule.getMovableRows();
        };
        Grid.prototype.getColumnHeaderByField = function (field) {
            return this.getColumnHeaderByUid(this.getColumnByField(field).uid);
        };
        Grid.prototype.getColumnHeaderByUid = function (uid) {
            return this.getHeaderContent().querySelector('[e-mappinguid=' + uid + ']').parentElement;
        };
        Grid.prototype.getColumnByField = function (field) {
            return util_1.iterateArrayOrObject(this.getColumns(), function (item, index) {
                if (item.field === field) {
                    return item;
                }
                return undefined;
            })[0];
        };
        Grid.prototype.getColumnIndexByField = function (field) {
            var cols = this.getColumns();
            for (var i = 0; i < cols.length; i++) {
                if (cols[i].field === field) {
                    return i;
                }
            }
            return -1;
        };
        Grid.prototype.getColumnByUid = function (uid) {
            return util_1.iterateArrayOrObject(this.getColumns(), function (item, index) {
                if (item.uid === uid) {
                    return item;
                }
                return undefined;
            })[0];
        };
        Grid.prototype.getColumnIndexByUid = function (uid) {
            var index = util_1.iterateArrayOrObject(this.getColumns(), function (item, index) {
                if (item.uid === uid) {
                    return index;
                }
                return undefined;
            })[0];
            return !ej2_base_2.isNullOrUndefined(index) ? index : -1;
        };
        Grid.prototype.getUidByColumnField = function (field) {
            return util_1.iterateArrayOrObject(this.getColumns(), function (item, index) {
                if (item.field === field) {
                    return item.uid;
                }
                return undefined;
            })[0];
        };
        Grid.prototype.getNormalizedColumnIndex = function (uid) {
            var index = this.getColumnIndexByUid(uid);
            if (this.allowGrouping) {
                index += this.groupSettings.columns.length;
            }
            if (this.isDetail()) {
                index++;
            }
            return index;
        };
        Grid.prototype.getColumnFieldNames = function () {
            var columnNames = [];
            var column;
            for (var i = 0, len = this.getColumns().length; i < len; i++) {
                column = this.getColumns()[i];
                if (column.visible) {
                    columnNames.push(column.field);
                }
            }
            return columnNames;
        };
        Grid.prototype.getRowTemplate = function () {
            return this.rowTemplateFn;
        };
        Grid.prototype.getDetailTemplate = function () {
            return this.detailTemplateFn;
        };
        Grid.prototype.getPrimaryKeyFieldNames = function () {
            var keys = [];
            for (var key = 0, col = this.columns, cLen = col.length; key < cLen; key++) {
                if (col[key].isPrimaryKey) {
                    keys.push(col[key].field);
                }
            }
            return keys;
        };
        Grid.prototype.refresh = function () {
            this.headerModule.refreshUI();
            this.updateStackedFilter();
            this.renderModule.refresh();
        };
        Grid.prototype.refreshHeader = function () {
            this.headerModule.refreshUI();
        };
        Grid.prototype.getSelectedRows = function () {
            return this.selectionModule ? this.selectionModule.selectedRecords : [];
        };
        Grid.prototype.getSelectedRowIndexes = function () {
            return this.selectionModule ? this.selectionModule.selectedRowIndexes : [];
        };
        Grid.prototype.getSelectedRowCellIndexes = function () {
            return this.selectionModule.selectedRowCellIndexes;
        };
        Grid.prototype.getSelectedRecords = function () {
            return this.selectionModule.getSelectedRecords();
        };
        Grid.prototype.getDataModule = function () {
            return this.renderModule.data;
        };
        Grid.prototype.showColumns = function (keys, showBy) {
            showBy = showBy ? showBy : 'headerText';
            this.showHider.show(keys, showBy);
        };
        Grid.prototype.hideColumns = function (keys, hideBy) {
            hideBy = hideBy ? hideBy : 'headerText';
            this.showHider.hide(keys, hideBy);
        };
        Grid.prototype.getFrozenColumns = function () {
            return this.frozenColumns + this.getFrozenCount(this.columns, 0);
        };
        Grid.prototype.getVisibleFrozenColumns = function () {
            return this.getVisibleFrozenColumnsCount() + this.getVisibleFrozenCount(this.columns, 0);
        };
        Grid.prototype.getVisibleFrozenColumnsCount = function () {
            var visibleFrozenColumns = 0;
            var col = this.columns;
            for (var i = 0; i < this.frozenColumns; i++) {
                if (col[i].visible) {
                    visibleFrozenColumns++;
                }
            }
            return visibleFrozenColumns;
        };
        Grid.prototype.getVisibleFrozenCount = function (cols, cnt) {
            for (var i = 0, len = cols.length; i < len; i++) {
                if (cols[i].columns) {
                    cnt = this.getVisibleFrozenCount(cols[i].columns, cnt);
                }
                else {
                    if (cols[i].isFrozen && cols[i].visible) {
                        cnt++;
                    }
                }
            }
            return cnt;
        };
        Grid.prototype.getFrozenCount = function (cols, cnt) {
            for (var i = 0, len = cols.length; i < len; i++) {
                if (cols[i].columns) {
                    cnt = this.getFrozenCount(cols[i].columns, cnt);
                }
                else {
                    if (cols[i].isFrozen) {
                        cnt++;
                    }
                }
            }
            return cnt;
        };
        Grid.prototype.goToPage = function (pageNo) {
            this.pagerModule.goToPage(pageNo);
        };
        Grid.prototype.updateExternalMessage = function (message) {
            this.pagerModule.updateExternalMessage(message);
        };
        Grid.prototype.sortColumn = function (columnName, direction, isMultiSort) {
            this.sortModule.sortColumn(columnName, direction, isMultiSort);
        };
        Grid.prototype.clearSorting = function () {
            this.sortModule.clearSorting();
        };
        Grid.prototype.removeSortColumn = function (field) {
            this.sortModule.removeSortColumn(field);
        };
        Grid.prototype.filterByColumn = function (fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator) {
            this.filterModule.filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator);
        };
        Grid.prototype.clearFiltering = function () {
            this.filterModule.clearFiltering();
        };
        Grid.prototype.removeFilteredColsByField = function (field, isClearFilterBar) {
            this.filterModule.removeFilteredColsByField(field, isClearFilterBar);
        };
        Grid.prototype.selectRow = function (index, isToggle) {
            this.selectionModule.selectRow(index, isToggle);
        };
        Grid.prototype.selectRows = function (rowIndexes) {
            this.selectionModule.selectRows(rowIndexes);
        };
        Grid.prototype.clearSelection = function () {
            this.selectionModule.clearSelection();
        };
        Grid.prototype.selectCell = function (cellIndex, isToggle) {
            this.selectionModule.selectCell(cellIndex, isToggle);
        };
        Grid.prototype.search = function (searchString) {
            this.searchModule.search(searchString);
        };
        Grid.prototype.print = function () {
            this.printModule.print();
        };
        Grid.prototype.deleteRecord = function (fieldname, data) {
            this.editModule.deleteRecord(fieldname, data);
        };
        Grid.prototype.startEdit = function () {
            this.editModule.startEdit();
        };
        Grid.prototype.endEdit = function () {
            this.editModule.endEdit();
        };
        Grid.prototype.closeEdit = function () {
            this.editModule.closeEdit();
        };
        Grid.prototype.addRecord = function (data, index) {
            this.editModule.addRecord(data, index);
        };
        Grid.prototype.deleteRow = function (tr) {
            this.editModule.deleteRow(tr);
        };
        Grid.prototype.copy = function (withHeader) {
            this.clipboardModule.copy(withHeader);
        };
        Grid.prototype.recalcIndentWidth = function () {
            if (!this.getHeaderTable().querySelector('.e-emptycell')) {
                return;
            }
            if ((!this.groupSettings.columns.length && !this.isDetail()) ||
                this.getHeaderTable().querySelector('.e-emptycell').getAttribute('indentRefreshed') ||
                !this.getContentTable()) {
                return;
            }
            var indentWidth = this.getHeaderTable().querySelector('.e-emptycell').parentElement.offsetWidth;
            var headerCol = [].slice.call(this.getHeaderTable().querySelector('colgroup').childNodes);
            var contentCol = [].slice.call(this.getContentTable().querySelector('colgroup').childNodes);
            var perPixel = indentWidth / 30;
            var i = 0;
            if (perPixel >= 1) {
                indentWidth = (30 / perPixel);
            }
            if (this.enableColumnVirtualization) {
                indentWidth = 30;
            }
            while (i < this.groupSettings.columns.length) {
                headerCol[i].style.width = indentWidth + 'px';
                contentCol[i].style.width = indentWidth + 'px';
                this.notify(events.columnWidthChanged, { index: i, width: indentWidth });
                i++;
            }
            if (this.isDetail()) {
                headerCol[i].style.width = indentWidth + 'px';
                contentCol[i].style.width = indentWidth + 'px';
                this.notify(events.columnWidthChanged, { index: i, width: indentWidth });
            }
            this.getHeaderTable().querySelector('.e-emptycell').setAttribute('indentRefreshed', 'true');
        };
        Grid.prototype.reorderColumns = function (fromFName, toFName) {
            this.reorderModule.reorderColumns(fromFName, toFName);
        };
        Grid.prototype.autoFitColumns = function (fieldNames) {
            this.resizeModule.autoFitColumns(fieldNames);
        };
        Grid.prototype.createColumnchooser = function (x, y, target) {
            this.columnChooserModule.renderColumnChooser(x, y, target);
        };
        Grid.prototype.initializeServices = function () {
            this.serviceLocator.register('widthService', this.widthService = new width_controller_1.ColumnWidthService(this));
            this.serviceLocator.register('cellRendererFactory', new cell_render_factory_1.CellRendererFactory);
            this.serviceLocator.register('rendererFactory', new renderer_factory_1.RendererFactory);
            this.serviceLocator.register('localization', this.localeObj = new ej2_base_4.L10n(this.getModuleName(), this.defaultLocale, this.locale));
            this.serviceLocator.register('valueFormatter', this.valueFormatterService = new value_formatter_1.ValueFormatter(this.locale));
            this.serviceLocator.register('showHideService', this.showHider = new show_hide_1.ShowHide(this));
            this.serviceLocator.register('ariaService', this.ariaService = new aria_service_1.AriaService());
            this.serviceLocator.register('focus', this.focusModule = new focus_strategy_1.FocusStrategy(this));
        };
        Grid.prototype.processModel = function () {
            var _this = this;
            var gCols = this.groupSettings.columns;
            var sCols = this.sortSettings.columns;
            var flag;
            var j;
            if (this.allowGrouping) {
                var _loop_1 = function (i, len) {
                    j = 0;
                    for (var sLen = sCols.length; j < sLen; j++) {
                        if (sCols[j].field === gCols[i]) {
                            flag = true;
                            break;
                        }
                    }
                    if (!flag) {
                        sCols.push({ field: gCols[i], direction: 'Ascending' });
                    }
                    else {
                        if (this_1.allowSorting) {
                            this_1.sortedColumns.push(sCols[j].field);
                        }
                        else {
                            sCols[j].direction = 'Ascending';
                        }
                    }
                    if (!this_1.groupSettings.showGroupedColumn) {
                        var column = this_1.enableColumnVirtualization ?
                            this_1.columns.filter(function (c) { return c.field === gCols[i]; })[0] : this_1.getColumnByField(gCols[i]);
                        column.visible = false;
                    }
                };
                var this_1 = this;
                for (var i = 0, len = gCols.length; i < len; i++) {
                    _loop_1(i, len);
                }
            }
            if (!gCols.length) {
                sCols.forEach(function (col) {
                    _this.sortedColumns.push(col.field);
                });
            }
            this.rowTemplateFn = util_1.templateCompiler(this.rowTemplate);
            this.detailTemplateFn = util_1.templateCompiler(this.detailTemplate);
            if (!ej2_base_2.isNullOrUndefined(this.parentDetails)) {
                var value = ej2_base_2.isNullOrUndefined(this.parentDetails.parentKeyFieldValue) ? 'undefined' :
                    this.parentDetails.parentKeyFieldValue;
                this.query.where(this.queryString, 'equal', value, true);
            }
            this.initForeignColumn();
        };
        Grid.prototype.initForeignColumn = function () {
            if (this.isForeignKeyEnabled(this.getColumns())) {
                this.notify(events.initForeignKeyColumn, this.getForeignKeyColumns());
            }
        };
        Grid.prototype.gridRender = function () {
            this.updateRTL();
            if (this.enableHover) {
                this.element.classList.add('e-gridhover');
            }
            if (ej2_base_1.Browser.isDevice) {
                this.element.classList.add('e-device');
            }
            if (this.rowHeight) {
                this.element.classList.add('e-grid-min-height');
            }
            ej2_base_3.classList(this.element, ['e-responsive', 'e-default'], []);
            var rendererFactory = this.serviceLocator.getService('rendererFactory');
            this.headerModule = rendererFactory.getRenderer(enum_1.RenderType.Header);
            this.contentModule = rendererFactory.getRenderer(enum_1.RenderType.Content);
            this.printModule = new print_1.Print(this, this.scrollModule);
            this.clipboardModule = new clipboard_1.Clipboard(this);
            this.renderModule.render();
            this.eventInitializer();
            this.createGridPopUpElement();
            this.widthService.setWidthToColumns();
            this.updateGridLines();
            this.applyTextWrap();
            this.createTooltip();
        };
        Grid.prototype.dataReady = function () {
            this.scrollModule.setWidth();
            this.scrollModule.setHeight();
            if (this.height !== 'auto') {
                this.scrollModule.setPadding();
            }
        };
        Grid.prototype.updateRTL = function () {
            if (this.enableRtl) {
                this.element.classList.add('e-rtl');
            }
            else {
                this.element.classList.remove('e-rtl');
            }
        };
        Grid.prototype.createGridPopUpElement = function () {
            var popup = ej2_base_3.createElement('div', { className: 'e-gridpopup', styles: 'display:none;' });
            var content = ej2_base_3.createElement('div', { className: 'e-content', attrs: { tabIndex: '-1' } });
            ej2_base_3.append([content, ej2_base_3.createElement('div', { className: 'e-uptail e-tail' })], popup);
            content.appendChild(ej2_base_3.createElement('span'));
            ej2_base_3.append([content, ej2_base_3.createElement('div', { className: 'e-downtail e-tail' })], popup);
            this.element.appendChild(popup);
        };
        Grid.prototype.updateGridLines = function () {
            ej2_base_3.classList(this.element, [], ['e-verticallines', 'e-horizontallines', 'e-hidelines', 'e-bothlines']);
            switch (this.gridLines) {
                case 'Horizontal':
                    this.element.classList.add('e-horizontallines');
                    break;
                case 'Vertical':
                    this.element.classList.add('e-verticallines');
                    break;
                case 'None':
                    this.element.classList.add('e-hidelines');
                    break;
                case 'Both':
                    this.element.classList.add('e-bothlines');
                    break;
            }
            this.updateResizeLines();
        };
        Grid.prototype.updateResizeLines = function () {
            if (this.allowResizing &&
                !(this.gridLines === 'Vertical' || this.gridLines === 'Both')) {
                this.element.classList.add('e-resize-lines');
            }
            else {
                this.element.classList.remove('e-resize-lines');
            }
        };
        Grid.prototype.applyTextWrap = function () {
            if (this.allowTextWrap) {
                var headerRows = [].slice.call(this.element.querySelectorAll('.e-columnheader'));
                switch (this.textWrapSettings.wrapMode) {
                    case 'Header':
                        util_1.wrap(this.element, false);
                        util_1.wrap(this.getContent(), false);
                        util_1.wrap(headerRows, true);
                        break;
                    case 'Content':
                        util_1.wrap(this.getContent(), true);
                        util_1.wrap(this.element, false);
                        util_1.wrap(headerRows, false);
                        break;
                    default:
                        util_1.wrap(this.element, true);
                        util_1.wrap(this.getContent(), false);
                        util_1.wrap(headerRows, false);
                }
            }
        };
        Grid.prototype.removeTextWrap = function () {
            util_1.wrap(this.element, false);
            var headerRows = [].slice.call(this.element.querySelectorAll('.e-columnheader'));
            util_1.wrap(headerRows, false);
            util_1.wrap(this.getContent(), false);
        };
        Grid.prototype.createTooltip = function () {
            this.toolTipObj = new ej2_popups_1.Tooltip({ opensOn: 'custom', content: '' }, this.element);
        };
        Grid.prototype.getTooltipStatus = function (element) {
            var width;
            var headerTable = this.getHeaderTable();
            var contentTable = this.getContentTable();
            var headerDivTag = 'e-gridheader';
            var contentDivTag = 'e-gridcontent';
            var htable = this.createTable(headerTable, headerDivTag, 'header');
            var ctable = this.createTable(headerTable, headerDivTag, 'content');
            var td = element;
            var table = headerTable.contains(element) ? htable : ctable;
            var ele = headerTable.contains(element) ? 'th' : 'tr';
            table.querySelector(ele).className = element.className;
            table.querySelector(ele).innerHTML = element.innerHTML;
            width = table.querySelector(ele).getBoundingClientRect().width;
            document.body.removeChild(htable);
            document.body.removeChild(ctable);
            if (width > element.getBoundingClientRect().width) {
                return true;
            }
            return false;
        };
        Grid.prototype.mouseMoveHandler = function (e) {
            if (this.isEllipsisTooltip()) {
                var element = util_1.parentsUntil(e.target, 'e-ellipsistooltip');
                if (element) {
                    if (element.getAttribute('aria-describedby')) {
                        return;
                    }
                    if (this.getTooltipStatus(element)) {
                        if (element.getElementsByClassName('e-headertext').length) {
                            this.toolTipObj.content = element.getElementsByClassName('e-headertext')[0].innerHTML;
                        }
                        else {
                            this.toolTipObj.content = element.innerHTML;
                        }
                        this.toolTipObj.open(element);
                    }
                    else {
                        this.toolTipObj.close();
                    }
                }
                else {
                    this.toolTipObj.close();
                }
            }
        };
        Grid.prototype.isEllipsisTooltip = function () {
            var cols = this.getColumns();
            for (var i = 0; i < cols.length; i++) {
                if (cols[i].clipMode === 'EllipsisWithTooltip') {
                    return true;
                }
            }
            return false;
        };
        Grid.prototype.scrollHandler = function () {
            if (this.isEllipsisTooltip()) {
                this.toolTipObj.close();
            }
        };
        Grid.prototype.createTable = function (table, tag, type) {
            var myTableDiv = ej2_base_3.createElement('div');
            myTableDiv.className = this.element.className;
            myTableDiv.style.cssText = 'display: inline-block;visibility:hidden;position:absolute';
            var mySubDiv = ej2_base_3.createElement('div');
            mySubDiv.className = tag;
            var myTable = ej2_base_3.createElement('table');
            myTable.className = table.className;
            myTable.style.cssText = 'table-layout: auto;width: auto';
            var ele = (type === 'header') ? 'th' : 'td';
            var myTr = ej2_base_3.createElement('tr');
            var mytd = ej2_base_3.createElement(ele);
            myTr.appendChild(mytd);
            myTable.appendChild(myTr);
            mySubDiv.appendChild(myTable);
            myTableDiv.appendChild(mySubDiv);
            document.body.appendChild(myTableDiv);
            return myTableDiv;
        };
        Grid.prototype.wireEvents = function () {
            ej2_base_5.EventHandler.add(this.element, 'click', this.mouseClickHandler, this);
            ej2_base_5.EventHandler.add(this.element, 'touchend', this.mouseClickHandler, this);
            ej2_base_5.EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);
            ej2_base_5.EventHandler.add(this.getContent(), 'dblclick', this.dblClickHandler, this);
            if (this.allowKeyboard) {
                this.element.tabIndex = this.element.tabIndex === -1 ? 0 : this.element.tabIndex;
            }
            this.keyboardModule = new ej2_base_5.KeyboardEvents(this.element, {
                keyAction: this.keyActionHandler.bind(this),
                keyConfigs: this.keyConfigs,
                eventName: 'keydown'
            });
            ej2_base_5.EventHandler.add(this.getContent().firstElementChild, 'scroll', this.scrollHandler, this);
            ej2_base_5.EventHandler.add(this.element, 'mousemove', this.mouseMoveHandler, this);
        };
        Grid.prototype.unwireEvents = function () {
            ej2_base_5.EventHandler.remove(this.element, 'click', this.mouseClickHandler);
            ej2_base_5.EventHandler.remove(this.element, 'touchend', this.mouseClickHandler);
            ej2_base_5.EventHandler.remove(this.element, 'focusout', this.focusOutHandler);
            ej2_base_5.EventHandler.remove(this.getContent().firstElementChild, 'scroll', this.scrollHandler);
            ej2_base_5.EventHandler.remove(this.element, 'mousemove', this.mouseMoveHandler);
        };
        Grid.prototype.addListener = function () {
            if (this.isDestroyed) {
                return;
            }
            this.on(events.dataReady, this.dataReady, this);
            this.on(events.contentReady, this.recalcIndentWidth, this);
            this.on(events.headerRefreshed, this.recalcIndentWidth, this);
            this.dataBoundFunction = this.refreshMediaCol.bind(this);
            this.addEventListener(events.dataBound, this.dataBoundFunction);
        };
        Grid.prototype.removeListener = function () {
            if (this.isDestroyed) {
                return;
            }
            this.off(events.dataReady, this.dataReady);
            this.off(events.contentReady, this.recalcIndentWidth);
            this.off(events.headerRefreshed, this.recalcIndentWidth);
            this.removeEventListener(events.dataBound, this.dataBoundFunction);
        };
        Grid.prototype.getCurrentViewRecords = function () {
            return (this.allowGrouping && this.groupSettings.columns.length) ?
                this.currentViewData.records : this.currentViewData;
        };
        Grid.prototype.mouseClickHandler = function (e) {
            if (this.isChildGrid(e) || (util_1.parentsUntil(e.target, 'e-gridpopup') && e.touches) ||
                this.element.querySelectorAll('.e-cloneproperties').length || this.checkEdit(e)) {
                return;
            }
            if (((!this.allowRowDragAndDrop && (util_1.parentsUntil(e.target, 'e-gridcontent') ||
                e.target.tagName === 'TD')) || (!(this.allowGrouping || this.allowReordering) &&
                util_1.parentsUntil(e.target, 'e-gridheader'))) && e.touches) {
                return;
            }
            if (util_1.parentsUntil(e.target, 'e-gridheader') && this.allowRowDragAndDrop) {
                e.preventDefault();
            }
            this.notify(events.click, e);
        };
        Grid.prototype.checkEdit = function (e) {
            var tr = util_1.parentsUntil(e.target, 'e-row');
            var isEdit = this.editSettings.mode !== 'Batch' &&
                this.isEdit && tr && (tr.classList.contains('e-editedrow') || tr.classList.contains('e-addedrow'));
            return !util_1.parentsUntil(e.target, 'e-unboundcelldiv') && (isEdit || (util_1.parentsUntil(e.target, 'e-rowcell') &&
                util_1.parentsUntil(e.target, 'e-rowcell').classList.contains('e-editedbatchcell')));
        };
        Grid.prototype.dblClickHandler = function (e) {
            var grid = util_1.parentsUntil(e.target, 'e-grid');
            if (ej2_base_2.isNullOrUndefined(grid) || grid.id !== this.element.id || ej2_base_1.closest(e.target, '.e-unboundcelldiv')) {
                return;
            }
            var args = this.getRowInfo(e.target);
            args.target = e.target;
            this.trigger(events.recordDoubleClick, args);
            this.notify(events.dblclick, e);
        };
        Grid.prototype.focusOutHandler = function (e) {
            if (this.isChildGrid(e)) {
                return;
            }
            if (!util_1.parentsUntil(e.target, 'e-grid')) {
                this.element.querySelector('.e-gridpopup').style.display = 'None';
            }
            var filterClear = this.element.querySelector('.e-cancel:not(.e-hide)');
            if (filterClear) {
                filterClear.classList.add('e-hide');
            }
            if ((!e.relatedTarget || !util_1.parentsUntil(e.relatedTarget, 'e-grid'))
                && !this.keyPress && this.editSettings.mode === 'Batch' && this.isEdit) {
                this.editModule.saveCell();
            }
            this.keyPress = false;
        };
        Grid.prototype.isChildGrid = function (e) {
            var gridElement = util_1.parentsUntil(e.target, 'e-grid');
            if (gridElement && gridElement.id !== this.element.id) {
                return true;
            }
            return false;
        };
        Grid.prototype.mergePersistGridData = function () {
            var data = window.localStorage.getItem(this.getModuleName() + this.element.id);
            if (!(ej2_base_2.isNullOrUndefined(data) || (data === ''))) {
                var dataObj = JSON.parse(data);
                var keys = Object.keys(dataObj);
                this.isProtectedOnChange = true;
                for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                    var key = keys_1[_i];
                    if ((typeof this[key] === 'object') && !ej2_base_2.isNullOrUndefined(this[key])) {
                        if (Array.isArray(this[key]) && key === 'columns') {
                            this.mergeColumns(dataObj[key], this[key]);
                            this[key] = dataObj[key];
                        }
                        else {
                            ej2_base_1.extend(this[key], dataObj[key]);
                        }
                    }
                    else {
                        this[key] = dataObj[key];
                    }
                }
                this.isProtectedOnChange = false;
            }
        };
        Grid.prototype.mergeColumns = function (storedColumn, columns) {
            var _this = this;
            storedColumn.forEach(function (col, index, arr) {
                var ind;
                var localCol = _this.getColumnByField(col.field) ||
                    columns.some(function (element, i) {
                        ind = i;
                        return element.headerText === col.headerText;
                    }) && columns[ind];
                if (!ej2_base_2.isNullOrUndefined(localCol)) {
                    if (localCol.columns && localCol.columns.length) {
                        _this.mergeColumns(col.columns, localCol.columns);
                    }
                    else {
                        arr[index] = ej2_base_1.extend({}, localCol, col, true);
                    }
                }
            });
        };
        Grid.prototype.isDetail = function () {
            return !ej2_base_2.isNullOrUndefined(this.detailTemplate) || !ej2_base_2.isNullOrUndefined(this.childGrid);
        };
        Grid.prototype.isCommandColumn = function (columns) {
            var _this = this;
            return columns.some(function (col) {
                if (col.columns) {
                    return _this.isCommandColumn(col.columns);
                }
                return !!(col.commands || col.commandsTemplate);
            });
        };
        Grid.prototype.isForeignKeyEnabled = function (columns) {
            var _this = this;
            return columns.some(function (col) {
                if (col.columns) {
                    return _this.isForeignKeyEnabled(col.columns);
                }
                return !!(col.dataSource && col.foreignKeyValue);
            });
        };
        Grid.prototype.keyActionHandler = function (e) {
            this.keyPress = true;
            if (this.isChildGrid(e) ||
                (this.isEdit && e.action !== 'escape' && e.action !== 'enter' && e.action !== 'shiftEnter'
                    && e.action !== 'tab' && e.action !== 'shiftTab')) {
                return;
            }
            if (this.allowKeyboard) {
                if (e.action === 'ctrlPlusP') {
                    e.preventDefault();
                    this.print();
                }
                this.notify(events.keyPressed, e);
            }
        };
        Grid.prototype.setInjectedModules = function (modules) {
            this.injectedModules = modules;
        };
        Grid.prototype.updateColumnObject = function () {
            util_1.prepareColumns(this.columns, this.enableColumnVirtualization);
            this.initForeignColumn();
            this.notify(events.autoCol, {});
        };
        Grid.prototype.getForeignKeyColumns = function () {
            return this.getColumns().filter(function (col) {
                return col.isForeignColumn();
            });
        };
        Grid.prototype.refreshColumns = function () {
            this.updateColumnObject();
            this.refresh();
        };
        Grid.prototype.excelExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {
            return this.excelExportModule.Map(this, excelExportProperties, isMultipleExport, workbook, false, isBlob);
        };
        Grid.prototype.csvExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {
            return this.excelExportModule.Map(this, excelExportProperties, isMultipleExport, workbook, true, isBlob);
        };
        Grid.prototype.pdfExport = function (pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
            return this.pdfExportModule.Map(this, pdfExportProperties, isMultipleExport, pdfDoc, isBlob);
        };
        Grid.prototype.groupColumn = function (columnName) {
            this.groupModule.groupColumn(columnName);
        };
        Grid.prototype.ungroupColumn = function (columnName) {
            this.groupModule.ungroupColumn(columnName);
        };
        Grid.prototype.isContextMenuOpen = function () {
            return this.contextMenuModule && this.contextMenuModule.isOpen;
        };
        Grid.prototype.ensureModuleInjected = function (module) {
            return this.getInjectedModules().indexOf(module) >= 0;
        };
        Grid.prototype.destroyTemplate = function (propertyNames) {
            this.clearTemplate(propertyNames);
        };
        __decorate([
            ej2_base_4.Property([])
        ], Grid.prototype, "columns", void 0);
        __decorate([
            ej2_base_4.Property(true)
        ], Grid.prototype, "enableAltRow", void 0);
        __decorate([
            ej2_base_4.Property(true)
        ], Grid.prototype, "enableHover", void 0);
        __decorate([
            ej2_base_4.Property(true)
        ], Grid.prototype, "allowKeyboard", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], Grid.prototype, "allowTextWrap", void 0);
        __decorate([
            ej2_base_4.Complex({}, TextWrapSettings)
        ], Grid.prototype, "textWrapSettings", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], Grid.prototype, "allowPaging", void 0);
        __decorate([
            ej2_base_4.Complex({}, page_settings_1.PageSettings)
        ], Grid.prototype, "pageSettings", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], Grid.prototype, "enableVirtualization", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], Grid.prototype, "enableColumnVirtualization", void 0);
        __decorate([
            ej2_base_4.Complex({}, SearchSettings)
        ], Grid.prototype, "searchSettings", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], Grid.prototype, "allowSorting", void 0);
        __decorate([
            ej2_base_4.Property(true)
        ], Grid.prototype, "allowMultiSorting", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], Grid.prototype, "allowExcelExport", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], Grid.prototype, "allowPdfExport", void 0);
        __decorate([
            ej2_base_4.Complex({}, SortSettings)
        ], Grid.prototype, "sortSettings", void 0);
        __decorate([
            ej2_base_4.Property(true)
        ], Grid.prototype, "allowSelection", void 0);
        __decorate([
            ej2_base_4.Property(-1)
        ], Grid.prototype, "selectedRowIndex", void 0);
        __decorate([
            ej2_base_4.Complex({}, SelectionSettings)
        ], Grid.prototype, "selectionSettings", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], Grid.prototype, "allowFiltering", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], Grid.prototype, "allowReordering", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], Grid.prototype, "allowResizing", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], Grid.prototype, "allowRowDragAndDrop", void 0);
        __decorate([
            ej2_base_4.Complex({}, RowDropSettings)
        ], Grid.prototype, "rowDropSettings", void 0);
        __decorate([
            ej2_base_4.Complex({}, FilterSettings)
        ], Grid.prototype, "filterSettings", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], Grid.prototype, "allowGrouping", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], Grid.prototype, "showColumnMenu", void 0);
        __decorate([
            ej2_base_4.Complex({}, GroupSettings)
        ], Grid.prototype, "groupSettings", void 0);
        __decorate([
            ej2_base_4.Complex({}, EditSettings)
        ], Grid.prototype, "editSettings", void 0);
        __decorate([
            ej2_base_4.Collection([], aggregate_1.AggregateRow)
        ], Grid.prototype, "aggregates", void 0);
        __decorate([
            ej2_base_4.Property(false)
        ], Grid.prototype, "showColumnChooser", void 0);
        __decorate([
            ej2_base_4.Property('auto')
        ], Grid.prototype, "height", void 0);
        __decorate([
            ej2_base_4.Property('auto')
        ], Grid.prototype, "width", void 0);
        __decorate([
            ej2_base_4.Property('Default')
        ], Grid.prototype, "gridLines", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Grid.prototype, "rowTemplate", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Grid.prototype, "detailTemplate", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Grid.prototype, "childGrid", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Grid.prototype, "queryString", void 0);
        __decorate([
            ej2_base_4.Property('AllPages')
        ], Grid.prototype, "printMode", void 0);
        __decorate([
            ej2_base_4.Property([])
        ], Grid.prototype, "dataSource", void 0);
        __decorate([
            ej2_base_4.Property(null)
        ], Grid.prototype, "rowHeight", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Grid.prototype, "query", void 0);
        __decorate([
            ej2_base_4.Property('USD')
        ], Grid.prototype, "currencyCode", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Grid.prototype, "toolbar", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Grid.prototype, "contextMenuItems", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Grid.prototype, "columnMenuItems", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Grid.prototype, "toolbarTemplate", void 0);
        __decorate([
            ej2_base_4.Property()
        ], Grid.prototype, "pagerTemplate", void 0);
        __decorate([
            ej2_base_4.Property(0)
        ], Grid.prototype, "frozenRows", void 0);
        __decorate([
            ej2_base_4.Property(0)
        ], Grid.prototype, "frozenColumns", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "created", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "destroyed", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "load", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "rowDataBound", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "queryCellInfo", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "actionBegin", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "actionComplete", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "actionFailure", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "dataBound", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "recordDoubleClick", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "rowSelecting", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "rowSelected", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "rowDeselecting", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "rowDeselected", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "cellSelecting", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "cellSelected", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "cellDeselecting", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "cellDeselected", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "columnDragStart", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "columnDrag", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "columnDrop", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "printComplete", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "beforePrint", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "pdfQueryCellInfo", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "excelQueryCellInfo", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "beforeExcelExport", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "excelExportComplete", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "beforePdfExport", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "pdfExportComplete", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "detailDataBound", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "rowDragStart", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "rowDrag", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "rowDrop", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "toolbarClick", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "beforeOpenColumnChooser", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "batchAdd", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "batchDelete", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "beforeBatchAdd", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "beforeBatchDelete", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "beforeBatchSave", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "beginEdit", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "cellEdit", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "cellSave", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "resizeStart", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "resizing", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "resizeStop", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "beforeDataBound", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "contextMenuOpen", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "contextMenuClick", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "columnMenuOpen", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "columnMenuClick", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "checkBoxChange", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "beforeCopy", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "dataStateChange", void 0);
        __decorate([
            ej2_base_4.Event()
        ], Grid.prototype, "dataSourceChanged", void 0);
        Grid = __decorate([
            ej2_base_4.NotifyPropertyChanges
        ], Grid);
        return Grid;
    }(ej2_base_1.Component));
    exports.Grid = Grid;
    Grid.Inject(selection_1.Selection);
});
