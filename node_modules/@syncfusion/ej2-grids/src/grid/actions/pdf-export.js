define(["require", "exports", "../base/constant", "@syncfusion/ej2-pdf-export", "@syncfusion/ej2-pdf-export", "@syncfusion/ej2-pdf-export", "@syncfusion/ej2-pdf-export", "@syncfusion/ej2-pdf-export", "@syncfusion/ej2-pdf-export", "./export-helper", "../actions/data", "../services/summary-model-generator", "@syncfusion/ej2-base", "../base/enum", "@syncfusion/ej2-data", "@syncfusion/ej2-base"], function (require, exports, events, ej2_pdf_export_1, ej2_pdf_export_2, ej2_pdf_export_3, ej2_pdf_export_4, ej2_pdf_export_5, ej2_pdf_export_6, export_helper_1, data_1, summary_model_generator_1, ej2_base_1, enum_1, ej2_data_1, ej2_base_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfExport = (function () {
        function PdfExport(parent) {
            this.hideColumnInclude = false;
            this.currentViewData = false;
            this.customDataSource = false;
            this.isGrouping = false;
            this.parent = parent;
            this.helper = new export_helper_1.ExportHelper(parent);
        }
        PdfExport.prototype.getModuleName = function () {
            return 'PdfExport';
        };
        PdfExport.prototype.init = function (parent) {
            this.exportValueFormatter = new export_helper_1.ExportValueFormatter();
            this.pdfDocument = undefined;
            this.hideColumnInclude = false;
            this.currentViewData = false;
            this.parent = parent;
            var gObj = parent;
            this.isGrouping = false;
            this.isExporting = true;
            gObj.trigger(events.beforePdfExport);
        };
        PdfExport.prototype.Map = function (parent, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
            var _this = this;
            this.data = new data_1.Data(this.parent);
            this.isBlob = isBlob;
            if (!ej2_base_1.isNullOrUndefined(pdfExportProperties) && !ej2_base_1.isNullOrUndefined(pdfExportProperties.dataSource) && pdfExportProperties.dataSource instanceof ej2_data_1.DataManager) {
                return new Promise(function (resolve, reject) {
                    new ej2_data_1.DataManager({ url: pdfExportProperties.dataSource.dataSource.url, adaptor: pdfExportProperties.dataSource.adaptor }).executeQuery(new ej2_data_1.Query()).then(function (returnType) {
                        _this.init(parent);
                        if (!ej2_base_1.isNullOrUndefined(pdfDoc)) {
                            _this.pdfDocument = pdfDoc;
                        }
                        else {
                            _this.pdfDocument = new ej2_pdf_export_1.PdfDocument();
                        }
                        _this.processExport(parent, returnType, pdfExportProperties, isMultipleExport);
                        _this.isExporting = false;
                        parent.trigger(events.pdfExportComplete, _this.isBlob ? { promise: _this.blobPromise } : {});
                        resolve(_this.pdfDocument);
                    });
                });
            }
            else {
                var allPromise = [];
                allPromise.push(this.data.getData({}, export_helper_1.ExportHelper.getQuery(parent, this.data)));
                allPromise.push(this.helper.getColumnData(parent));
                return Promise.all(allPromise).then(function (e) {
                    _this.init(parent);
                    if (!ej2_base_1.isNullOrUndefined(pdfDoc)) {
                        _this.pdfDocument = pdfDoc;
                    }
                    else {
                        _this.pdfDocument = new ej2_pdf_export_1.PdfDocument();
                    }
                    _this.processExport(parent, e[0], pdfExportProperties, isMultipleExport);
                    _this.isExporting = false;
                    parent.trigger(events.pdfExportComplete, _this.isBlob ? { promise: _this.blobPromise } : {});
                    return _this.pdfDocument;
                });
            }
        };
        PdfExport.prototype.processExport = function (gObj, returnType, pdfExportProperties, isMultipleExport) {
            if (!ej2_base_1.isNullOrUndefined(pdfExportProperties)) {
                this.gridTheme = pdfExportProperties.theme;
            }
            var columns = gObj.columns;
            var dataSource = returnType.result;
            var section = this.pdfDocument.sections.add();
            var result = this.processExportProperties(pdfExportProperties, dataSource, section);
            dataSource = result.dataSource;
            if (!ej2_base_1.isNullOrUndefined(dataSource.GroupGuid)) {
                this.isGrouping = true;
            }
            section = result.section;
            var pdfPage = section.pages.add();
            var pdfGrid = new ej2_pdf_export_1.PdfGrid();
            var headerThemeStyle = this.getHeaderThemeStyle();
            var border = headerThemeStyle.border;
            var headerFont = headerThemeStyle.font;
            var headerBrush = headerThemeStyle.brush;
            var returnValue = this.helper.getHeaders(columns, this.hideColumnInclude);
            var rows = returnValue.rows;
            var gridColumns = returnValue.columns;
            pdfGrid = this.processGridHeaders(dataSource.childLevels, pdfGrid, rows, gridColumns, border, headerFont, headerBrush);
            this.setColumnProperties(gridColumns, pdfGrid);
            var captionThemeStyle = this.getSummaryCaptionThemeStyle();
            if (!ej2_base_1.isNullOrUndefined(dataSource) && dataSource.length > 0) {
                if (this.isGrouping) {
                    this.processGroupedRecords(pdfGrid, dataSource, gridColumns, gObj, border, 0, captionThemeStyle.font, captionThemeStyle.brush, captionThemeStyle.backgroundBrush, returnType);
                }
                else {
                    this.processRecord(border, gridColumns, gObj, dataSource, pdfGrid);
                }
                if (!ej2_base_1.isNullOrUndefined(returnType.aggregates)) {
                    var summaryModel = new summary_model_generator_1.SummaryModelGenerator(gObj);
                    var sRows = void 0;
                    if (this.customDataSource) {
                        sRows = summaryModel.generateRows(dataSource, returnType.aggregates);
                    }
                    else if (this.currentViewData) {
                        sRows = summaryModel.generateRows(this.parent.getCurrentViewRecords(), returnType.aggregates);
                    }
                    else if (this.isGrouping) {
                        sRows = summaryModel.generateRows(dataSource.records, returnType.aggregates);
                    }
                    else {
                        sRows = summaryModel.generateRows(returnType.result, returnType.aggregates);
                    }
                    this.processAggregates(sRows, pdfGrid, border, captionThemeStyle.font, captionThemeStyle.brush, captionThemeStyle.backgroundBrush, false);
                }
            }
            else {
                var row = pdfGrid.rows.addRow();
                row.style.setBorder(border);
            }
            pdfGrid.draw(pdfPage, 20, 20);
            if (!isMultipleExport) {
                if (!this.isBlob) {
                    this.pdfDocument.save('Export.pdf');
                }
                else {
                    this.blobPromise = this.pdfDocument.save();
                }
                this.pdfDocument.destroy();
            }
        };
        PdfExport.prototype.getSummaryCaptionThemeStyle = function () {
            if (!ej2_base_1.isNullOrUndefined(this.gridTheme) && !ej2_base_1.isNullOrUndefined(this.gridTheme.caption) && this.gridTheme.caption !== null) {
                var fontSize = !ej2_base_1.isNullOrUndefined(this.gridTheme.caption.fontSize) ? this.gridTheme.caption.fontSize : 9.75;
                var pdfColor = new ej2_pdf_export_3.PdfColor();
                if (!ej2_base_1.isNullOrUndefined(this.gridTheme.caption.fontColor)) {
                    var penBrushColor = this.hexToRgb(this.gridTheme.caption.fontColor);
                    pdfColor = new ej2_pdf_export_3.PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
                }
                return { font: new ej2_pdf_export_2.PdfStandardFont(ej2_pdf_export_2.PdfFontFamily.Helvetica, 10.5), brush: new ej2_pdf_export_3.PdfSolidBrush(new ej2_pdf_export_3.PdfColor(pdfColor)), backgroundBrush: new ej2_pdf_export_3.PdfSolidBrush(new ej2_pdf_export_3.PdfColor(246, 246, 246)) };
            }
            else {
                return { font: new ej2_pdf_export_2.PdfStandardFont(ej2_pdf_export_2.PdfFontFamily.Helvetica, 9.75), brush: new ej2_pdf_export_3.PdfSolidBrush(new ej2_pdf_export_3.PdfColor(0, 0, 0)), backgroundBrush: new ej2_pdf_export_3.PdfSolidBrush(new ej2_pdf_export_3.PdfColor(246, 246, 246)) };
            }
        };
        PdfExport.prototype.getHeaderThemeStyle = function () {
            var border = new ej2_pdf_export_1.PdfBorders();
            if (!ej2_base_1.isNullOrUndefined(this.gridTheme) && !ej2_base_1.isNullOrUndefined(this.gridTheme.header)) {
                if (!ej2_base_1.isNullOrUndefined(this.gridTheme.header.borders) && !ej2_base_1.isNullOrUndefined(this.gridTheme.header.borders.color)) {
                    var borderColor = this.hexToRgb(this.gridTheme.header.borders.color);
                    border.all = new ej2_pdf_export_1.PdfPen(new ej2_pdf_export_3.PdfColor(borderColor.r, borderColor.g, borderColor.b));
                }
                var fontSize = !ej2_base_1.isNullOrUndefined(this.gridTheme.header.fontSize) ? this.gridTheme.header.fontSize : 10.5;
                var pdfColor = new ej2_pdf_export_3.PdfColor();
                if (!ej2_base_1.isNullOrUndefined(this.gridTheme.header.fontColor)) {
                    var penBrushColor = this.hexToRgb(this.gridTheme.header.fontColor);
                    pdfColor = new ej2_pdf_export_3.PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
                }
                return { border: border, font: new ej2_pdf_export_2.PdfStandardFont(ej2_pdf_export_2.PdfFontFamily.Helvetica, fontSize), brush: new ej2_pdf_export_3.PdfSolidBrush(pdfColor) };
            }
            else {
                border.all = new ej2_pdf_export_1.PdfPen(new ej2_pdf_export_3.PdfColor(234, 234, 234));
                return { border: border, font: new ej2_pdf_export_2.PdfStandardFont(ej2_pdf_export_2.PdfFontFamily.Helvetica, 10.5), brush: new ej2_pdf_export_3.PdfSolidBrush(new ej2_pdf_export_3.PdfColor(102, 102, 102)) };
            }
        };
        PdfExport.prototype.processGroupedRecords = function (pdfGrid, dataSource, gridColumns, gObj, border, level, font, brush, backgroundBrush, returnType) {
            var groupIndex = level;
            for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
                var dataSourceItems = dataSource_1[_i];
                var row = pdfGrid.rows.addRow();
                var col = gObj.getColumnByField(dataSourceItems.field);
                var args = {
                    value: dataSourceItems.key,
                    column: col,
                    style: undefined,
                    isForeignKey: col.isForeignColumn(),
                };
                var value = dataSourceItems.field + ': ' + this.exportValueFormatter.formatCellValue(args) + ' - ' + dataSourceItems.count + (dataSource.count > 1 ? ' items' : ' item');
                row.cells.getCell(groupIndex).value = value;
                row.cells.getCell(groupIndex + 1).style.stringFormat = new ej2_pdf_export_3.PdfStringFormat(ej2_pdf_export_3.PdfTextAlignment.Left);
                row.style.setBorder(border);
                row.style.setFont(font);
                row.style.setTextBrush(brush);
                row.style.setBackgroundBrush(backgroundBrush);
                var sRows = void 0;
                var captionSummaryModel = new summary_model_generator_1.CaptionSummaryModelGenerator(gObj);
                if (!ej2_base_1.isNullOrUndefined(dataSourceItems.items.records)) {
                    sRows = captionSummaryModel.generateRows(dataSourceItems.items.records, returnType.aggregates);
                }
                else {
                    sRows = captionSummaryModel.generateRows(dataSourceItems.items, returnType.aggregates);
                }
                if (!ej2_base_1.isNullOrUndefined(sRows) && sRows.length === 0) {
                    row.cells.getCell(groupIndex + 1).columnSpan = pdfGrid.columns.count - (groupIndex + 1);
                }
                if (!ej2_base_1.isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {
                    this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, true, row, groupIndex);
                    this.processGroupedRecords(pdfGrid, dataSourceItems.items, gridColumns, gObj, border, (groupIndex + 1), font, brush, backgroundBrush, returnType);
                    var groupSummaryModel = new summary_model_generator_1.GroupSummaryModelGenerator(gObj);
                    sRows = groupSummaryModel.generateRows(dataSourceItems.items.records, returnType.aggregates);
                    this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, false);
                }
                else {
                    this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, true, row, groupIndex);
                    this.processRecord(border, gridColumns, gObj, dataSourceItems.items, pdfGrid, (groupIndex + 1));
                    var groupSummaryModel = new summary_model_generator_1.GroupSummaryModelGenerator(gObj);
                    sRows = groupSummaryModel.generateRows(dataSourceItems.items, returnType.aggregates);
                    this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, false);
                }
            }
        };
        PdfExport.prototype.processGridHeaders = function (childLevels, pdfGrid, rows, gridColumns, border, headerFont, headerBrush) {
            var columnCount = gridColumns.length;
            if (this.isGrouping) {
                columnCount += (childLevels + 1);
            }
            pdfGrid.columns.add(columnCount);
            if (this.isGrouping) {
                for (var i = 0; i < (childLevels + 1); i++) {
                    pdfGrid.columns.getColumn(i).width = 20;
                }
            }
            pdfGrid.headers.add(rows.length);
            for (var i = 0; i < rows.length; i++) {
                var gridHeader = pdfGrid.headers.getHeader(i);
                gridHeader.style.setBorder(border);
                gridHeader.style.setFont(headerFont);
                gridHeader.style.setTextBrush(headerBrush);
                var cellIndex = this.isGrouping ? (childLevels + 1) : 0;
                if (rows[i].cells.length === 0) {
                    for (var j = 0; j < gridHeader.cells.count; j++) {
                        var cell = gridHeader.cells.getCell(j);
                        cell.value = '';
                    }
                }
                else {
                    for (var j = 0; j < cellIndex; j++) {
                        var cell = gridHeader.cells.getCell(j);
                        cell.value = '';
                    }
                    for (var j = 0; j < rows[i].cells.length; j++) {
                        var cell = gridHeader.cells.getCell(cellIndex);
                        if (cell.value !== null) {
                            cell.value = rows[i].cells[j].column.headerText;
                            if (!ej2_base_1.isNullOrUndefined(rows[i].cells[j].column.headerTextAlign)) {
                                cell.style.stringFormat = this.getHorizontalAlignment(rows[i].cells[j].column.headerTextAlign);
                            }
                            if (!ej2_base_1.isNullOrUndefined(rows[i].cells[j].rowSpan)) {
                                cell.rowSpan = rows[i].cells[j].rowSpan;
                                cell.style.stringFormat = this.getVerticalAlignment('Bottom', cell.style.stringFormat, rows[i].cells[j].column.textAlign);
                                for (var k = 1; k < rows[i].cells[j].rowSpan; k++) {
                                    pdfGrid.headers.getHeader(i + k).cells.getCell(cellIndex).value = null;
                                }
                            }
                            if (!ej2_base_1.isNullOrUndefined(rows[i].cells[j].colSpan)) {
                                cell.columnSpan = rows[i].cells[j].colSpan;
                            }
                            cellIndex += cell.columnSpan;
                        }
                        else {
                            cell.value = '';
                            cellIndex += cell.columnSpan;
                            j = j - 1;
                        }
                    }
                }
            }
            if (pdfGrid.columns.count >= 6) {
                pdfGrid.style.allowHorizontalOverflow = true;
            }
            return pdfGrid;
        };
        PdfExport.prototype.processExportProperties = function (pdfExportProperties, dataSource, section) {
            if (!ej2_base_1.isNullOrUndefined(pdfExportProperties)) {
                if (!ej2_base_1.isNullOrUndefined(pdfExportProperties.theme)) {
                    this.gridTheme = pdfExportProperties.theme;
                }
                if (!ej2_base_1.isNullOrUndefined(pdfExportProperties.pageOrientation) || !ej2_base_1.isNullOrUndefined(pdfExportProperties.pageSize)) {
                    var pdfPageSettings = new ej2_pdf_export_6.PdfPageSettings();
                    pdfPageSettings.orientation = (pdfExportProperties.pageOrientation === 'Landscape') ? ej2_pdf_export_6.PdfPageOrientation.Landscape : ej2_pdf_export_6.PdfPageOrientation.Portrait;
                    pdfPageSettings.size = this.getPageSize(pdfExportProperties.pageSize);
                    section.setPageSettings(pdfPageSettings);
                }
                var clientSize = this.pdfDocument.pageSettings.size;
                if (!ej2_base_1.isNullOrUndefined(pdfExportProperties.header)) {
                    var header = pdfExportProperties.header;
                    var position = new ej2_pdf_export_5.PointF(0, header.fromTop);
                    var size = new ej2_pdf_export_6.SizeF((clientSize.width - 80), (header.height * 0.75));
                    var bounds = new ej2_pdf_export_4.RectangleF(position, size);
                    this.pdfDocument.template.top = this.drawPageTemplate(new ej2_pdf_export_4.PdfPageTemplateElement(bounds), header);
                }
                if (!ej2_base_1.isNullOrUndefined(pdfExportProperties.footer)) {
                    var footer = pdfExportProperties.footer;
                    var position = new ej2_pdf_export_5.PointF(0, ((clientSize.width - 80) - (footer.fromBottom * 0.75)));
                    var size = new ej2_pdf_export_6.SizeF((clientSize.width - 80), (footer.height * 0.75));
                    var bounds = new ej2_pdf_export_4.RectangleF(position, size);
                    this.pdfDocument.template.bottom = this.drawPageTemplate(new ej2_pdf_export_4.PdfPageTemplateElement(bounds), footer);
                }
                if (!ej2_base_1.isNullOrUndefined(pdfExportProperties.includeHiddenColumn) && !this.isGrouping) {
                    this.hideColumnInclude = pdfExportProperties.includeHiddenColumn;
                }
                if (!ej2_base_1.isNullOrUndefined(pdfExportProperties.dataSource)) {
                    if (!(pdfExportProperties.dataSource instanceof ej2_data_1.DataManager)) {
                        dataSource = pdfExportProperties.dataSource;
                    }
                    this.customDataSource = true;
                    this.currentViewData = false;
                }
                else if (!ej2_base_1.isNullOrUndefined(pdfExportProperties.exportType)) {
                    if (pdfExportProperties.exportType === 'CurrentPage') {
                        dataSource = this.parent.getCurrentViewRecords();
                        this.currentViewData = true;
                        this.customDataSource = false;
                    }
                    else {
                        this.currentViewData = false;
                        this.customDataSource = false;
                    }
                }
                else {
                    this.currentViewData = false;
                    this.customDataSource = false;
                }
            }
            else {
                this.currentViewData = false;
                this.customDataSource = false;
            }
            return { dataSource: dataSource, section: section };
        };
        PdfExport.prototype.drawPageTemplate = function (template, element) {
            for (var _i = 0, _a = element.contents; _i < _a.length; _i++) {
                var content = _a[_i];
                this.processContentValidation(content);
                switch (content.type) {
                    case 'Text':
                        if (content.value === '' || content.value === undefined || content.value === null || typeof content.value !== 'string') {
                            throw new Error('please enter the valid input value in text content...');
                        }
                        this.drawText(template, content);
                        break;
                    case 'PageNumber':
                        this.drawPageNumber(template, content);
                        break;
                    case 'Image':
                        if (content.src === undefined || content.src === null || content.src === '') {
                            throw new Error('please enter the valid base64 string in image content...');
                        }
                        this.drawImage(template, content);
                        break;
                    case 'Line':
                        this.drawLine(template, content);
                        break;
                    default:
                        throw new Error('Please set valid content type...');
                }
            }
            return template;
        };
        PdfExport.prototype.processContentValidation = function (content) {
            if (content.type === undefined || content.type === null) {
                throw new Error('please set valid content type...');
            }
            else {
                if (content.type === 'Line') {
                    if (content.points === undefined || content.points === null) {
                        throw new Error('please enter valid points in ' + content.type + ' content...');
                    }
                    else {
                        if (content.points.x1 === undefined || content.points.x1 === null || typeof content.points.x1 !== 'number') {
                            throw new Error('please enter valid x1 co-ordinate in ' + content.type + ' points...');
                        }
                        if (content.points.y1 === undefined || content.points.y1 === null || typeof content.points.y1 !== 'number') {
                            throw new Error('please enter valid y1 co-ordinate in ' + content.type + ' points...');
                        }
                        if (content.points.x2 === undefined || content.points.x2 === null || typeof content.points.x2 !== 'number') {
                            throw new Error('please enter valid x2 co-ordinate in ' + content.type + ' points...');
                        }
                        if (content.points.y2 === undefined || content.points.y2 === null || typeof content.points.y2 !== 'number') {
                            throw new Error('please enter valid y2 co-ordinate in ' + content.type + ' points...');
                        }
                    }
                }
                else {
                    if (content.position === undefined || content.position === null) {
                        throw new Error('please enter valid position in ' + content.type + ' content...');
                    }
                    else {
                        if (content.position.x === undefined || content.position.x === null || typeof content.position.x !== 'number') {
                            throw new Error('please enter valid x co-ordinate in ' + content.type + ' position...');
                        }
                        if (content.position.y === undefined || content.position.y === null || typeof content.position.y !== 'number') {
                            throw new Error('please enter valid y co-ordinate in ' + content.type + ' position...');
                        }
                    }
                }
            }
        };
        PdfExport.prototype.drawText = function (pageTemplate, content) {
            var font = this.getFont(content);
            var brush = this.getBrushFromContent(content);
            var pen = null;
            if (!ej2_base_1.isNullOrUndefined(content.style.textPenColor)) {
                var penColor = this.hexToRgb(content.style.textPenColor);
                pen = new ej2_pdf_export_1.PdfPen(new ej2_pdf_export_3.PdfColor(penColor.r, penColor.g, penColor.b));
            }
            if (brush == null && pen == null) {
                brush = new ej2_pdf_export_3.PdfSolidBrush(new ej2_pdf_export_3.PdfColor(0, 0, 0));
            }
            var value = content.value.toString();
            var x = content.position.x * 0.75;
            var y = content.position.y * 0.75;
            var format;
            var result = this.setContentFormat(content, format);
            if (result !== null && !ej2_base_1.isNullOrUndefined(result.format) && !ej2_base_1.isNullOrUndefined(result.size)) {
                pageTemplate.graphics.drawString(value, font, pen, brush, x, y, result.size.width, result.size.height, result.format);
            }
            else {
                pageTemplate.graphics.drawString(value, font, pen, brush, x, y, format);
            }
        };
        PdfExport.prototype.drawPageNumber = function (documentHeader, content) {
            var font = this.getFont(content);
            var brush = null;
            if (!ej2_base_1.isNullOrUndefined(content.style.textBrushColor)) {
                var brushColor = this.hexToRgb(content.style.textBrushColor);
                brush = new ej2_pdf_export_3.PdfSolidBrush(new ej2_pdf_export_3.PdfColor(brushColor.r, brushColor.g, brushColor.b));
            }
            else {
                brush = new ej2_pdf_export_3.PdfSolidBrush(new ej2_pdf_export_3.PdfColor(0, 0, 0));
            }
            var pageNumber = new ej2_pdf_export_5.PdfPageNumberField(font, brush);
            pageNumber.numberStyle = this.getPageNumberStyle(content.pageNumberType);
            var compositeField;
            var format;
            if (!ej2_base_1.isNullOrUndefined(content.format)) {
                if (content.format.indexOf('$total') !== -1 && content.format.indexOf('$current') !== -1) {
                    var pageCount = new ej2_pdf_export_6.PdfPageCountField(font);
                    if (content.format.indexOf('$total') > content.format.indexOf('$current')) {
                        format = content.format.replace('$current', '0');
                        format = format.replace('$total', '1');
                    }
                    else {
                        format = content.format.replace('$current', '1');
                        format = format.replace('$total', '0');
                    }
                    compositeField = new ej2_pdf_export_5.PdfCompositeField(font, brush, format, pageNumber, pageCount);
                }
                else if (content.format.indexOf('$current') !== -1 && content.format.indexOf('$total') === -1) {
                    format = content.format.replace('$current', '0');
                    compositeField = new ej2_pdf_export_5.PdfCompositeField(font, brush, format, pageNumber);
                }
                else {
                    var pageCount = new ej2_pdf_export_6.PdfPageCountField(font);
                    format = content.format.replace('$total', '0');
                    compositeField = new ej2_pdf_export_5.PdfCompositeField(font, brush, format, pageCount);
                }
            }
            else {
                format = '{0}';
                compositeField = new ej2_pdf_export_5.PdfCompositeField(font, brush, format, pageNumber);
            }
            var x = content.position.x * 0.75;
            var y = content.position.y * 0.75;
            var result = this.setContentFormat(content, compositeField.stringFormat);
            if (result !== null && !ej2_base_1.isNullOrUndefined(result.format) && !ej2_base_1.isNullOrUndefined(result.size)) {
                compositeField.stringFormat = result.format;
                compositeField.bounds = new ej2_pdf_export_4.RectangleF(x, y, result.size.width, result.size.height);
            }
            compositeField.draw(documentHeader.graphics, x, y);
        };
        PdfExport.prototype.drawImage = function (documentHeader, content) {
            var x = content.position.x * 0.75;
            var y = content.position.y * 0.75;
            var width = (!ej2_base_1.isNullOrUndefined(content.size)) ? (content.size.width * 0.75) : undefined;
            var height = (!ej2_base_1.isNullOrUndefined(content.size)) ? (content.size.height * 0.75) : undefined;
            var image = new ej2_pdf_export_2.PdfBitmap(content.src);
            if (!ej2_base_1.isNullOrUndefined(width)) {
                documentHeader.graphics.drawImage(image, x, y, width, height);
            }
            else {
                documentHeader.graphics.drawImage(image, x, y);
            }
        };
        PdfExport.prototype.drawLine = function (documentHeader, content) {
            var x1 = content.points.x1 * 0.75;
            var y1 = content.points.y1 * 0.75;
            var x2 = content.points.x2 * 0.75;
            var y2 = content.points.y2 * 0.75;
            var pen = this.getPenFromContent(content);
            if (!ej2_base_1.isNullOrUndefined(content.style) && content.style !== null) {
                if (!ej2_base_1.isNullOrUndefined(content.style.penSize) && content.style.penSize !== null && typeof content.style.penSize === 'number') {
                    pen.width = content.style.penSize * 0.75;
                }
                pen.dashStyle = this.getDashStyle(content.style.dashStyle);
            }
            documentHeader.graphics.drawLine(pen, x1, y1, x2, y2);
        };
        PdfExport.prototype.processAggregates = function (sRows, pdfGrid, border, font, brush, backgroundBrush, isCaption, captionRow, groupIndex) {
            for (var _i = 0, sRows_1 = sRows; _i < sRows_1.length; _i++) {
                var row = sRows_1[_i];
                var startIndex = 0;
                var leastCaptionSummaryIndex = -1;
                var index = 0;
                var isEmpty = true;
                var value = [];
                for (var i = 0; i < pdfGrid.columns.count; i++) {
                    var cell = row.cells[index];
                    if (!this.hideColumnInclude) {
                        while (cell.visible === undefined) {
                            if (!ej2_base_1.isNullOrUndefined(captionRow)) {
                                if (!ej2_base_1.isNullOrUndefined(captionRow.cells.getCell(i).value)) {
                                    value.push('');
                                    value.push(captionRow.cells.getCell(i).value);
                                    isEmpty = false;
                                    i += 1;
                                }
                                else {
                                    value.push('');
                                }
                            }
                            else {
                                value.push('');
                            }
                            i += 1;
                            index = index + 1;
                            cell = row.cells[index];
                        }
                        while (!ej2_base_1.isNullOrUndefined(cell.visible) && !cell.visible) {
                            index = index + 1;
                            cell = row.cells[index];
                        }
                    }
                    if (cell.isDataCell) {
                        var templateFn = {};
                        if (!ej2_base_1.isNullOrUndefined(cell.column.footerTemplate) || !ej2_base_1.isNullOrUndefined(cell.column.groupCaptionTemplate) || !ej2_base_1.isNullOrUndefined(cell.column.groupFooterTemplate)) {
                            var result = this.getTemplateFunction(templateFn, i, leastCaptionSummaryIndex, cell.column);
                            templateFn = result.templateFunction;
                            leastCaptionSummaryIndex = result.leastCaptionSummaryIndex;
                            var txt = (templateFn[ej2_base_1.getEnumValue(enum_1.CellType, cell.cellType)](row.data[cell.column.field ? cell.column.field : cell.column.columnName]));
                            value.push(txt[0].wholeText);
                            isEmpty = false;
                        }
                        else {
                            var result = this.getSummaryWithoutTemplate(row.data[cell.column.field]);
                            if (!ej2_base_1.isNullOrUndefined(result)) {
                                value.push(result);
                            }
                        }
                    }
                    else {
                        value.push('');
                    }
                    if (isEmpty && value[i] !== '' && !ej2_base_1.isNullOrUndefined(value[i]) && value[i] !== null) {
                        isEmpty = false;
                    }
                    index += 1;
                }
                if (!isEmpty) {
                    if (!isCaption) {
                        var gridRow = pdfGrid.rows.addRow();
                        gridRow.style.setBorder(border);
                        gridRow.style.setFont(font);
                        gridRow.style.setTextBrush(brush);
                        gridRow.style.setBackgroundBrush(backgroundBrush);
                        for (var i = 0; i < pdfGrid.columns.count; i++) {
                            gridRow.cells.getCell(i).value = value[i].toString();
                        }
                    }
                    else {
                        for (var i = 0; i < pdfGrid.columns.count; i++) {
                            captionRow.cells.getCell(i).value = value[i].toString();
                            if (i === (groupIndex + 1) && leastCaptionSummaryIndex !== -1) {
                                captionRow.cells.getCell(i).columnSpan = leastCaptionSummaryIndex - (groupIndex + 1);
                            }
                            else if (i === (groupIndex + 1) && leastCaptionSummaryIndex === -1) {
                                captionRow.cells.getCell(i).columnSpan = pdfGrid.columns.count - (groupIndex + 1);
                            }
                        }
                    }
                }
            }
        };
        PdfExport.prototype.getTemplateFunction = function (templateFn, index, leastCaptionSummaryIndex, column) {
            if (!ej2_base_1.isNullOrUndefined(column.footerTemplate)) {
                templateFn[ej2_base_1.getEnumValue(enum_1.CellType, enum_1.CellType.Summary)] = ej2_base_1.compile(column.footerTemplate);
            }
            else if (!ej2_base_1.isNullOrUndefined(column.groupCaptionTemplate)) {
                if (leastCaptionSummaryIndex === -1) {
                    leastCaptionSummaryIndex = index;
                }
                templateFn[ej2_base_1.getEnumValue(enum_1.CellType, enum_1.CellType.CaptionSummary)] = ej2_base_1.compile(column.groupCaptionTemplate);
            }
            else {
                templateFn[ej2_base_1.getEnumValue(enum_1.CellType, enum_1.CellType.GroupSummary)] = ej2_base_1.compile(column.groupFooterTemplate);
            }
            return { templateFunction: templateFn, leastCaptionSummaryIndex: leastCaptionSummaryIndex };
        };
        PdfExport.prototype.getSummaryWithoutTemplate = function (data) {
            if (!ej2_base_1.isNullOrUndefined(data.Sum)) {
                return data.Sum;
            }
            else if (!ej2_base_1.isNullOrUndefined(data.Average)) {
                return data.Average;
            }
            else if (!ej2_base_1.isNullOrUndefined(data.Max)) {
                return data.Max;
            }
            else if (!ej2_base_1.isNullOrUndefined(data.Min)) {
                return data.Min;
            }
            else if (!ej2_base_1.isNullOrUndefined(data.Count)) {
                return data.Count;
            }
            else if (!ej2_base_1.isNullOrUndefined(data.TrueCount)) {
                return data.TrueCount;
            }
            else if (!ej2_base_1.isNullOrUndefined(data.FalseCount)) {
                return data.FalseCount;
            }
            else if (!ej2_base_1.isNullOrUndefined(data.Custom)) {
                return data.Custom;
            }
        };
        PdfExport.prototype.setColumnProperties = function (gridColumns, pdfGrid) {
            var startIndex = this.isGrouping ? (pdfGrid.columns.count - gridColumns.length) : 0;
            for (var i = 0; i < gridColumns.length; i++) {
                if (!ej2_base_1.isNullOrUndefined(gridColumns[i].textAlign)) {
                    pdfGrid.columns.getColumn(i + startIndex).format = this.getHorizontalAlignment(gridColumns[i].textAlign);
                }
                if (pdfGrid.style.allowHorizontalOverflow && !ej2_base_1.isNullOrUndefined(gridColumns[i].width)) {
                    pdfGrid.columns.getColumn(i + startIndex).width = typeof gridColumns[i].width === 'number' ? gridColumns[i].width * 0.75 : this.helper.getConvertedWidth(gridColumns[i].width) * 0.75;
                }
            }
        };
        PdfExport.prototype.setRecordThemeStyle = function (row, border) {
            if (!ej2_base_1.isNullOrUndefined(this.gridTheme) && !ej2_base_1.isNullOrUndefined(this.gridTheme.record) && this.gridTheme.record !== null) {
                var pdfColor = new ej2_pdf_export_3.PdfColor();
                if (!ej2_base_1.isNullOrUndefined(this.gridTheme.record.fontColor)) {
                    var penBrushColor = this.hexToRgb(this.gridTheme.record.fontColor);
                    pdfColor = new ej2_pdf_export_3.PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
                }
                row.style.setTextBrush(new ej2_pdf_export_3.PdfSolidBrush(pdfColor));
            }
            else {
                row.style.setTextBrush(new ej2_pdf_export_3.PdfSolidBrush(new ej2_pdf_export_3.PdfColor(0, 0, 0)));
            }
            row.style.setBorder(border);
            return row;
        };
        PdfExport.prototype.processRecord = function (border, columns, gObj, dataSource, pdfGrid, groupIndex) {
            var startIndex = this.isGrouping ? groupIndex : 0;
            for (var _i = 0, _a = dataSource; _i < _a.length; _i++) {
                var items = _a[_i];
                var gridRow = this.setRecordThemeStyle(pdfGrid.rows.addRow(), border);
                for (var j = 0; j < columns.length; j++) {
                    var value = (!ej2_base_1.isNullOrUndefined(columns[j].field) && ej2_base_2.getValue(columns[j].field, items)) || '';
                    var column = columns[j];
                    var foreignKeyData = void 0;
                    if (column.isForeignColumn && column.isForeignColumn()) {
                        foreignKeyData = this.helper.getFData(value, column);
                        value = ej2_base_2.getValue(column.foreignKeyValue, foreignKeyData);
                    }
                    var data = items;
                    var args = {
                        data: data,
                        value: value,
                        column: column,
                        style: undefined,
                        colSpan: 1
                    };
                    gObj.trigger(events.pdfQueryCellInfo, args);
                    var cell = gridRow.cells.getCell(j + startIndex);
                    cell.value = this.exportValueFormatter.formatCellValue(args);
                    if (!ej2_base_1.isNullOrUndefined(args.style)) {
                        this.processCellStyle(cell, args);
                    }
                    if (args.colSpan > 1) {
                        if ((j + startIndex + 1 + args.colSpan) > gridRow.cells.count) {
                            args.colSpan = gridRow.cells.count - (j + startIndex + 1);
                        }
                        cell.columnSpan = args.colSpan;
                        for (var i = 1; i < cell.columnSpan; i++) {
                            var spanCell = gridRow.cells.getCell(j + startIndex + i);
                            spanCell.value = '';
                        }
                        j += (args.colSpan - 1);
                    }
                }
            }
        };
        PdfExport.prototype.processCellStyle = function (cell, args) {
            if (!ej2_base_1.isNullOrUndefined(args.style.backgroundColor)) {
                var backColor = this.hexToRgb(args.style.backgroundColor);
                cell.style.backgroundBrush = new ej2_pdf_export_3.PdfSolidBrush(new ej2_pdf_export_3.PdfColor(backColor.r, backColor.g, backColor.b));
            }
            if (!ej2_base_1.isNullOrUndefined(args.style.textAlignment)) {
                cell.style.stringFormat = this.getHorizontalAlignment(args.style.textAlignment);
            }
            if (!ej2_base_1.isNullOrUndefined(args.style.verticalAlignment)) {
                cell.style.stringFormat = this.getVerticalAlignment(args.style.verticalAlignment, cell.style.stringFormat);
            }
            if (!ej2_base_1.isNullOrUndefined(args.style.textBrushColor)) {
                var textBrushColor = this.hexToRgb(args.style.textBrushColor);
                cell.style.textBrush = new ej2_pdf_export_3.PdfSolidBrush(new ej2_pdf_export_3.PdfColor(textBrushColor.r, textBrushColor.g, textBrushColor.b));
            }
            if (!ej2_base_1.isNullOrUndefined(args.style.textPenColor)) {
                var textPenColor = this.hexToRgb(args.style.textPenColor);
                cell.style.textPen = new ej2_pdf_export_1.PdfPen(new ej2_pdf_export_3.PdfColor(textPenColor.r, textPenColor.g, textPenColor.b));
            }
            if (!ej2_base_1.isNullOrUndefined(args.style.fontFamily) || !ej2_base_1.isNullOrUndefined(args.style.fontSize) || !ej2_base_1.isNullOrUndefined(args.style.bold) || !ej2_base_1.isNullOrUndefined(args.style.italic) || !ej2_base_1.isNullOrUndefined(args.style.underline) || !ej2_base_1.isNullOrUndefined(args.style.strikeout)) {
                cell.style.font = this.getFont(args);
            }
            if (!ej2_base_1.isNullOrUndefined(args.style.border)) {
                var border = new ej2_pdf_export_1.PdfBorders();
                var borderWidth = args.style.border.width;
                var width = (!ej2_base_1.isNullOrUndefined(borderWidth) && typeof borderWidth === 'number') ? (borderWidth * 0.75) : (undefined);
                var color = new ej2_pdf_export_3.PdfColor(196, 196, 196);
                if (!ej2_base_1.isNullOrUndefined(args.style.border.color)) {
                    var borderColor = this.hexToRgb(args.style.border.color);
                    color = new ej2_pdf_export_3.PdfColor(borderColor.r, borderColor.g, borderColor.b);
                }
                var pen = new ej2_pdf_export_1.PdfPen(color, width);
                if (!ej2_base_1.isNullOrUndefined(args.style.border.dashStyle)) {
                    pen.dashStyle = this.getDashStyle(args.style.border.dashStyle);
                }
                border.all = pen;
                cell.style.borders = border;
            }
        };
        PdfExport.prototype.getHorizontalAlignment = function (textAlign, format) {
            if (format === undefined) {
                format = new ej2_pdf_export_3.PdfStringFormat();
            }
            switch (textAlign) {
                case 'Right':
                    format.alignment = ej2_pdf_export_3.PdfTextAlignment.Right;
                    break;
                case 'Center':
                    format.alignment = ej2_pdf_export_3.PdfTextAlignment.Center;
                    break;
                case 'Justify':
                    format.alignment = ej2_pdf_export_3.PdfTextAlignment.Justify;
                    break;
                case 'Left':
                    format.alignment = ej2_pdf_export_3.PdfTextAlignment.Left;
                    break;
            }
            return format;
        };
        PdfExport.prototype.getVerticalAlignment = function (verticalAlign, format, textAlign) {
            if (format === undefined) {
                format = new ej2_pdf_export_3.PdfStringFormat();
                format = this.getHorizontalAlignment(textAlign, format);
            }
            switch (verticalAlign) {
                case 'Bottom':
                    format.lineAlignment = ej2_pdf_export_4.PdfVerticalAlignment.Bottom;
                    break;
                case 'Middle':
                    format.lineAlignment = ej2_pdf_export_4.PdfVerticalAlignment.Middle;
                    break;
                case 'Top':
                    format.lineAlignment = ej2_pdf_export_4.PdfVerticalAlignment.Top;
                    break;
            }
            return format;
        };
        PdfExport.prototype.getFontFamily = function (fontFamily) {
            switch (fontFamily) {
                case 'TimesRoman':
                    return 2;
                case 'Courier':
                    return 1;
                case 'Symbol':
                    return 3;
                case 'ZapfDingbats':
                    return 4;
                default:
                    return 0;
            }
        };
        PdfExport.prototype.getFont = function (content) {
            var fontSize = (!ej2_base_1.isNullOrUndefined(content.style.fontSize)) ? (content.style.fontSize * 0.75) : 9.75;
            var fontFamily = (!ej2_base_1.isNullOrUndefined(content.style.fontFamily)) ? (this.getFontFamily(content.style.fontFamily)) : ej2_pdf_export_2.PdfFontFamily.Helvetica;
            var fontStyle = ej2_pdf_export_2.PdfFontStyle.Regular;
            if (!ej2_base_1.isNullOrUndefined(content.style.bold) && content.style.bold) {
                fontStyle |= ej2_pdf_export_2.PdfFontStyle.Bold;
            }
            if (!ej2_base_1.isNullOrUndefined(content.style.italic) && content.style.italic) {
                fontStyle |= ej2_pdf_export_2.PdfFontStyle.Italic;
            }
            if (!ej2_base_1.isNullOrUndefined(content.style.underline) && content.style.underline) {
                fontStyle |= ej2_pdf_export_2.PdfFontStyle.Underline;
            }
            if (!ej2_base_1.isNullOrUndefined(content.style.strikeout) && content.style.strikeout) {
                fontStyle |= ej2_pdf_export_2.PdfFontStyle.Strikeout;
            }
            return new ej2_pdf_export_2.PdfStandardFont(fontFamily, fontSize, fontStyle);
        };
        PdfExport.prototype.getPageNumberStyle = function (pageNumberType) {
            switch (pageNumberType) {
                case 'LowerLatin':
                    return 2;
                case 'LowerRoman':
                    return 3;
                case 'UpperLatin':
                    return 4;
                case 'UpperRoman':
                    return 5;
                default:
                    return 1;
            }
        };
        PdfExport.prototype.setContentFormat = function (content, format) {
            if (!ej2_base_1.isNullOrUndefined(content.size)) {
                var width = content.size.width * 0.75;
                var height = content.size.height * 0.75;
                format = new ej2_pdf_export_3.PdfStringFormat(ej2_pdf_export_3.PdfTextAlignment.Left, ej2_pdf_export_4.PdfVerticalAlignment.Middle);
                if (!ej2_base_1.isNullOrUndefined(content.style.hAlign)) {
                    switch (content.style.hAlign) {
                        case 'Right':
                            format.alignment = ej2_pdf_export_3.PdfTextAlignment.Right;
                            break;
                        case 'Center':
                            format.alignment = ej2_pdf_export_3.PdfTextAlignment.Center;
                            break;
                        case 'Justify':
                            format.alignment = ej2_pdf_export_3.PdfTextAlignment.Justify;
                            break;
                        default:
                            format.alignment = ej2_pdf_export_3.PdfTextAlignment.Left;
                    }
                }
                if (!ej2_base_1.isNullOrUndefined(content.style.vAlign)) {
                    format = this.getVerticalAlignment(content.style.vAlign, format);
                }
                return { format: format, size: new ej2_pdf_export_6.SizeF(width, height) };
            }
            return null;
        };
        PdfExport.prototype.getPageSize = function (pageSize) {
            switch (pageSize) {
                case 'Letter':
                    return new ej2_pdf_export_6.SizeF(612, 792);
                case 'Note':
                    return new ej2_pdf_export_6.SizeF(540, 720);
                case 'Legal':
                    return new ej2_pdf_export_6.SizeF(612, 1008);
                case 'A0':
                    return new ej2_pdf_export_6.SizeF(2380, 3368);
                case 'A1':
                    return new ej2_pdf_export_6.SizeF(1684, 2380);
                case 'A2':
                    return new ej2_pdf_export_6.SizeF(1190, 1684);
                case 'A3':
                    return new ej2_pdf_export_6.SizeF(842, 1190);
                case 'A5':
                    return new ej2_pdf_export_6.SizeF(421, 595);
                case 'A6':
                    return new ej2_pdf_export_6.SizeF(297, 421);
                case 'A7':
                    return new ej2_pdf_export_6.SizeF(210, 297);
                case 'A8':
                    return new ej2_pdf_export_6.SizeF(148, 210);
                case 'A9':
                    return new ej2_pdf_export_6.SizeF(105, 148);
                case 'B0':
                    return new ej2_pdf_export_6.SizeF(2836, 4008);
                case 'B1':
                    return new ej2_pdf_export_6.SizeF(2004, 2836);
                case 'B2':
                    return new ej2_pdf_export_6.SizeF(1418, 2004);
                case 'B3':
                    return new ej2_pdf_export_6.SizeF(1002, 1418);
                case 'B4':
                    return new ej2_pdf_export_6.SizeF(709, 1002);
                case 'B5':
                    return new ej2_pdf_export_6.SizeF(501, 709);
                case 'Archa':
                    return new ej2_pdf_export_6.SizeF(648, 864);
                case 'Archb':
                    return new ej2_pdf_export_6.SizeF(864, 1296);
                case 'Archc':
                    return new ej2_pdf_export_6.SizeF(1296, 1728);
                case 'Archd':
                    return new ej2_pdf_export_6.SizeF(1728, 2592);
                case 'Arche':
                    return new ej2_pdf_export_6.SizeF(2592, 3456);
                case 'Flsa':
                    return new ej2_pdf_export_6.SizeF(612, 936);
                case 'HalfLetter':
                    return new ej2_pdf_export_6.SizeF(396, 612);
                case 'Letter11x17':
                    return new ej2_pdf_export_6.SizeF(792, 1224);
                case 'Ledger':
                    return new ej2_pdf_export_6.SizeF(1224, 792);
                default:
                    return new ej2_pdf_export_6.SizeF(595, 842);
            }
        };
        PdfExport.prototype.getDashStyle = function (dashStyle) {
            switch (dashStyle) {
                case 'Dash':
                    return 1;
                case 'Dot':
                    return 2;
                case 'DashDot':
                    return 3;
                case 'DashDotDot':
                    return 4;
                default:
                    return 0;
            }
        };
        PdfExport.prototype.getPenFromContent = function (content) {
            var pen = new ej2_pdf_export_1.PdfPen(new ej2_pdf_export_3.PdfColor(0, 0, 0));
            if (!ej2_base_1.isNullOrUndefined(content.style) && content.style !== null && !ej2_base_1.isNullOrUndefined(content.style.penColor)) {
                var penColor = this.hexToRgb(content.style.penColor);
                pen = new ej2_pdf_export_1.PdfPen(new ej2_pdf_export_3.PdfColor(penColor.r, penColor.g, penColor.b));
            }
            return pen;
        };
        PdfExport.prototype.getBrushFromContent = function (content) {
            var brush = null;
            if (!ej2_base_1.isNullOrUndefined(content.style.textBrushColor)) {
                var brushColor = this.hexToRgb(content.style.textBrushColor);
                brush = new ej2_pdf_export_3.PdfSolidBrush(new ej2_pdf_export_3.PdfColor(brushColor.r, brushColor.g, brushColor.b));
            }
            return brush;
        };
        PdfExport.prototype.hexToRgb = function (hex) {
            if (hex === null || hex === '' || hex.length !== 7) {
                throw new Error('please set valid hex value for color...');
            }
            hex = hex.substring(1);
            var bigint = parseInt(hex, 16);
            var r = (bigint >> 16) & 255;
            var g = (bigint >> 8) & 255;
            var b = bigint & 255;
            return { r: r, g: g, b: b };
        };
        PdfExport.prototype.destroy = function () {
        };
        return PdfExport;
    }());
    exports.PdfExport = PdfExport;
});
