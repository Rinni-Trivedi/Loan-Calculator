define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-navigations", "../base/constant", "../base/util", "../services/focus-strategy"], function (require, exports, ej2_base_1, ej2_base_2, ej2_navigations_1, events, util_1, focus_strategy_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Toolbar = (function () {
        function Toolbar(parent, serviceLocator) {
            this.predefinedItems = {};
            this.items = ['Add', 'Edit', 'Update', 'Delete', 'Cancel', 'Print', 'Search',
                'ColumnChooser', 'PdfExport', 'ExcelExport', 'CsvExport', 'WordExport'];
            this.parent = parent;
            this.gridID = parent.element.id;
            this.serviceLocator = serviceLocator;
            this.addEventListener();
        }
        Toolbar.prototype.render = function () {
            this.l10n = this.serviceLocator.getService('localization');
            var preItems = ['Add', 'Edit', 'Update', 'Delete', 'Cancel', 'Print',
                'PdfExport', 'ExcelExport', 'WordExport', 'CsvExport'];
            for (var _i = 0, preItems_1 = preItems; _i < preItems_1.length; _i++) {
                var item = preItems_1[_i];
                var itemStr = item.toLowerCase();
                var localeName = itemStr[0].toUpperCase() + itemStr.slice(1);
                this.predefinedItems[item] = {
                    id: this.gridID + '_' + itemStr, prefixIcon: 'e-' + itemStr,
                    text: this.l10n.getConstant(localeName), tooltipText: this.l10n.getConstant(localeName)
                };
            }
            this.predefinedItems.Search = {
                id: this.gridID + '_search',
                template: '<div class="e-input-group e-search" role="search">\
            <input id="' + this.gridID + '_searchbar" class="e-input" name="input" type="search" \
            placeholder= \"' + this.l10n.getConstant('Search') + '\"/>\
            <span id="' + this.gridID + '_searchbutton" class="e-input-group-icon e-search-icon e-icons" \
            tabindex="-1" title="' + this.l10n.getConstant('Search') + '" aria-label= "search"></span> \
            </div>',
                tooltipText: this.l10n.getConstant('Search'), align: 'Right', cssClass: 'e-search-wrapper'
            };
            this.predefinedItems.ColumnChooser = {
                id: this.gridID + '_' + 'columnchooser', cssClass: 'e-cc e-ccdiv e-cc-toolbar', suffixIcon: 'e-' + 'columnchooser-btn',
                text: this.l10n.getConstant('Columnchooser'), tooltipText: this.l10n.getConstant('Columnchooser'), align: 'Right',
            };
            this.createToolbar();
        };
        Toolbar.prototype.getToolbar = function () {
            return this.toolbar.element;
        };
        Toolbar.prototype.destroy = function () {
            if (!this.toolbar.isDestroyed) {
                if (!this.toolbar.element) {
                    this.parent.destroyTemplate(['toolbarTemplate']);
                }
                else {
                    this.toolbar.destroy();
                }
                this.unWireEvent();
                this.removeEventListener();
                ej2_base_2.remove(this.element);
            }
        };
        Toolbar.prototype.createToolbar = function () {
            var items = this.getItems();
            this.toolbar = new ej2_navigations_1.Toolbar({
                items: items,
                clicked: this.toolbarClickHandler.bind(this),
                enablePersistence: this.parent.enablePersistence,
                enableRtl: this.parent.enableRtl
            });
            var viewStr = 'viewContainerRef';
            var registerTemp = 'registeredTemplate';
            if (this.parent[viewStr]) {
                this.toolbar[registerTemp] = {};
                this.toolbar[viewStr] = this.parent[viewStr];
            }
            this.element = ej2_base_2.createElement('div', { id: this.gridID + '_toolbarItems' });
            if (this.parent.toolbarTemplate) {
                if (typeof (this.parent.toolbarTemplate) === 'string') {
                    this.toolbar.appendTo(this.parent.toolbarTemplate);
                    this.element = this.toolbar.element;
                }
                else {
                    util_1.appendChildren(this.element, util_1.templateCompiler(this.parent.toolbarTemplate)({}, this.parent, 'toolbarTemplate'));
                }
            }
            else {
                this.toolbar.appendTo(this.element);
            }
            this.parent.element.insertBefore(this.element, this.parent.getHeaderContent());
            this.searchElement = this.element.querySelector('#' + this.gridID + '_searchbar');
            this.wireEvent();
            this.refreshToolbarItems();
            if (this.parent.searchSettings) {
                this.updateSearchBox();
            }
        };
        Toolbar.prototype.refreshToolbarItems = function (args) {
            var gObj = this.parent;
            var enableItems = [];
            var disableItems = [];
            var edit = gObj.editSettings;
            var hasData = gObj.currentViewData && gObj.currentViewData.length;
            edit.allowAdding ? enableItems.push(this.gridID + '_add') : disableItems.push(this.gridID + '_add');
            edit.allowEditing && hasData ? enableItems.push(this.gridID + '_edit') : disableItems.push(this.gridID + '_edit');
            edit.allowDeleting && hasData ? enableItems.push(this.gridID + '_delete') : disableItems.push(this.gridID + '_delete');
            if (gObj.editSettings.mode === 'Batch') {
                if (gObj.element.querySelectorAll('.e-updatedtd').length && (edit.allowAdding || edit.allowEditing)) {
                    enableItems.push(this.gridID + '_update');
                    enableItems.push(this.gridID + '_cancel');
                }
                else {
                    disableItems.push(this.gridID + '_update');
                    disableItems.push(this.gridID + '_cancel');
                }
            }
            else {
                if (gObj.isEdit && (edit.allowAdding || edit.allowEditing)) {
                    enableItems = [this.gridID + '_update', this.gridID + '_cancel'];
                    disableItems = [this.gridID + '_add', this.gridID + '_edit', this.gridID + '_delete'];
                }
                else {
                    disableItems.push(this.gridID + '_update');
                    disableItems.push(this.gridID + '_cancel');
                }
            }
            this.enableItems(enableItems, true);
            this.enableItems(disableItems, false);
        };
        Toolbar.prototype.getItems = function () {
            var items = [];
            var toolbarItems = this.parent.toolbar || [];
            if (typeof (this.parent.toolbar) === 'string') {
                return [];
            }
            for (var _i = 0, toolbarItems_1 = toolbarItems; _i < toolbarItems_1.length; _i++) {
                var item = toolbarItems_1[_i];
                switch (typeof item) {
                    case 'number':
                        items.push(this.getItemObject(this.items[item]));
                        break;
                    case 'string':
                        items.push(this.getItemObject(item));
                        break;
                    default:
                        items.push(this.getItem(item));
                }
            }
            return items;
        };
        Toolbar.prototype.getItem = function (itemObject) {
            var item = this.predefinedItems[itemObject.text];
            return item ? ej2_base_1.extend(item, item, itemObject) : itemObject;
        };
        Toolbar.prototype.getItemObject = function (itemName) {
            return this.predefinedItems[itemName] || { text: itemName, id: this.gridID + '_' + itemName };
        };
        Toolbar.prototype.enableItems = function (items, isEnable) {
            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                var item = items_1[_i];
                var element = this.element.querySelector('#' + item);
                if (element) {
                    this.toolbar.enableItems(element.parentElement, isEnable);
                }
            }
        };
        Toolbar.prototype.toolbarClickHandler = function (args) {
            var gObj = this.parent;
            var gID = this.gridID;
            ej2_base_1.extend(args, { cancel: false });
            gObj.trigger(events.toolbarClick, args);
            if (args.cancel) {
                return;
            }
            switch (!ej2_base_1.isNullOrUndefined(args.item) && args.item.id) {
                case gID + '_print':
                    gObj.print();
                    break;
                case gID + '_edit':
                    gObj.startEdit();
                    break;
                case gID + '_update':
                    gObj.endEdit();
                    break;
                case gID + '_cancel':
                    gObj.closeEdit();
                    break;
                case gID + '_add':
                    gObj.addRecord();
                    break;
                case gID + '_delete':
                    gObj.deleteRecord();
                    break;
                case gID + '_search':
                    if (args.originalEvent.target.id === gID + '_searchbutton') {
                        this.search();
                    }
                    break;
                case gID + '_columnchooser':
                    var tarElement = this.parent.element.querySelector('.e-ccdiv');
                    var y = tarElement.getBoundingClientRect().top;
                    var x = tarElement.getBoundingClientRect().left;
                    var targetEle = args.originalEvent.target;
                    y = tarElement.getBoundingClientRect().top + tarElement.offsetTop;
                    gObj.createColumnchooser(x, y, targetEle);
                    break;
            }
        };
        Toolbar.prototype.modelChanged = function (e) {
            if (e.module === 'edit') {
                this.refreshToolbarItems();
            }
        };
        Toolbar.prototype.onPropertyChanged = function (e) {
            if (e.module !== this.getModuleName() || !this.parent.toolbar) {
                return;
            }
            if (this.element) {
                ej2_base_2.remove(this.element);
            }
            this.render();
        };
        Toolbar.prototype.keyUpHandler = function (e) {
            if (e.keyCode === 13) {
                this.search();
            }
        };
        Toolbar.prototype.search = function () {
            this.parent.search(this.searchElement.value);
        };
        Toolbar.prototype.updateSearchBox = function () {
            if (this.searchElement) {
                this.searchElement.value = this.parent.searchSettings.key;
            }
        };
        Toolbar.prototype.wireEvent = function () {
            if (this.searchElement) {
                this.searchBoxObj = new focus_strategy_1.SearchBox(this.searchElement);
                ej2_base_1.EventHandler.add(this.searchElement, 'keyup', this.keyUpHandler, this);
                this.searchBoxObj.wireEvent();
            }
        };
        Toolbar.prototype.unWireEvent = function () {
            if (this.searchElement) {
                ej2_base_1.EventHandler.remove(this.searchElement, 'keyup', this.keyUpHandler);
                this.searchBoxObj.unWireEvent();
            }
        };
        Toolbar.prototype.addEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.on(events.initialEnd, this.render, this);
            this.parent.on(events.uiUpdate, this.onPropertyChanged, this);
            this.parent.on(events.inBoundModelChanged, this.updateSearchBox.bind(this));
            this.parent.on(events.modelChanged, this.refreshToolbarItems, this);
            this.parent.on(events.toolbarRefresh, this.refreshToolbarItems, this);
            this.parent.on(events.inBoundModelChanged, this.modelChanged, this);
            this.parent.on(events.dataBound, this.refreshToolbarItems, this);
        };
        Toolbar.prototype.removeEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.off(events.initialEnd, this.render);
            this.parent.off(events.uiUpdate, this.onPropertyChanged);
            this.parent.off(events.inBoundModelChanged, this.updateSearchBox);
            this.parent.off(events.modelChanged, this.refreshToolbarItems);
            this.parent.off(events.toolbarRefresh, this.refreshToolbarItems);
            this.parent.off(events.inBoundModelChanged, this.modelChanged);
            this.parent.off(events.dataBound, this.refreshToolbarItems);
        };
        Toolbar.prototype.getModuleName = function () {
            return 'toolbar';
        };
        return Toolbar;
    }());
    exports.Toolbar = Toolbar;
});
