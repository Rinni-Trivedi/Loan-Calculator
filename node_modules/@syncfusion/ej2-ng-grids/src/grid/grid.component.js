var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, Optional, ContentChild } from '@angular/core';
import { ComponentBase, applyMixins, setValue } from '@syncfusion/ej2-ng-base';
import { Grid, Filter, Page, Selection, Sort, Group, Reorder, RowDD, DetailRow, Toolbar, Aggregate, Search, VirtualScroll, Edit, Resize, ExcelExport, PdfExport, CommandColumn, ContextMenu, Freeze, ColumnMenu, ColumnChooser, ForeignKey } from '@syncfusion/ej2-grids';
import { Template } from '@syncfusion/ej2-ng-base';
import { ColumnsDirective } from './columns.directive';
import { AggregatesDirective } from './aggregates.directive';
export var inputs = ['aggregates', 'allowExcelExport', 'allowFiltering', 'allowGrouping', 'allowMultiSorting', 'allowPaging', 'allowPdfExport', 'allowReordering', 'allowResizing', 'allowRowDragAndDrop', 'allowSelection', 'allowSorting', 'allowTextWrap', 'childGrid', 'columnMenuItems', 'columns', 'contextMenuItems', 'currencyCode', 'dataSource', 'detailTemplate', 'editSettings', 'enableAltRow', 'enableColumnVirtualization', 'enableHover', 'enablePersistence', 'enableRtl', 'enableVirtualization', 'filterSettings', 'frozenColumns', 'frozenRows', 'gridLines', 'groupSettings', 'height', 'locale', 'pageSettings', 'printMode', 'query', 'queryString', 'rowDropSettings', 'rowHeight', 'rowTemplate', 'searchSettings', 'selectedRowIndex', 'selectionSettings', 'showColumnChooser', 'showColumnMenu', 'sortSettings', 'textWrapSettings', 'toolbar', 'width'];
export var outputs = ['actionBegin', 'actionComplete', 'actionFailure', 'batchAdd', 'batchDelete', 'beforeBatchAdd', 'beforeBatchDelete', 'beforeBatchSave', 'beforeCopy', 'beforeDataBound', 'beforeExcelExport', 'beforeOpenColumnChooser', 'beforePdfExport', 'beforePrint', 'beginEdit', 'cellDeselected', 'cellDeselecting', 'cellEdit', 'cellSave', 'cellSelected', 'cellSelecting', 'checkBoxChange', 'columnDrag', 'columnDragStart', 'columnDrop', 'columnMenuClick', 'columnMenuOpen', 'contextMenuClick', 'contextMenuOpen', 'created', 'dataBound', 'dataSourceChanged', 'dataStateChange', 'destroyed', 'detailDataBound', 'excelExportComplete', 'excelQueryCellInfo', 'load', 'pdfExportComplete', 'pdfQueryCellInfo', 'printComplete', 'queryCellInfo', 'recordDoubleClick', 'resizeStart', 'resizeStop', 'resizing', 'rowDataBound', 'rowDeselected', 'rowDeselecting', 'rowDrag', 'rowDragStart', 'rowDrop', 'rowSelected', 'rowSelecting', 'toolbarClick', 'dataSourceChange'];
export var twoWays = ['dataSource'];
/**
 * `ejs-grid` represents the Angular Grid Component.
 * ```html
 * <ejs-grid [dataSource]='data' allowPaging='true' allowSorting='true'></ejs-grid>
 * ```
 */
var GridComponent = /** @class */ (function (_super) {
    __extends(GridComponent, _super);
    function GridComponent(ngEle, viewContainerRef, filter, page, selection, sort, group, reorder, rowDD, detailRow, toolbar, aggregate, search, virtualScroll, edit, resize, excelExport, pdfExport, commandColumn, contextMenu, freeze, columnMenu, columnChooser, foreignKey) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.viewContainerRef = viewContainerRef;
        _this.tags = ['columns', 'aggregates'];
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        for (var i = 2; i < arguments.length; i++) {
            var injectedObj = arguments[i];
            if (injectedObj) {
                _this.injectedModules.push(injectedObj);
            }
        }
        _this.registerEvents(outputs);
        _this.addTwoWay.call(_this, twoWays);
        setValue('currentInstance', _this, _this.viewContainerRef);
        return _this;
    }
    GridComponent.prototype.ngOnInit = function () {
    };
    GridComponent.prototype.ngAfterViewInit = function () {
    };
    GridComponent.prototype.ngOnDestroy = function () {
    };
    GridComponent.prototype.ngAfterContentChecked = function () {
    };
    GridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ejs-grid',
                    inputs: inputs,
                    outputs: outputs,
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    queries: {
                        childColumns: new ContentChild(ColumnsDirective),
                        childAggregates: new ContentChild(AggregatesDirective)
                    }
                },] },
    ];
    /** @nocollapse */
    GridComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ViewContainerRef, },
        { type: Filter, decorators: [{ type: Optional },] },
        { type: Page, decorators: [{ type: Optional },] },
        { type: Selection, decorators: [{ type: Optional },] },
        { type: Sort, decorators: [{ type: Optional },] },
        { type: Group, decorators: [{ type: Optional },] },
        { type: Reorder, decorators: [{ type: Optional },] },
        { type: RowDD, decorators: [{ type: Optional },] },
        { type: DetailRow, decorators: [{ type: Optional },] },
        { type: Toolbar, decorators: [{ type: Optional },] },
        { type: Aggregate, decorators: [{ type: Optional },] },
        { type: Search, decorators: [{ type: Optional },] },
        { type: VirtualScroll, decorators: [{ type: Optional },] },
        { type: Edit, decorators: [{ type: Optional },] },
        { type: Resize, decorators: [{ type: Optional },] },
        { type: ExcelExport, decorators: [{ type: Optional },] },
        { type: PdfExport, decorators: [{ type: Optional },] },
        { type: CommandColumn, decorators: [{ type: Optional },] },
        { type: ContextMenu, decorators: [{ type: Optional },] },
        { type: Freeze, decorators: [{ type: Optional },] },
        { type: ColumnMenu, decorators: [{ type: Optional },] },
        { type: ColumnChooser, decorators: [{ type: Optional },] },
        { type: ForeignKey, decorators: [{ type: Optional },] },
    ]; };
    GridComponent.propDecorators = {
        'rowTemplate': [{ type: ContentChild, args: ['rowTemplate',] },],
        'detailTemplate': [{ type: ContentChild, args: ['detailTemplate',] },],
        'toolbarTemplate': [{ type: ContentChild, args: ['toolbarTemplate',] },],
        'pagerTemplate': [{ type: ContentChild, args: ['pagerTemplate',] },],
    };
    __decorate([
        Template(),
        __metadata("design:type", Object)
    ], GridComponent.prototype, "rowTemplate", void 0);
    __decorate([
        Template(),
        __metadata("design:type", Object)
    ], GridComponent.prototype, "detailTemplate", void 0);
    __decorate([
        Template(),
        __metadata("design:type", Object)
    ], GridComponent.prototype, "toolbarTemplate", void 0);
    __decorate([
        Template(),
        __metadata("design:type", Object)
    ], GridComponent.prototype, "pagerTemplate", void 0);
    return GridComponent;
}(Grid));
export { GridComponent };
applyMixins(GridComponent, [ComponentBase]);
export var FilterService = { provide: Filter, useValue: Filter };
export var PageService = { provide: Page, useValue: Page };
export var SelectionService = { provide: Selection, useValue: Selection };
export var SortService = { provide: Sort, useValue: Sort };
export var GroupService = { provide: Group, useValue: Group };
export var ReorderService = { provide: Reorder, useValue: Reorder };
export var RowDDService = { provide: RowDD, useValue: RowDD };
export var DetailRowService = { provide: DetailRow, useValue: DetailRow };
export var ToolbarService = { provide: Toolbar, useValue: Toolbar };
export var AggregateService = { provide: Aggregate, useValue: Aggregate };
export var SearchService = { provide: Search, useValue: Search };
export var VirtualScrollService = { provide: VirtualScroll, useValue: VirtualScroll };
export var EditService = { provide: Edit, useValue: Edit };
export var ResizeService = { provide: Resize, useValue: Resize };
export var ExcelExportService = { provide: ExcelExport, useValue: ExcelExport };
export var PdfExportService = { provide: PdfExport, useValue: PdfExport };
export var CommandColumnService = { provide: CommandColumn, useValue: CommandColumn };
export var ContextMenuService = { provide: ContextMenu, useValue: ContextMenu };
export var FreezeService = { provide: Freeze, useValue: Freeze };
export var ColumnMenuService = { provide: ColumnMenu, useValue: ColumnMenu };
export var ColumnChooserService = { provide: ColumnChooser, useValue: ColumnChooser };
export var ForeignKeyService = { provide: ForeignKey, useValue: ForeignKey };
//# sourceMappingURL=grid.component.js.map