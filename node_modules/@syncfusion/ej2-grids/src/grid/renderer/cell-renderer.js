define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "../base/util", "@syncfusion/ej2-buttons", "../base/constant"], function (require, exports, ej2_base_1, ej2_base_2, util_1, ej2_buttons_1, constant_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CellRenderer = (function () {
        function CellRenderer(parent, locator) {
            this.element = ej2_base_2.createElement('TD', { className: 'e-rowcell', attrs: { role: 'gridcell', tabindex: '-1' } });
            this.rowChkBox = ej2_base_2.createElement('input', { className: 'e-checkselect', attrs: { 'type': 'checkbox' } });
            this.localizer = locator.getService('localization');
            this.formatter = locator.getService('valueFormatter');
            this.parent = parent;
        }
        CellRenderer.prototype.getGui = function () {
            return '';
        };
        CellRenderer.prototype.format = function (column, value, data) {
            if (!ej2_base_1.isNullOrUndefined(column.format)) {
                value = this.formatter.toView(value, column.getFormatter());
            }
            return ej2_base_1.isNullOrUndefined(value) ? '' : value.toString();
        };
        CellRenderer.prototype.evaluate = function (node, cell, data, attributes, fData) {
            var result;
            if (cell.column.template) {
                var literals = ['index'];
                var dummyData = ej2_base_1.extend({}, data, (_a = {}, _a[constant_1.foreignKeyData] = fData, _a));
                result = cell.column.getColumnTemplate()(ej2_base_1.extend({ 'index': attributes[literals[0]] }, dummyData), this.parent, 'template');
                util_1.appendChildren(node, result);
                result = null;
                node.setAttribute('aria-label', node.innerText + ' is template cell' + ' column header ' +
                    cell.column.headerText);
                return false;
            }
            return true;
            var _a;
        };
        CellRenderer.prototype.invokeFormatter = function (column, value, data) {
            if (!ej2_base_1.isNullOrUndefined(column.formatter)) {
                if (util_1.doesImplementInterface(column.formatter, 'getValue')) {
                    var formatter = column.formatter;
                    value = new formatter().getValue(column, data);
                }
                else if (typeof column.formatter === 'function') {
                    value = column.formatter(column, data);
                }
                else {
                    value = column.formatter.getValue(column, data);
                }
            }
            return value;
        };
        CellRenderer.prototype.render = function (cell, data, attributes) {
            return this.refreshCell(cell, data, attributes);
        };
        CellRenderer.prototype.refreshTD = function (td, cell, data, attributes) {
            var node = this.refreshCell(cell, data, attributes);
            td.innerHTML = '';
            var elements = [].slice.call(node.childNodes);
            for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
                var elem = elements_1[_i];
                td.appendChild(elem);
            }
        };
        CellRenderer.prototype.refreshCell = function (cell, data, attributes) {
            var node = this.element.cloneNode();
            var column = cell.column;
            var fData;
            if (cell.isForeignKey) {
                fData = cell.foreignKeyData[0] || (_a = {}, _a[column.foreignKeyValue] = column.format ? null : '', _a);
            }
            var innerHtml = this.getGui();
            var value = cell.isForeignKey ? this.getValue(column.foreignKeyValue, fData, column) :
                this.getValue(column.field, data, column);
            if (column.type === 'date' && !ej2_base_1.isNullOrUndefined(value)) {
                value = new Date(value);
            }
            value = this.format(column, value, data);
            innerHtml = value.toString();
            if (column.type === 'boolean' && !column.displayAsCheckBox) {
                var localeStr = (value !== 'true' && value !== 'false') ? null : value === 'true' ? 'True' : 'False';
                innerHtml = localeStr ? this.localizer.getConstant(localeStr) : innerHtml;
            }
            var fromFormatter = this.invokeFormatter(column, value, data);
            innerHtml = !ej2_base_1.isNullOrUndefined(column.formatter) ? ej2_base_1.isNullOrUndefined(fromFormatter) ? '' : fromFormatter.toString() : innerHtml;
            node.setAttribute('aria-label', (innerHtml === '' ? 'empty' : innerHtml) + ' column header ' + cell.column.headerText);
            if (!ej2_base_1.isNullOrUndefined(cell.column.headerText)) {
                node.setAttribute('aria-label', innerHtml + ' column header ' + cell.column.headerText);
            }
            if (this.evaluate(node, cell, data, attributes, fData) && column.type !== 'checkbox') {
                this.appendHtml(node, innerHtml, column.getDomSetter ? column.getDomSetter() : 'innerHTML');
            }
            else if (column.type === 'checkbox') {
                node.classList.add('e-gridchkbox');
                node.setAttribute('aria-label', 'checkbox');
                if (this.parent.selectionSettings.persistSelection) {
                    value = value === 'true';
                }
                else {
                    value = false;
                }
                var checkWrap = ej2_buttons_1.createCheckBox(false, { checked: value, label: ' ' });
                checkWrap.insertBefore(this.rowChkBox.cloneNode(), checkWrap.firstChild);
                node.appendChild(checkWrap);
            }
            if (this.parent.checkAllRows === 'Check' && this.parent.enableVirtualization) {
                cell.isSelected = true;
            }
            this.setAttributes(node, cell, attributes);
            if (column.type === 'boolean' && column.displayAsCheckBox) {
                var checked = isNaN(parseInt(value.toString(), 10)) ? value === 'true' : parseInt(value.toString(), 10) > 0;
                var checkWrap = ej2_buttons_1.createCheckBox(false, { checked: checked, label: ' ' });
                node.innerHTML = '';
                checkWrap.classList.add('e-checkbox-disabled');
                node.appendChild(checkWrap);
                node.setAttribute('aria-label', checked + ' column header ' + cell.column.headerText);
            }
            return node;
            var _a;
        };
        CellRenderer.prototype.appendHtml = function (node, innerHtml, property) {
            if (property === void 0) { property = 'innerHTML'; }
            node[property] = innerHtml;
            return node;
        };
        CellRenderer.prototype.setAttributes = function (node, cell, attributes) {
            var column = cell.column;
            this.buildAttributeFromCell(node, cell, column.type === 'checkbox');
            util_1.setStyleAndAttributes(node, attributes);
            util_1.setStyleAndAttributes(node, cell.attributes);
            if (column.customAttributes) {
                util_1.setStyleAndAttributes(node, column.customAttributes);
            }
            if (column.textAlign) {
                node.style.textAlign = column.textAlign;
            }
            if (column.clipMode === 'Clip') {
                node.classList.add('e-gridclip');
            }
            else if (column.clipMode === 'EllipsisWithTooltip') {
                node.classList.add('e-ellipsistooltip');
            }
        };
        CellRenderer.prototype.buildAttributeFromCell = function (node, cell, isCheckBoxType) {
            var attr = {};
            var prop = { 'colindex': 'aria-colindex' };
            var classes = [];
            if (cell.colSpan) {
                attr.colSpan = cell.colSpan;
            }
            if (cell.rowSpan) {
                attr.rowSpan = cell.rowSpan;
            }
            if (cell.isTemplate) {
                classes.push('e-templatecell');
            }
            if (cell.isSelected) {
                classes.push.apply(classes, ['e-selectionbackground', 'e-active']);
                if (isCheckBoxType) {
                    node.querySelector('.e-frame').classList.add('e-check');
                }
            }
            if (!ej2_base_1.isNullOrUndefined(cell.index)) {
                attr[prop.colindex] = cell.index;
            }
            if (!cell.visible) {
                classes.push('e-hide');
            }
            attr.class = classes;
            util_1.setStyleAndAttributes(node, attr);
        };
        CellRenderer.prototype.getValue = function (field, data, column) {
            return column.valueAccessor(field, data, column);
        };
        return CellRenderer;
    }());
    exports.CellRenderer = CellRenderer;
});
