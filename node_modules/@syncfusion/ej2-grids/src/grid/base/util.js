define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-data", "../models/column", "@syncfusion/ej2-popups"], function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, ej2_data_1, column_1, ej2_popups_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function doesImplementInterface(target, checkFor) {
        return target.prototype && checkFor in target.prototype;
    }
    exports.doesImplementInterface = doesImplementInterface;
    function valueAccessor(field, data, column) {
        field = ej2_base_2.isNullOrUndefined(field) ? '' : field;
        return ej2_base_2.getValue(field, data);
    }
    exports.valueAccessor = valueAccessor;
    function getUpdateUsingRaf(updateFunction, callBack) {
        requestAnimationFrame(function () {
            try {
                callBack(null, updateFunction());
            }
            catch (e) {
                callBack(e);
            }
        });
    }
    exports.getUpdateUsingRaf = getUpdateUsingRaf;
    function iterateArrayOrObject(collection, predicate) {
        var result = [];
        for (var i = 0, len = collection.length; i < len; i++) {
            var pred = predicate(collection[i], i);
            if (!ej2_base_2.isNullOrUndefined(pred)) {
                result.push(pred);
            }
        }
        return result;
    }
    exports.iterateArrayOrObject = iterateArrayOrObject;
    function templateCompiler(template) {
        if (template) {
            var e = void 0;
            try {
                if (document.querySelectorAll(template).length) {
                    return ej2_base_1.compile(document.querySelector(template).innerHTML.trim());
                }
            }
            catch (e) {
                return ej2_base_1.compile(template);
            }
        }
        return undefined;
    }
    exports.templateCompiler = templateCompiler;
    function setStyleAndAttributes(node, customAttributes) {
        var copyAttr = {};
        var literals = ['style', 'class'];
        ej2_base_2.extend(copyAttr, customAttributes, {});
        if ('style' in copyAttr) {
            ej2_base_3.setStyleAttribute(node, copyAttr[literals[0]]);
            delete copyAttr[literals[0]];
        }
        if ('class' in copyAttr) {
            ej2_base_3.addClass([node], copyAttr[literals[1]]);
            delete copyAttr[literals[1]];
        }
        ej2_base_3.attributes(node, copyAttr);
    }
    exports.setStyleAndAttributes = setStyleAndAttributes;
    function extend(copied, first, second, exclude) {
        var moved = ej2_base_2.extend(copied, first, second);
        Object.keys(moved).forEach(function (value, index) {
            if (exclude.indexOf(value) !== -1) {
                delete moved[value];
            }
        });
        return moved;
    }
    exports.extend = extend;
    function prepareColumns(columns, autoWidth) {
        for (var c = 0, len = columns.length; c < len; c++) {
            var column = void 0;
            if (typeof columns[c] === 'string') {
                column = new column_1.Column({ field: columns[c] });
            }
            else if (!(columns[c] instanceof column_1.Column)) {
                if (!columns[c].columns) {
                    column = new column_1.Column(columns[c]);
                }
                else {
                    column = new column_1.Column(columns[c]);
                    columns[c].columns = prepareColumns(columns[c].columns);
                }
            }
            else {
                column = columns[c];
            }
            column.headerText = ej2_base_2.isNullOrUndefined(column.headerText) ? column.foreignKeyValue || column.field || '' : column.headerText;
            column.foreignKeyField = column.foreignKeyField || column.field;
            column.valueAccessor = (typeof column.valueAccessor === 'string' ? ej2_base_2.getValue(column.valueAccessor, window)
                : column.valueAccessor) || valueAccessor;
            column.width = autoWidth && ej2_base_2.isNullOrUndefined(column.width) ? 200 : column.width;
            if (ej2_base_2.isNullOrUndefined(column.visible)) {
                column.visible = true;
            }
            columns[c] = column;
        }
        return columns;
    }
    exports.prepareColumns = prepareColumns;
    function setCssInGridPopUp(popUp, e, className) {
        var popUpSpan = popUp.querySelector('span');
        var position = popUp.parentElement.getBoundingClientRect();
        var targetPosition = e.target.getBoundingClientRect();
        var isBottomTail;
        popUpSpan.className = className;
        popUp.style.display = '';
        isBottomTail = (ej2_base_2.isNullOrUndefined(e.clientY) ? e.changedTouches[0].clientY :
            e.clientY) > popUp.offsetHeight + 10;
        popUp.style.top = targetPosition.top - position.top +
            (isBottomTail ? -(popUp.offsetHeight + 10) : popUp.offsetHeight + 10) + 'px';
        popUp.style.left = getPopupLeftPosition(popUp, e, targetPosition, position.left) + 'px';
        if (isBottomTail) {
            popUp.querySelector('.e-downtail').style.display = '';
            popUp.querySelector('.e-uptail').style.display = 'none';
        }
        else {
            popUp.querySelector('.e-downtail').style.display = 'none';
            popUp.querySelector('.e-uptail').style.display = '';
        }
    }
    exports.setCssInGridPopUp = setCssInGridPopUp;
    function getPopupLeftPosition(popup, e, targetPosition, left) {
        var width = popup.offsetWidth / 2;
        var x = getPosition(e).x;
        if (x - targetPosition.left < width) {
            return targetPosition.left - left;
        }
        else if (targetPosition.right - x < width) {
            return targetPosition.right - left - width * 2;
        }
        else {
            return x - left - width;
        }
    }
    function getActualProperties(obj) {
        if (obj instanceof ej2_base_1.ChildProperty) {
            return ej2_base_2.getValue('properties', obj);
        }
        else {
            return obj;
        }
    }
    exports.getActualProperties = getActualProperties;
    function parentsUntil(elem, selector, isID) {
        var parent = elem;
        while (parent) {
            if (isID ? parent.id === selector : parent.classList.contains(selector)) {
                break;
            }
            parent = parent.parentElement;
        }
        return parent;
    }
    exports.parentsUntil = parentsUntil;
    function getElementIndex(element, elements) {
        var index = -1;
        for (var i = 0, len = elements.length; i < len; i++) {
            if (elements[i].isEqualNode(element)) {
                index = i;
                break;
            }
        }
        return index;
    }
    exports.getElementIndex = getElementIndex;
    function inArray(value, collection) {
        for (var i = 0, len = collection.length; i < len; i++) {
            if (collection[i] === value) {
                return i;
            }
        }
        return -1;
    }
    exports.inArray = inArray;
    function getActualPropFromColl(collection) {
        var coll = [];
        for (var i = 0, len = collection.length; i < len; i++) {
            if (collection[i].hasOwnProperty('properties')) {
                coll.push(collection[i].properties);
            }
            else {
                coll.push(collection[i]);
            }
        }
        return coll;
    }
    exports.getActualPropFromColl = getActualPropFromColl;
    function removeElement(target, selector) {
        var elements = [].slice.call(target.querySelectorAll(selector));
        for (var i = 0; i < elements.length; i++) {
            ej2_base_3.remove(elements[i]);
        }
    }
    exports.removeElement = removeElement;
    function getPosition(e) {
        var position = {};
        position.x = (ej2_base_2.isNullOrUndefined(e.clientX) ? e.changedTouches[0].clientX :
            e.clientX);
        position.y = (ej2_base_2.isNullOrUndefined(e.clientY) ? e.changedTouches[0].clientY :
            e.clientY);
        return position;
    }
    exports.getPosition = getPosition;
    var uid = 0;
    function getUid(prefix) {
        return prefix + uid++;
    }
    exports.getUid = getUid;
    function appendChildren(elem, children) {
        for (var i = 0, len = children.length; i < len; i++) {
            if (len === children.length) {
                elem.appendChild(children[i]);
            }
            else {
                elem.appendChild(children[0]);
            }
        }
        children = null;
        return elem;
    }
    exports.appendChildren = appendChildren;
    function parents(elem, selector, isID) {
        var parent = elem;
        var parents = [];
        while (parent) {
            if (isID ? parent.id === selector : parent.classList.contains(selector)) {
                parents.push(parent);
            }
            parent = parent.parentElement;
        }
        return parents;
    }
    exports.parents = parents;
    function calculateAggregate(type, data, column, context) {
        if (type === 'Custom') {
            var temp = column.customAggregate;
            if (typeof temp === 'string') {
                temp = ej2_base_2.getValue(temp, window);
            }
            return temp ? temp.call(context, data, column) : '';
        }
        return ej2_data_1.DataUtil.aggregates[type.toLowerCase()](data, column.field);
    }
    exports.calculateAggregate = calculateAggregate;
    var scrollWidth = null;
    function getScrollBarWidth() {
        if (scrollWidth !== null) {
            return scrollWidth;
        }
        var divNode = document.createElement('div');
        var value = 0;
        divNode.style.cssText = 'width:100px;height: 100px;overflow: scroll;position: absolute;top: -9999px;';
        document.body.appendChild(divNode);
        value = (divNode.offsetWidth - divNode.clientWidth) | 0;
        document.body.removeChild(divNode);
        return scrollWidth = value;
    }
    exports.getScrollBarWidth = getScrollBarWidth;
    var rowHeight;
    function getRowHeight(element) {
        if (rowHeight !== undefined) {
            return rowHeight;
        }
        var table = ej2_base_3.createElement('table', { className: 'e-table', styles: 'visibility: hidden' });
        table.innerHTML = '<tr><td class="e-rowcell">A<td></tr>';
        element.appendChild(table);
        var rect = table.querySelector('td').getBoundingClientRect();
        element.removeChild(table);
        rowHeight = Math.ceil(rect.height);
        return rowHeight;
    }
    exports.getRowHeight = getRowHeight;
    function isEditable(col, type, elem) {
        var row = parentsUntil(elem, 'e-row');
        var isOldRow = !row ? true : row && !row.classList.contains('e-insertedrow');
        if (type === 'beginEdit' && isOldRow) {
            if (col.isIdentity || col.isPrimaryKey || !col.allowEditing) {
                return false;
            }
            return true;
        }
        else if (type === 'add' && col.isIdentity && col.isPrimaryKey) {
            return false;
        }
        else {
            if (isOldRow && !col.allowEditing && !col.isIdentity && !col.isPrimaryKey) {
                return false;
            }
            return true;
        }
    }
    exports.isEditable = isEditable;
    function isActionPrevent(inst) {
        var dlg = inst.element.querySelector('#' + inst.element.id + 'EditConfirm');
        return inst.editSettings.mode === 'Batch' &&
            (inst.element.querySelectorAll('.e-updatedtd').length) && inst.editSettings.showConfirmDialog &&
            (dlg ? dlg.classList.contains('e-popup-close') : true);
    }
    exports.isActionPrevent = isActionPrevent;
    function wrap(elem, action) {
        var clName = 'e-wrap';
        elem = elem instanceof Array ? elem : [elem];
        for (var i = 0; i < elem.length; i++) {
            action ? elem[i].classList.add(clName) : elem[i].classList.remove(clName);
        }
    }
    exports.wrap = wrap;
    function changeButtonType(target) {
        var elements = [].slice.call(target.querySelectorAll('button'));
        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
            var button = elements_1[_i];
            ej2_base_3.attributes(button, { type: 'button' });
        }
    }
    exports.changeButtonType = changeButtonType;
    function setFormatter(serviceLocator, column) {
        var fmtr = serviceLocator.getService('valueFormatter');
        switch (column.type) {
            case 'date':
                column.setFormatter(fmtr.getFormatFunction({ type: 'date', skeleton: column.format }));
                column.setParser(fmtr.getParserFunction({ type: 'date', skeleton: column.format }));
                break;
            case 'datetime':
                column.setFormatter(fmtr.getFormatFunction({ type: 'dateTime', skeleton: column.format }));
                column.setParser(fmtr.getParserFunction({ type: 'dateTime', skeleton: column.format }));
                break;
            case 'number':
                column.setFormatter(fmtr.getFormatFunction({ format: column.format }));
                column.setParser(fmtr.getParserFunction({ format: column.format }));
                break;
        }
    }
    exports.setFormatter = setFormatter;
    function addRemoveActiveClasses(cells, add) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        for (var i = 0, len = cells.length; i < len; i++) {
            if (add) {
                ej2_base_2.classList(cells[i], args.slice(), []);
                cells[i].setAttribute('aria-selected', 'true');
            }
            else {
                ej2_base_2.classList(cells[i], [], args.slice());
                cells[i].removeAttribute('aria-selected');
            }
        }
    }
    exports.addRemoveActiveClasses = addRemoveActiveClasses;
    function distinctStringValues(result) {
        var temp = {};
        var res = [];
        for (var i = 0; i < result.length; i++) {
            if (!(result[i] in temp)) {
                res.push(result[i].toString());
                temp[result[i]] = 1;
            }
        }
        return res;
    }
    exports.distinctStringValues = distinctStringValues;
    function getFilterMenuPostion(target, dialogObj, grid) {
        var elementVisible = dialogObj.element.style.display;
        dialogObj.element.style.display = 'block';
        var dlgWidth = dialogObj.width;
        var newpos;
        if (!grid.enableRtl) {
            newpos = ej2_popups_1.calculateRelativeBasedPosition(target, dialogObj.element);
            dialogObj.element.style.display = elementVisible;
            dialogObj.element.style.top = (newpos.top + target.getBoundingClientRect().height) - 5 + 'px';
            var leftPos = ((newpos.left - dlgWidth) + target.clientWidth);
            if (leftPos < 1) {
                dialogObj.element.style.left = (dlgWidth + leftPos) - 16 + 'px';
            }
            else {
                dialogObj.element.style.left = leftPos + -4 + 'px';
            }
        }
        else {
            newpos = ej2_popups_1.calculatePosition(target, 'left', 'bottom');
            dialogObj.element.style.top = (newpos.top + target.getBoundingClientRect().height) - 35 + 'px';
            dialogObj.element.style.display = elementVisible;
            var leftPos = ((newpos.left - dlgWidth) + target.clientWidth);
            if (leftPos < 1) {
                dialogObj.element.style.left = (dlgWidth + leftPos) + -16 + 'px';
            }
            else {
                dialogObj.element.style.left = leftPos - 16 + 'px';
            }
        }
    }
    exports.getFilterMenuPostion = getFilterMenuPostion;
    function getZIndexCalcualtion(args, dialogObj) {
        args.popup.element.style.zIndex = (dialogObj.zIndex + 1).toString();
    }
    exports.getZIndexCalcualtion = getZIndexCalcualtion;
    function toogleCheckbox(elem) {
        var span = elem.querySelector('.e-frame');
        span.classList.contains('e-check') ? ej2_base_2.classList(span, ['e-uncheck'], ['e-check']) :
            ej2_base_2.classList(span, ['e-check'], ['e-uncheck']);
    }
    exports.toogleCheckbox = toogleCheckbox;
    function createCboxWithWrap(uid, elem, className) {
        var div = ej2_base_3.createElement('div', { className: className });
        div.appendChild(elem);
        div.setAttribute('uid', uid);
        return div;
    }
    exports.createCboxWithWrap = createCboxWithWrap;
    function removeAddCboxClasses(elem, checked) {
        ej2_base_3.removeClass([elem], ['e-check', 'e-stop', 'e-uncheck']);
        if (checked) {
            elem.classList.add('e-check');
        }
        else {
            elem.classList.add('e-uncheck');
        }
    }
    exports.removeAddCboxClasses = removeAddCboxClasses;
    function refreshForeignData(row, columns, data) {
        columns.forEach(function (col) {
            ej2_base_1.setValue(col.field, getForeignData(col, data), row.foreignKeyData);
        });
        row.cells.forEach(function (cell) {
            if (cell.isForeignKey) {
                ej2_base_1.setValue('foreignKeyData', ej2_base_2.getValue(cell.column.field, row.foreignKeyData), cell);
            }
        });
    }
    exports.refreshForeignData = refreshForeignData;
    function getForeignData(column, data, lValue, foreignKeyData) {
        var fField = column.foreignKeyField;
        var key = (lValue || valueAccessor(column.field, data, column));
        key = ej2_base_2.isNullOrUndefined(key) ? '' : key;
        var query = new ej2_data_1.Query();
        var fdata = foreignKeyData || (column.dataSource instanceof ej2_data_1.DataManager) && column.dataSource.dataSource.offline ?
            column.dataSource.dataSource.json : column.columnData;
        if (key.getDay) {
            query.where(getDatePredicate({ field: fField, operator: 'equal', value: key, matchCase: false }));
        }
        else {
            query.where(fField, '==', key, false);
        }
        return new ej2_data_1.DataManager(fdata).executeLocal(query);
    }
    exports.getForeignData = getForeignData;
    function getColumnByForeignKeyValue(foreignKeyValue, columns) {
        var column;
        return columns.some(function (col) {
            column = col;
            return col.foreignKeyValue === foreignKeyValue;
        }) && column;
    }
    exports.getColumnByForeignKeyValue = getColumnByForeignKeyValue;
    function getDatePredicate(filterObject) {
        var datePredicate;
        var prevDate;
        var nextDate;
        var prevObj = ej2_base_2.extend({}, getActualProperties(filterObject));
        var nextObj = ej2_base_2.extend({}, getActualProperties(filterObject));
        var value = new Date(filterObject.value);
        if (filterObject.operator === 'equal' || filterObject.operator === 'notequal') {
            prevDate = new Date(value.setHours(0) - 1);
            nextDate = new Date(value.setHours(24));
            prevObj.value = prevDate;
            nextObj.value = nextDate;
            if (filterObject.operator === 'equal') {
                prevObj.operator = 'greaterthan';
                nextObj.operator = 'lessthan';
            }
            else if (filterObject.operator === 'notequal') {
                prevObj.operator = 'lessthanorequal';
                nextObj.operator = 'greaterthanorequal';
            }
            var predicateSt = new ej2_data_1.Predicate(prevObj.field, prevObj.operator, prevObj.value, false);
            var predicateEnd = new ej2_data_1.Predicate(nextObj.field, nextObj.operator, nextObj.value, false);
            datePredicate = filterObject.operator === 'equal' ? predicateSt.and(predicateEnd) : predicateSt.or(predicateEnd);
        }
        else {
            if (typeof (prevObj.value) === 'string') {
                prevObj.value = new Date(prevObj.value);
            }
            var predicates = new ej2_data_1.Predicate(prevObj.field, prevObj.operator, prevObj.value, false);
            datePredicate = predicates;
        }
        if (filterObject.setProperties) {
            filterObject.setProperties({ ejpredicate: datePredicate }, true);
        }
        else {
            filterObject.ejpredicate = datePredicate;
        }
        return datePredicate;
    }
    exports.getDatePredicate = getDatePredicate;
    function renderMovable(ele, frzCols) {
        var mEle = ele.cloneNode(true);
        for (var i = 0; i < frzCols; i++) {
            mEle.removeChild(mEle.children[0]);
        }
        for (var i = frzCols, len = ele.childElementCount; i < len; i++) {
            ele.removeChild(ele.children[ele.childElementCount - 1]);
        }
        return mEle;
    }
    exports.renderMovable = renderMovable;
});
