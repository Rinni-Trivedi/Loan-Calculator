var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-data", "../base/constant", "../base/util", "./data"], function (require, exports, ej2_base_1, ej2_data_1, constant_1, util_1, data_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ForeignKey = (function (_super) {
        __extends(ForeignKey, _super);
        function ForeignKey(parent, serviceLocator) {
            var _this = _super.call(this, parent, serviceLocator) || this;
            _this.parent = parent;
            _this.serviceLocator = serviceLocator;
            _this.initEvent();
            return _this;
        }
        ForeignKey.prototype.initEvent = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.on(constant_1.initForeignKeyColumn, this.initForeignKeyColumns, this);
            this.parent.on(constant_1.getForeignKeyData, this.getForeignKeyData, this);
            this.parent.on(constant_1.generateQuery, this.generateQueryFormData, this);
        };
        ForeignKey.prototype.initForeignKeyColumns = function (columns) {
            columns.forEach(function (column) {
                column.dataSource = (column.dataSource instanceof ej2_data_1.DataManager ? column.dataSource :
                    (ej2_base_1.isNullOrUndefined(column.dataSource) ? new ej2_data_1.DataManager() : new ej2_data_1.DataManager(column.dataSource)));
            });
        };
        ForeignKey.prototype.getForeignKeyData = function (args) {
            var _this = this;
            var foreignColumns = args.column ? [args.column] : this.parent.getForeignKeyColumns();
            var allPromise = [];
            foreignColumns.forEach(function (col) {
                var promise;
                var query = args.isComplex ? _this.genarateColumnQuery(col) :
                    _this.genarateQuery(col, args.result.result, false, true);
                var dataSource = col.dataSource;
                if (!dataSource.ready || dataSource.dataSource.offline) {
                    promise = dataSource.executeQuery(query);
                }
                else {
                    promise = dataSource.ready.then(function () {
                        return dataSource.executeQuery(query);
                    });
                }
                allPromise.push(promise);
            });
            Promise.all(allPromise).then(function (responses) {
                responses.forEach(function (data, index) {
                    foreignColumns[index].columnData = data.result;
                });
                args.promise.resolve(args.result);
            }).catch(function (e) {
                if (args.promise && args.promise.reject) {
                    args.promise.reject(e);
                }
                return e;
            });
        };
        ForeignKey.prototype.generateQueryFormData = function (args) {
            args.predicate.predicate = this.genarateQuery(args.column, args.column.columnData, true);
        };
        ForeignKey.prototype.genarateQuery = function (column, e, fromData, needQuery) {
            var gObj = this.parent;
            var predicates = [];
            var predicate;
            var query = new ej2_data_1.Query();
            var field = fromData ? column.foreignKeyField : column.field;
            if (gObj.allowPaging || gObj.enableVirtualization || fromData) {
                e = new ej2_data_1.DataManager(((gObj.allowGrouping && gObj.groupSettings.columns.length) ?
                    e.records : e)).executeLocal(new ej2_data_1.Query().select(field));
                var filteredValue = ej2_data_1.DataUtil.distinct(e, field, false);
                field = fromData ? column.field : column.foreignKeyField;
                filteredValue.forEach(function (obj) {
                    if (obj && obj.getDay) {
                        predicates.push(util_1.getDatePredicate({ field: field, operator: 'equal', value: obj, matchCase: false }));
                    }
                    else {
                        predicates.push(new ej2_data_1.Predicate(field, 'equal', obj, false));
                    }
                });
            }
            if (needQuery) {
                return predicates.length ? query.where(ej2_data_1.Predicate.or(predicates)) : query;
            }
            predicate = (predicates.length ? ej2_data_1.Predicate.or(predicates) : { predicates: [] });
            return predicate;
        };
        ForeignKey.prototype.genarateColumnQuery = function (column) {
            var gObj = this.parent;
            var query = gObj.query.clone();
            var predicate = [];
            var queryColumn = this.isFiltered(column);
            if (queryColumn.isTrue) {
                query = this.filterQuery(query, queryColumn.column, true);
            }
            if (gObj.searchSettings.key.length) {
                var sSettings = gObj.searchSettings;
                query.search(sSettings.key, column.foreignKeyValue, sSettings.operator, sSettings.ignoreCase);
            }
            return query;
        };
        ForeignKey.prototype.isFiltered = function (column) {
            var filterColumn = this.parent.filterSettings.columns.filter(function (fColumn) {
                return (fColumn.field === column.foreignKeyValue);
            });
            return {
                column: filterColumn, isTrue: !!filterColumn.length
            };
        };
        ForeignKey.prototype.getModuleName = function () {
            return 'foreignKey';
        };
        ForeignKey.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.destroyEvent();
        };
        ForeignKey.prototype.destroyEvent = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.off(constant_1.initForeignKeyColumn, this.initForeignKeyColumns);
            this.parent.off(constant_1.getForeignKeyData, this.getForeignKeyData);
            this.parent.off(constant_1.generateQuery, this.generateQueryFormData);
        };
        return ForeignKey;
    }(data_1.Data));
    exports.ForeignKey = ForeignKey;
});
