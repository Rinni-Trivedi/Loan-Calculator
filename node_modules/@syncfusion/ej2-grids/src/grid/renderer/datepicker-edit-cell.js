define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-calendars", "../base/util"], function (require, exports, ej2_base_1, ej2_base_2, ej2_calendars_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DatePickerEditCell = (function () {
        function DatePickerEditCell(parent) {
            this.parent = parent;
        }
        DatePickerEditCell.prototype.create = function (args) {
            var splits = !ej2_base_2.isNullOrUndefined(args.column.field) && args.column.field.split('.');
            var isComplexField = !ej2_base_2.isNullOrUndefined(args.column.field) && args.column.field.split('.').length > 1;
            return ej2_base_2.createElement('input', {
                className: 'e-field', attrs: {
                    id: isComplexField ? this.parent.element.id + splits[0] + splits[1] : this.parent.element.id + args.column.field,
                    name: isComplexField ? splits[0] + splits[1] : args.column.field, type: 'text', 'e-mappinguid': args.column.uid,
                }
            });
        };
        DatePickerEditCell.prototype.read = function (element) {
            return element.ej2_instances[0].value;
        };
        DatePickerEditCell.prototype.write = function (args) {
            var isInline = this.parent.editSettings.mode !== 'Dialog';
            var splits = !ej2_base_2.isNullOrUndefined(args.column.field) && args.column.field.split('.');
            var isComplexField = !ej2_base_2.isNullOrUndefined(args.column.field) && args.column.field.split('.').length > 1;
            this.obj = new ej2_calendars_1.DatePicker(ej2_base_1.extend({
                floatLabelType: isInline ? 'Never' : 'Always',
                value: isComplexField ? new Date(args.rowData[splits[0]][splits[1]]) : new Date(args.rowData[args.column.field]),
                placeholder: isInline ?
                    '' : args.column.headerText, enableRtl: this.parent.enableRtl,
                enabled: util_1.isEditable(args.column, args.type, args.element),
            }, args.column.edit.params));
            this.obj.appendTo(args.element);
        };
        DatePickerEditCell.prototype.destroy = function () {
            if (this.obj) {
                this.obj.destroy();
            }
        };
        return DatePickerEditCell;
    }());
    exports.DatePickerEditCell = DatePickerEditCell;
});
