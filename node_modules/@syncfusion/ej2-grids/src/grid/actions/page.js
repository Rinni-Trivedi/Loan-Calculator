define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "../../pager/pager", "../../pager/pager-dropdown", "../../pager/external-message", "../base/util", "../base/constant"], function (require, exports, ej2_base_1, ej2_base_2, pager_1, pager_dropdown_1, external_message_1, util_1, events) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    pager_1.Pager.Inject(external_message_1.ExternalMessage, pager_dropdown_1.PagerDropDown);
    var Page = (function () {
        function Page(parent, pageSettings) {
            this.parent = parent;
            this.pageSettings = pageSettings;
            this.addEventListener();
        }
        Page.prototype.getModuleName = function () {
            return 'pager';
        };
        Page.prototype.render = function () {
            var gObj = this.parent;
            var pagerObj;
            this.pagerDestroy();
            if (!ej2_base_2.isNullOrUndefined(this.parent.pagerTemplate)) {
                this.pageSettings.template = this.parent.pagerTemplate;
            }
            this.element = ej2_base_2.createElement('div', { className: 'e-gridpager' });
            pagerObj = util_1.extend({}, ej2_base_1.extend({}, util_1.getActualProperties(this.pageSettings)), {
                click: this.clickHandler.bind(this),
                dropDownChanged: this.onSelect.bind(this),
                enableRtl: gObj.enableRtl, locale: gObj.locale,
                created: this.addAriaAttr.bind(this)
            }, ['parentObj', 'propName']);
            this.pagerObj = new pager_1.Pager(pagerObj);
        };
        Page.prototype.onSelect = function (e) {
            this.pageSettings.pageSize = e.pageSize;
            this.pageSettings.currentPage = 1;
        };
        Page.prototype.addAriaAttr = function () {
            var _this = this;
            if (!(this.pageSettings.template)) {
                var numericContainerNew = ej2_base_2.createElement('div', { className: 'e-numericcontainer' });
                var pagerContainer = this.element.querySelector('.e-pagercontainer');
                var frag = document.createDocumentFragment();
                var numericContainer = this.element.querySelector('.e-numericcontainer');
                var links = numericContainer.querySelectorAll('a');
                for (var i = 0; i < links.length; i++) {
                    if (this.parent.getContentTable()) {
                        links[i].setAttribute('aria-owns', this.parent.getContentTable().id);
                    }
                    else {
                        links[i].setAttribute('aria-owns', this.parent.element.getAttribute('id') + '_content_table');
                    }
                    var numericContainerDiv = ej2_base_2.createElement('div');
                    numericContainerDiv.appendChild(links[i]);
                    frag.appendChild(numericContainerDiv);
                }
                numericContainerNew.appendChild(frag);
                pagerContainer.replaceChild(numericContainerNew, numericContainer);
                var classList = ['.e-mfirst', '.e-mprev', '.e-first', '.e-prev', '.e-next', '.e-last', '.e-mnext', '.e-mlast'];
                classList.forEach(function (value) {
                    var element = _this.element.querySelector(value);
                    if (_this.parent.getContentTable()) {
                        element.setAttribute('aria-owns', _this.parent.getContentTable().id);
                    }
                });
            }
        };
        Page.prototype.dataReady = function (e) {
            this.updateModel(e);
        };
        Page.prototype.refresh = function () {
            this.pagerObj.refresh();
        };
        Page.prototype.goToPage = function (pageNo) {
            this.pagerObj.goToPage(pageNo);
        };
        Page.prototype.updateModel = function (e) {
            this.parent.pageSettings.totalRecordsCount = e.count;
            this.parent.dataBind();
        };
        Page.prototype.onActionComplete = function (e) {
            this.parent.trigger(events.actionComplete, ej2_base_1.extend(e, {
                currentPage: this.parent.pageSettings.currentPage, requestType: 'paging',
                type: events.actionComplete
            }));
        };
        Page.prototype.onPropertyChanged = function (e) {
            if (e.module !== this.getModuleName()) {
                return;
            }
            var newProp = e.properties;
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                this.pagerObj[prop] = newProp[prop];
            }
            this.pagerObj.dataBind();
        };
        Page.prototype.clickHandler = function (e) {
            var gObj = this.parent;
            if (this.isForceCancel || util_1.isActionPrevent(gObj)) {
                if (!this.isForceCancel) {
                    gObj.notify(events.preventBatch, { instance: this, handler: this.goToPage, arg1: e.currentPage });
                    this.isForceCancel = true;
                    this.pagerObj.currentPage = gObj.pageSettings.currentPage;
                    this.pagerObj.dataBind();
                }
                else {
                    this.isForceCancel = false;
                }
                e.cancel = true;
                return;
            }
            var prevPage = this.pageSettings.currentPage;
            this.pageSettings.currentPage = e.currentPage;
            this.parent.notify(events.modelChanged, {
                requestType: 'paging',
                previousPage: prevPage,
                currentPage: e.currentPage,
                type: events.actionBegin
            });
        };
        Page.prototype.keyPressHandler = function (e) {
            if (e.action in keyActions) {
                e.preventDefault();
                this.element.querySelector(keyActions[e.action]).click();
            }
        };
        Page.prototype.updateExternalMessage = function (message) {
            if (!this.pagerObj.enableExternalMessage) {
                this.pagerObj.enableExternalMessage = true;
                this.pagerObj.dataBind();
            }
            this.pagerObj.externalMessage = message;
            this.pagerObj.dataBind();
        };
        Page.prototype.appendToElement = function (e) {
            this.parent.element.appendChild(this.element);
            this.parent.setGridPager(this.element);
            this.pagerObj.appendTo(this.element);
        };
        Page.prototype.enableAfterRender = function (e) {
            if (e.module === this.getModuleName() && e.enable) {
                this.render();
                this.appendToElement();
            }
        };
        Page.prototype.addEventListener = function () {
            this.handlers = {
                load: this.render,
                end: this.appendToElement,
                ready: this.dataReady,
                complete: this.onActionComplete,
                updateLayout: this.enableAfterRender,
                inboundChange: this.onPropertyChanged,
                keyPress: this.keyPressHandler
            };
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.on(events.initialLoad, this.handlers.load, this);
            this.parent.on(events.initialEnd, this.handlers.end, this);
            this.parent.on(events.dataReady, this.handlers.ready, this);
            this.parent.on(events.pageComplete, this.handlers.complete, this);
            this.parent.on(events.uiUpdate, this.handlers.updateLayout, this);
            this.parent.on(events.inBoundModelChanged, this.handlers.inboundChange, this);
            this.parent.on(events.keyPressed, this.handlers.keyPress, this);
        };
        Page.prototype.removeEventListener = function () {
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.off(events.initialLoad, this.handlers.load);
            this.parent.off(events.initialEnd, this.handlers.end);
            this.parent.off(events.dataReady, this.handlers.ready);
            this.parent.off(events.pageComplete, this.handlers.complete);
            this.parent.off(events.uiUpdate, this.handlers.updateLayout);
            this.parent.off(events.inBoundModelChanged, this.handlers.inboundChange);
            this.parent.off(events.keyPressed, this.handlers.keyPress);
        };
        Page.prototype.destroy = function () {
            this.removeEventListener();
            this.pagerDestroy();
        };
        Page.prototype.pagerDestroy = function () {
            if (this.pagerObj && !this.pagerObj.isDestroyed) {
                this.pagerObj.destroy();
                ej2_base_2.remove(this.element);
            }
        };
        return Page;
    }());
    exports.Page = Page;
    var keyActions = {
        pageUp: '.e-prev',
        pageDown: '.e-next',
        ctrlAltPageDown: '.e-last',
        ctrlAltPageUp: '.e-first',
        altPageUp: '.e-pp',
        altPageDown: '.e-np'
    };
});
