define(["require", "exports", "@syncfusion/ej2-base", "../base/util", "@syncfusion/ej2-base", "@syncfusion/ej2-data", "@syncfusion/ej2-buttons", "../base/constant", "../services/value-formatter", "../base/util", "@syncfusion/ej2-popups", "@syncfusion/ej2-inputs", "@syncfusion/ej2-popups", "../base/util"], function (require, exports, ej2_base_1, util_1, ej2_base_2, ej2_data_1, ej2_buttons_1, events, value_formatter_1, util_2, ej2_popups_1, ej2_inputs_1, ej2_popups_2, util_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CheckBoxFilter = (function () {
        function CheckBoxFilter(parent, filterSettings, serviceLocator) {
            this.existingPredicate = {};
            this.filterState = true;
            this.values = {};
            this.cBoxTrue = ej2_buttons_1.createCheckBox(false, { checked: true, label: ' ' });
            this.cBoxFalse = ej2_buttons_1.createCheckBox(false, { checked: false, label: ' ' });
            this.parent = parent;
            this.id = this.parent.element.id;
            this.serviceLocator = serviceLocator;
            this.filterSettings = filterSettings;
            this.valueFormatter = new value_formatter_1.ValueFormatter(this.parent.locale);
            this.cBoxTrue.insertBefore(ej2_base_2.createElement('input', {
                className: 'e-chk-hidden', attrs: { type: 'checkbox' }
            }), this.cBoxTrue.firstChild);
            this.cBoxFalse.insertBefore(ej2_base_2.createElement('input', {
                className: 'e-chk-hidden', attrs: { 'type': 'checkbox' }
            }), this.cBoxFalse.firstChild);
            this.cBoxFalse.querySelector('.e-frame').classList.add('e-uncheck');
            if (this.parent.enableRtl) {
                ej2_base_1.addClass([this.cBoxTrue, this.cBoxFalse], ['e-rtl']);
            }
        }
        CheckBoxFilter.prototype.destroy = function () {
            this.closeDialog();
        };
        CheckBoxFilter.prototype.wireEvents = function () {
            ej2_base_1.EventHandler.add(this.dlg, 'click', this.clickHandler, this);
            this.searchHandler = ej2_base_2.debounce(this.searchBoxKeyUp, 200);
            ej2_base_1.EventHandler.add(this.dlg.querySelector('.e-searchinput'), 'keyup', this.searchHandler, this);
        };
        CheckBoxFilter.prototype.unWireEvents = function () {
            ej2_base_1.EventHandler.remove(this.dlg, 'click', this.clickHandler);
            var elem = this.dlg.querySelector('.e-searchinput');
            if (elem) {
                ej2_base_1.EventHandler.remove(elem, 'keyup', this.searchHandler);
            }
        };
        CheckBoxFilter.prototype.searchBoxClick = function (e) {
            var target = e.target;
            if (target.classList.contains('e-searchclear')) {
                this.sInput.value = '';
                this.refreshCheckboxes();
                this.updateSearchIcon();
                this.sInput.focus();
            }
        };
        CheckBoxFilter.prototype.searchBoxKeyUp = function (e) {
            this.refreshCheckboxes();
            this.updateSearchIcon();
        };
        CheckBoxFilter.prototype.updateSearchIcon = function () {
            if (this.sInput.value.length) {
                ej2_base_1.classList(this.sIcon, ['e-chkcancel-icon'], ['e-search-icon']);
            }
            else {
                ej2_base_1.classList(this.sIcon, ['e-search-icon'], ['e-chkcancel-icon']);
            }
        };
        CheckBoxFilter.prototype.getLocalizedLabel = function (key) {
            return this.localeObj.getConstant(key);
        };
        CheckBoxFilter.prototype.updateDataSource = function () {
            var dataSource = this.options.dataSource;
            if (!(dataSource instanceof ej2_data_1.DataManager)) {
                for (var i = 0; i < dataSource.length; i++) {
                    if (typeof dataSource !== 'object') {
                        var obj = {};
                        obj[this.options.field] = dataSource[i];
                        dataSource[i] = obj;
                    }
                }
            }
        };
        CheckBoxFilter.prototype.updateModel = function (options) {
            this.options = options;
            this.existingPredicate = options.actualPredicate || {};
            this.options.dataSource = options.dataSource;
            this.updateDataSource();
            this.options.type = options.type || 'string';
            this.options.format = options.format || '';
            this.options.filteredColumns = options.filteredColumns || this.parent.filterSettings.columns;
            this.options.sortedColumns = options.sortedColumns || this.parent.sortSettings.columns;
            this.options.query = options.query || new ej2_data_1.Query();
            this.options.allowCaseSensitive = options.allowCaseSensitive || false;
            this.values = {};
            this.localeObj = options.localeObj;
            this.isFiltered = options.filteredColumns.length;
        };
        CheckBoxFilter.prototype.getAndSetChkElem = function (options) {
            this.dlg = ej2_base_2.createElement('div', {
                id: this.id + this.options.type + '_excelDlg',
                className: 'e-checkboxfilter e-filter-popup'
            });
            this.sBox = ej2_base_2.createElement('div', { className: 'e-searchcontainer' });
            if (!options.hideSearchbox) {
                this.sInput = ej2_base_2.createElement('input', {
                    id: this.id + '_SearchBox',
                    className: 'e-searchinput'
                });
                this.sIcon = ej2_base_2.createElement('span', {
                    className: 'e-searchclear e-search-icon e-icons e-input-group-icon', attrs: {
                        type: 'text', title: this.getLocalizedLabel('Search')
                    }
                });
                this.searchBox = ej2_base_2.createElement('span', { className: 'e-searchbox e-fields' });
                this.searchBox.appendChild(this.sInput);
                this.sBox.appendChild(this.searchBox);
                ej2_inputs_1.Input.createInput({
                    element: this.sInput, floatLabelType: 'Never', properties: {
                        placeholder: this.getLocalizedLabel('Search')
                    }
                });
                this.searchBox.querySelector('.e-input-group').appendChild(this.sIcon);
            }
            this.spinner = ej2_base_2.createElement('div', { className: 'e-spinner' });
            this.cBox = ej2_base_2.createElement('div', {
                id: this.id + this.options.type + '_CheckBoxList',
                className: 'e-checkboxlist e-fields'
            });
            this.spinner.appendChild(this.cBox);
            this.sBox.appendChild(this.spinner);
            return this.sBox;
        };
        CheckBoxFilter.prototype.showDialog = function (options) {
            var args = {
                requestType: events.filterBeforeOpen, filterModel: this,
                columnName: this.options.field, columnType: this.options.type, cancel: false
            };
            this.parent.trigger(events.actionBegin, args);
            if (args.cancel) {
                return;
            }
            this.dialogObj = new ej2_popups_1.Dialog({
                visible: false, content: this.sBox,
                close: this.closeDialog.bind(this),
                width: (!ej2_base_1.isNullOrUndefined(util_1.parentsUntil(options.target, 'e-bigger')))
                    || this.parent.element.classList.contains('e-device') ? 260 : 255,
                target: this.parent.element, animationSettings: { effect: 'None' },
                buttons: [{
                        click: this.btnClick.bind(this),
                        buttonModel: { content: this.getLocalizedLabel(this.isExcel ? 'OKButton' : 'FilterButton'),
                            cssClass: 'e-primary', isPrimary: true }
                    },
                    {
                        click: this.btnClick.bind(this),
                        buttonModel: { cssClass: 'e-flat', content: this.getLocalizedLabel(this.isExcel ? 'CancelButton' : 'ClearButton') }
                    }],
                created: this.dialogCreated.bind(this),
                open: this.dialogOpen.bind(this)
            });
            this.dialogObj.appendTo(this.dlg);
            this.dialogObj.element.style.maxHeight = '800px';
            this.dialogObj.show();
            this.wireEvents();
            ej2_popups_2.createSpinner({ target: this.spinner });
            ej2_popups_2.showSpinner(this.spinner);
            this.getAllData();
        };
        CheckBoxFilter.prototype.dialogCreated = function (e) {
            if (!ej2_base_1.Browser.isDevice) {
                util_3.getFilterMenuPostion(this.options.target, this.dialogObj, this.parent);
            }
            else {
                this.dialogObj.position = { X: 'center', Y: 'center' };
            }
            this.parent.notify(events.filterDialogCreated, e);
        };
        CheckBoxFilter.prototype.openDialog = function (options) {
            this.updateModel(options);
            this.getAndSetChkElem(options);
            this.showDialog(options);
        };
        CheckBoxFilter.prototype.closeDialog = function () {
            if (this.dialogObj && !this.dialogObj.isDestroyed) {
                this.parent.notify(events.filterMenuClose, { field: this.options.field });
                this.dialogObj.destroy();
                this.unWireEvents();
                ej2_base_2.remove(this.dlg);
                this.dlg = null;
            }
        };
        CheckBoxFilter.prototype.clearFilter = function () {
            this.options.handler({ action: 'clear-filter', field: this.options.field });
        };
        CheckBoxFilter.prototype.btnClick = function (e) {
            if (this.filterState) {
                if (e.target.tagName.toLowerCase() === 'input') {
                    var args = {
                        action: 'filtering', filterCollection: {
                            field: this.options.field,
                            operator: this.options.column.type === 'date' || this.options.column.type === 'datetime' ? 'equal' : 'contains',
                            value: e.target.value, matchCase: false, type: this.options.column.type
                        },
                        field: this.options.field
                    };
                    e.target.value ? this.options.handler(args) : this.closeDialog();
                }
                else {
                    var text = e.target.firstChild.textContent.toLowerCase();
                    if (this.getLocalizedLabel(this.isExcel ? 'OKButton' : 'FilterButton').toLowerCase() === text) {
                        this.fltrBtnHandler();
                    }
                    else if (this.getLocalizedLabel('ClearButton').toLowerCase() === text) {
                        this.clearFilter();
                    }
                }
                this.closeDialog();
            }
            else if (!(e.target.tagName.toLowerCase() === 'input')) {
                this.clearFilter();
                this.closeDialog();
            }
        };
        CheckBoxFilter.prototype.fltrBtnHandler = function () {
            var checked = [].slice.call(this.cBox.querySelectorAll('.e-check:not(.e-selectall)'));
            var optr = 'equal';
            var caseSen = this.options.type === 'string' ?
                this.options.allowCaseSensitive : true;
            var defaults = {
                field: this.options.field, predicate: 'or',
                operator: optr, matchCase: caseSen, ignoreAccent: this.parent.filterSettings.ignoreAccent
            };
            var isNotEqual = this.itemsCnt !== checked.length && this.itemsCnt - checked.length < checked.length;
            if (isNotEqual) {
                optr = 'notequal';
                checked = [].slice.call(this.cBox.querySelectorAll('.e-uncheck:not(.e-selectall)'));
                defaults.predicate = 'and';
                defaults.operator = 'notequal';
            }
            var value;
            var fObj;
            var coll = [];
            var searchInput = this.searchBox.querySelector('.e-searchinput');
            if (checked.length !== this.itemsCnt || (searchInput.value && searchInput.value !== '')) {
                for (var i = 0; i < checked.length; i++) {
                    value = this.values[util_1.parentsUntil(checked[i], 'e-ftrchk').getAttribute('uid')];
                    fObj = ej2_base_1.extend({}, { value: value }, defaults);
                    if (value && !value.toString().length) {
                        fObj.operator = isNotEqual ? 'notequal' : 'equal';
                    }
                    coll.push(fObj);
                }
                this.initiateFilter(coll);
            }
            else {
                this.clearFilter();
            }
        };
        CheckBoxFilter.prototype.initiateFilter = function (fColl) {
            var firstVal = fColl[0];
            var predicate;
            if (!ej2_base_1.isNullOrUndefined(firstVal)) {
                predicate = firstVal.ejpredicate ? firstVal.ejpredicate :
                    new ej2_data_1.Predicate(firstVal.field, firstVal.operator, firstVal.value, !firstVal.matchCase, firstVal.ignoreAccent);
                for (var j = 1; j < fColl.length; j++) {
                    predicate = fColl[j].ejpredicate !== undefined ?
                        predicate[fColl[j].predicate](fColl[j].ejpredicate) :
                        predicate[fColl[j].predicate](fColl[j].field, fColl[j].operator, fColl[j].value, !fColl[j].matchCase, fColl[j].ignoreAccent);
                }
                var args = {
                    action: 'filtering', filterCollection: fColl, field: this.options.field,
                    ejpredicate: ej2_data_1.Predicate.or(predicate)
                };
                this.options.handler(args);
            }
        };
        CheckBoxFilter.prototype.refreshCheckboxes = function () {
            var val = this.sInput.value;
            var query = this.options.query.clone();
            var parsed = (this.options.type !== 'string' && parseFloat(val)) ? parseFloat(val) : val;
            var operator = this.options.type ? 'startswith' : 'contains';
            var matchCase = true;
            var ignoreAccent = this.parent.filterSettings.ignoreAccent;
            parsed = (parsed === '' || parsed === undefined) ? undefined : parsed;
            var predicte;
            if (this.options.type === 'boolean') {
                if (parsed !== undefined &&
                    this.getLocalizedLabel('FilterTrue').toLowerCase().indexOf(parsed.toLowerCase()) !== -1) {
                    parsed = 'true';
                }
                else if (parsed !== undefined &&
                    this.getLocalizedLabel('FilterFalse').toLowerCase().indexOf(parsed.toLowerCase()) !== -1) {
                    parsed = 'false';
                }
            }
            var args = {
                requestType: events.filterSearchBegin,
                filterModel: this, columnName: this.options.field, column: this.options.column,
                operator: operator, matchCase: matchCase, ignoreAccent: ignoreAccent, filterChoiceCount: null,
                query: query
            };
            this.parent.trigger(events.actionBegin, args);
            predicte = new ej2_data_1.Predicate(this.options.field, args.operator, parsed, args.matchCase, args.ignoreAccent);
            if (this.options.type === 'date' || this.options.type === 'datetime') {
                parsed = this.valueFormatter.fromView(val, this.options.parserFn, this.options.type);
                operator = 'equal';
                if (ej2_base_1.isNullOrUndefined(parsed) && val.length) {
                    return;
                }
                predicte = util_1.getDatePredicate({
                    field: this.options.field, operator: operator, value: parsed, matchCase: matchCase,
                    ignoreAccent: ignoreAccent
                });
            }
            if (val.length) {
                query.where(predicte);
            }
            args.filterChoiceCount = !ej2_base_1.isNullOrUndefined(args.filterChoiceCount) ? args.filterChoiceCount : 1000;
            query.take(args.filterChoiceCount);
            this.processSearch(query);
        };
        CheckBoxFilter.prototype.getPredicateFromCols = function (columns) {
            var predicate;
            var predicates = CheckBoxFilter.getPredicate(columns);
            var predicateList = [];
            var fPredicate = {};
            var foreignColumn = this.parent.getForeignKeyColumns();
            for (var _i = 0, _a = Object.keys(predicates); _i < _a.length; _i++) {
                var prop = _a[_i];
                var col = util_3.getColumnByForeignKeyValue(prop, foreignColumn);
                if (col) {
                    this.parent.notify(events.generateQuery, { predicate: fPredicate, column: col });
                    if (fPredicate.predicate.predicates.length) {
                        predicateList.push(ej2_data_1.Predicate.or(fPredicate.predicate.predicates));
                    }
                }
                else {
                    predicateList.push(predicates[prop]);
                }
            }
            return predicateList.length && ej2_data_1.Predicate.and(predicateList);
        };
        CheckBoxFilter.prototype.getAllData = function () {
            var query = new ej2_data_1.Query();
            query = this.parent.query.clone();
            query.requiresCount();
            var args = {
                requestType: events.filterChoiceRequest, filterModel: this, query: query, filterChoiceCount: null
            };
            this.parent.trigger(events.actionBegin, args);
            args.filterChoiceCount = !ej2_base_1.isNullOrUndefined(args.filterChoiceCount) ? args.filterChoiceCount : 1000;
            query.take(args.filterChoiceCount);
            this.processDataOperation(query);
        };
        CheckBoxFilter.prototype.processDataOperation = function (query) {
            var _this = this;
            this.options.dataSource = this.options.dataSource instanceof ej2_data_1.DataManager ?
                this.options.dataSource : new ej2_data_1.DataManager(this.options.dataSource);
            var allPromise = [];
            var runArray = [];
            if (this.options.column.isForeignColumn()) {
                allPromise.push(this.options.column.dataSource.executeQuery(new ej2_data_1.Query()));
                runArray.push(function (data) { return _this.foreignKeyData = data; });
            }
            allPromise.push(this.options.dataSource.executeQuery(query));
            runArray.push(this.dataSuccess.bind(this));
            var i = 0;
            Promise.all(allPromise).then(function (e) {
                e.forEach(function (data) {
                    runArray[i++](data.result);
                });
            });
        };
        CheckBoxFilter.prototype.dataSuccess = function (e) {
            this.fullData = e;
            var query = new ej2_data_1.Query();
            if ((this.options.filteredColumns.length)) {
                var cols = [];
                for (var i = 0; i < this.options.filteredColumns.length; i++) {
                    if (!(this.options.filteredColumns[i].field === this.options.field ||
                        this.options.filteredColumns[i].field === this.options.foreignKeyValue)) {
                        cols.push(this.options.filteredColumns[i]);
                    }
                }
                var predicate = this.getPredicateFromCols(cols);
                if (predicate) {
                    query.where(predicate);
                }
            }
            var result = new ej2_data_1.DataManager(this.fullData).executeLocal(query);
            var col = this.options.column;
            var res = CheckBoxFilter.getDistinct(result, this.options.field, col, this.foreignKeyData);
            this.filteredData = res.records || [];
            this.processDataSource(null, true, this.filteredData);
            this.dialogObj.element.querySelector('.e-searchinput').focus();
            var args = {
                requestType: events.filterAfterOpen,
                filterModel: this, columnName: this.options.field, columnType: this.options.type
            };
            this.parent.trigger(events.actionComplete, args);
        };
        CheckBoxFilter.prototype.processDataSource = function (query, isInitial, dataSource) {
            ej2_popups_2.showSpinner(this.spinner);
            this.updateResult();
            this.createFilterItems(dataSource, isInitial);
        };
        CheckBoxFilter.prototype.processSearch = function (query) {
            this.processDataOperation(query);
        };
        CheckBoxFilter.prototype.updateResult = function () {
            this.result = {};
            var predicate = this.getPredicateFromCols(this.options.filteredColumns);
            var query = new ej2_data_1.Query();
            if (predicate) {
                query.where(predicate);
            }
            var result = new ej2_data_1.DataManager(this.fullData).executeLocal(query);
            for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
                var res = result_1[_i];
                this.result[ej2_base_1.getValue(this.options.field, res)] = true;
            }
        };
        CheckBoxFilter.prototype.clickHandler = function (e) {
            var target = e.target;
            var elem = util_1.parentsUntil(target, 'e-checkbox-wrapper');
            if (util_1.parentsUntil(target, 'e-searchbox')) {
                this.searchBoxClick(e);
            }
            if (elem) {
                var selectAll = elem.querySelector('.e-selectall');
                if (selectAll) {
                    this.updateAllCBoxes(!selectAll.classList.contains('e-check'));
                }
                else {
                    util_3.toogleCheckbox(elem.parentElement);
                }
                this.updateIndeterminatenBtn();
                elem.querySelector('.e-chk-hidden').focus();
            }
        };
        CheckBoxFilter.prototype.updateAllCBoxes = function (checked) {
            var cBoxes = [].slice.call(this.cBox.querySelectorAll('.e-frame'));
            for (var _i = 0, cBoxes_1 = cBoxes; _i < cBoxes_1.length; _i++) {
                var cBox = cBoxes_1[_i];
                util_3.removeAddCboxClasses(cBox, checked);
            }
        };
        CheckBoxFilter.prototype.dialogOpen = function () {
            if (this.parent.element.classList.contains('e-device')) {
                this.dialogObj.element.querySelector('.e-input-group').classList.remove('e-input-focus');
                this.dialogObj.element.querySelector('.e-btn').focus();
            }
        };
        CheckBoxFilter.prototype.createCheckbox = function (value, checked) {
            var elem = checked ? this.cBoxTrue.cloneNode(true) :
                this.cBoxFalse.cloneNode(true);
            var label = elem.querySelector('.e-label');
            label.innerHTML = !ej2_base_1.isNullOrUndefined(value) && value.toString().length ? value :
                this.getLocalizedLabel('Blanks');
            if (this.options.template) {
                label.innerHTML = '';
                var args = {};
                args[this.options.field] = value;
                util_1.appendChildren(label, this.options.template(args));
            }
            return elem;
        };
        CheckBoxFilter.prototype.updateIndeterminatenBtn = function () {
            var cnt = this.cBox.children.length - 1;
            var className = [];
            var elem = this.cBox.querySelector('.e-selectall');
            var selected = this.cBox.querySelectorAll('.e-check:not(.e-selectall)').length;
            var btn = this.dlg.querySelector('.e-footer-content').querySelector('.e-btn').ej2_instances[0];
            btn.disabled = false;
            if (cnt === selected) {
                className = ['e-check'];
            }
            else if (selected) {
                className = ['e-stop'];
            }
            else {
                className = ['e-uncheck'];
                btn.disabled = true;
            }
            this.filterState = !btn.disabled;
            btn.dataBind();
            ej2_base_1.removeClass([elem], ['e-check', 'e-stop', 'e-uncheck']);
            ej2_base_1.addClass([elem], className);
        };
        CheckBoxFilter.prototype.createFilterItems = function (data, isInitial) {
            var cBoxes = ej2_base_2.createElement('div');
            var btn = this.dlg.querySelector('.e-footer-content').querySelector('.e-btn').ej2_instances[0];
            this.itemsCnt = data.length;
            if (data.length) {
                var selectAll = util_3.createCboxWithWrap(util_1.getUid('cbox'), this.createCheckbox(this.getLocalizedLabel('SelectAll'), false), 'e-ftrchk');
                selectAll.querySelector('.e-frame').classList.add('e-selectall');
                cBoxes.appendChild(selectAll);
                var predicate = new ej2_data_1.Predicate('field', 'equal', this.options.field);
                if (this.options.foreignKeyValue) {
                    predicate = predicate.or('field', 'equal', this.options.foreignKeyValue);
                }
                var isColFiltered = new ej2_data_1.DataManager(this.options.filteredColumns).executeLocal(new ej2_data_1.Query().where(predicate)).length;
                for (var i = 0; i < data.length; i++) {
                    var uid = util_1.getUid('cbox');
                    this.values[uid] = ej2_base_1.getValue('ejValue', data[i]);
                    var value = this.valueFormatter.toView(ej2_base_1.getValue(this.options.field, data[i]), this.options.formatFn);
                    cBoxes.appendChild(util_3.createCboxWithWrap(uid, this.createCheckbox(value, this.getCheckedState(isColFiltered, this.values[uid])), 'e-ftrchk'));
                }
                this.cBox.innerHTML = cBoxes.innerHTML;
                this.updateIndeterminatenBtn();
                btn.disabled = false;
            }
            else {
                cBoxes.appendChild(ej2_base_2.createElement('span', { innerHTML: this.getLocalizedLabel('NoResult') }));
                this.cBox.innerHTML = cBoxes.innerHTML;
                btn.disabled = true;
            }
            this.filterState = !btn.disabled;
            btn.dataBind();
            var args = { requestType: events.filterChoiceRequest, filterModel: this, dataSource: data };
            this.parent.trigger(events.actionComplete, args);
            ej2_popups_2.hideSpinner(this.spinner);
        };
        CheckBoxFilter.prototype.getCheckedState = function (isColFiltered, value) {
            if (!this.isFiltered || !isColFiltered) {
                return true;
            }
            else {
                return this.result[value];
            }
        };
        CheckBoxFilter.getDistinct = function (json, field, column, foreignKeyData) {
            var len = json.length;
            var result = [];
            var value;
            var ejValue = 'ejValue';
            var lookup = {};
            var isForeignKey = column && column.isForeignColumn();
            while (len--) {
                value = json[len];
                value = ej2_base_1.getValue(field, value);
                if (!ej2_base_1.isNullOrUndefined(value)) {
                    if (!(value in lookup)) {
                        var obj = {};
                        obj[ejValue] = value;
                        lookup[value] = true;
                        value = isForeignKey ? ej2_base_1.getValue(column.foreignKeyValue, util_2.getForeignData(column, {}, value, foreignKeyData)[0]) : value;
                        ej2_base_1.setValue(field, ej2_base_1.isNullOrUndefined(value) ? null : value, obj);
                        result.push(obj);
                    }
                }
            }
            return ej2_data_1.DataUtil.group(ej2_data_1.DataUtil.sort(result, field, ej2_data_1.DataUtil.fnAscending), 'ejValue');
        };
        CheckBoxFilter.getPredicate = function (columns) {
            var cols = CheckBoxFilter.getDistinct(columns, 'field').records || [];
            var collection = [];
            var pred = {};
            for (var i = 0; i < cols.length; i++) {
                collection = new ej2_data_1.DataManager(columns).executeLocal(new ej2_data_1.Query().where('field', 'equal', cols[i].field));
                if (collection.length !== 0) {
                    pred[cols[i].field] = CheckBoxFilter.generatePredicate(collection);
                }
            }
            return pred;
        };
        CheckBoxFilter.generatePredicate = function (cols) {
            var len = cols ? cols.length : 0;
            var predicate;
            var first;
            first = CheckBoxFilter.updateDateFilter(cols[0]);
            first.ignoreAccent = !ej2_base_1.isNullOrUndefined(first.ignoreAccent) ? first.ignoreAccent : false;
            if (first.type === 'date' || first.type === 'datetime') {
                predicate = util_1.getDatePredicate(first);
            }
            else {
                predicate = first.ejpredicate ? first.ejpredicate :
                    new ej2_data_1.Predicate(first.field, first.operator, first.value, !CheckBoxFilter.getCaseValue(first), first.ignoreAccent);
            }
            for (var p = 1; p < len; p++) {
                cols[p] = CheckBoxFilter.updateDateFilter(cols[p]);
                if (len > 2 && p > 1 && cols[p].predicate === 'or') {
                    if (cols[p].type === 'date' || cols[p].type === 'datetime') {
                        predicate.predicates.push(util_1.getDatePredicate(cols[p]));
                    }
                    else {
                        predicate.predicates.push(new ej2_data_1.Predicate(cols[p].field, cols[p].operator, cols[p].value, !CheckBoxFilter.getCaseValue(cols[p]), cols[p].ignoreAccent));
                    }
                }
                else {
                    if (cols[p].type === 'date' || cols[p].type === 'datetime') {
                        predicate = predicate[(cols[p].predicate)](util_1.getDatePredicate(cols[p]), cols[p].ignoreAccent);
                    }
                    else {
                        predicate = cols[p].ejpredicate ?
                            predicate[cols[p].predicate](cols[p].ejpredicate) :
                            predicate[(cols[p].predicate)](cols[p].field, cols[p].operator, cols[p].value, !CheckBoxFilter.getCaseValue(cols[p]), cols[p].ignoreAccent);
                    }
                }
            }
            return predicate || null;
        };
        CheckBoxFilter.getCaseValue = function (filter) {
            if (ej2_base_1.isNullOrUndefined(filter.matchCase)) {
                return true;
            }
            else {
                return filter.matchCase;
            }
        };
        CheckBoxFilter.updateDateFilter = function (filter) {
            if ((filter.type === 'date' || filter.type === 'datetime' || filter.value instanceof Date)) {
                filter.type = filter.type || 'date';
            }
            return filter;
        };
        CheckBoxFilter.prototype.getModuleName = function () {
            return 'checkboxFilter';
        };
        return CheckBoxFilter;
    }());
    exports.CheckBoxFilter = CheckBoxFilter;
});
