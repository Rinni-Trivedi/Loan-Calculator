var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "../calendar/calendar", "@syncfusion/ej2-popups", "@syncfusion/ej2-buttons", "@syncfusion/ej2-inputs", "@syncfusion/ej2-lists"], function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, ej2_base_4, calendar_1, ej2_popups_1, ej2_buttons_1, ej2_inputs_1, ej2_lists_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DATERANGEWRAPPER = 'e-date-range-wrapper';
    var INPUTCONTAINER = 'e-input-group';
    var DATERANGEICON = 'e-input-group-icon e-range-icon e-icons';
    var POPUP = 'e-popup';
    var LEFTCALENDER = 'e-left-calendar';
    var RIGHTCALENDER = 'e-right-calendar';
    var LEFTCONTAINER = 'e-left-container';
    var RIGHTCONTAINER = 'e-right-container';
    var ROOT = 'e-daterangepicker';
    var ERROR = 'e-error';
    var ACTIVE = 'e-active';
    var STARTENDCONTAINER = 'e-start-end';
    var STARTDATE = 'e-start-date';
    var ENDDATE = 'e-end-date';
    var STARTBUTTON = 'e-start-btn';
    var INPUTFOCUS = 'e-input-focus';
    var ENDBUTTON = 'e-end-btn';
    var RANGEHOVER = 'e-range-hover';
    var OTHERMONTH = 'e-other-month';
    var STARTLABEL = 'e-start-label';
    var ENDLABEL = 'e-end-label';
    var DISABLED = 'e-disabled';
    var SELECTED = 'e-selected';
    var CALENDAR = 'e-calendar';
    var NEXTICON = 'e-next';
    var PREVICON = 'e-prev';
    var HEADER = 'e-header';
    var TITLE = 'e-title';
    var ICONCONTAINER = 'e-icon-container';
    var RANGECONTAINER = 'e-date-range-container';
    var RANGEHEADER = 'e-range-header';
    var PRESETS = 'e-presets';
    var FOOTER = 'e-footer';
    var RANGEBORDER = 'e-range-border';
    var TODAY = 'e-today';
    var FOCUSDATE = 'e-focused-date';
    var CONTENT = 'e-content';
    var DAYSPAN = 'e-day-span';
    var WEEKNUMBER = 'e-week-number';
    var DATEDISABLED = 'e-date-disabled';
    var ICONDISABLED = 'e-icon-disabled';
    var CALENDARCONTAINER = 'e-calendar-container';
    var SEPARATOR = 'e-separator';
    var APPLY = 'e-apply';
    var CANCEL = 'e-cancel';
    var DEVICE = 'e-device';
    var OVERLAY = 'e-overlay';
    var CHANGEICON = 'e-change-icon e-icons';
    var LISTCLASS = ej2_lists_1.cssClass.li;
    var RTL = 'e-rtl';
    var HOVER = 'e-hover';
    var OVERFLOW = 'e-range-overflow';
    var OFFSETVALUE = 4;
    var PRIMARY = 'e-primary';
    var FLAT = 'e-flat';
    var Presets = (function (_super) {
        __extends(Presets, _super);
        function Presets() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_1.Property()
        ], Presets.prototype, "label", void 0);
        __decorate([
            ej2_base_1.Property()
        ], Presets.prototype, "start", void 0);
        __decorate([
            ej2_base_1.Property()
        ], Presets.prototype, "end", void 0);
        return Presets;
    }(ej2_base_2.ChildProperty));
    exports.Presets = Presets;
    var DateRangePicker = (function (_super) {
        __extends(DateRangePicker, _super);
        function DateRangePicker(options, element) {
            var _this = _super.call(this, options, element) || this;
            _this.isCustomRange = false;
            _this.isCustomWindow = false;
            _this.presetsItem = [];
            _this.liCollections = [];
            _this.previousEleValue = '';
            _this.isKeyPopup = false;
            _this.dateDisabled = false;
            _this.isRangeIconClicked = false;
            _this.isMaxDaysClicked = false;
            _this.disabledDays = [];
            _this.preventBlur = false;
            _this.preventFocus = false;
            return _this;
        }
        DateRangePicker.prototype.render = function () {
            this.initialize();
        };
        DateRangePicker.prototype.preRender = function () {
            this.presetKeyConfig = {
                moveUp: 'uparrow',
                moveDown: 'downarrow',
                enter: 'enter',
                tab: 'tab',
                spaceBar: 'space'
            };
            this.keyInputConfigs = {
                altDownArrow: 'alt+downarrow',
                escape: 'escape',
                enter: 'enter',
                tab: 'tab',
            };
            this.defaultConstant = {
                placeholder: '',
                startLabel: 'Start Date',
                endLabel: 'End Date',
                customRange: 'Custom Range',
                applyText: 'Apply',
                cancelText: 'Cancel',
                selectedDays: 'Selected Days',
                days: 'days'
            };
            this.isMobile = window.matchMedia('(max-width:550px)').matches;
            this.inputElement = this.element;
            this.angularTag = null;
            if (this.element.tagName === 'EJS-DATERANGEPICKER') {
                this.angularTag = this.element.tagName;
                this.inputElement = ej2_base_3.createElement('input');
                this.element.appendChild(this.inputElement);
            }
            this.cloneElement = this.element.cloneNode(true);
            if (this.element.getAttribute('id')) {
                if (this.angularTag !== null) {
                    this.inputElement.id = this.element.getAttribute('id') + '_input';
                }
            }
            else {
                this.element.id = ej2_base_1.getUniqueID('ej2-datetimepicker');
                if (this.angularTag !== null) {
                    ej2_base_3.attributes(this.inputElement, { 'id': this.element.id + '_input' });
                }
            }
            this.initProperty();
            _super.prototype.preRender.call(this);
            this.navNextFunction = this.navNextMonth.bind(this);
            this.navPrevFunction = this.navPrevMonth.bind(this);
            this.deviceNavNextFunction = this.deviceNavNext.bind(this);
            this.deviceNavPrevFunction = this.deviceNavPrevious.bind(this);
            this.initStartDate = this.checkDateValue(this.startDate);
            this.initEndDate = this.checkDateValue(this.endDate);
        };
        ;
        DateRangePicker.prototype.updateValue = function () {
            var dateOptions = { format: this.format, type: 'date', skeleton: 'yMd' };
            if (this.value && this.value.length > 0) {
                if (this.value[0] instanceof Date && !isNaN(+this.value[0])) {
                    this.setProperties({ startDate: this.value[0] }, true);
                }
                else if (typeof this.value[0] === 'string') {
                    this.setProperties({ startDate: this.globalize.parseDate('' + this.value[0], dateOptions) }, true);
                }
                else {
                    this.setProperties({ startDate: null }, true);
                    this.setValue();
                }
                if (this.value[1] instanceof Date && !isNaN(+this.value[1])) {
                    this.setProperties({ endDate: this.value[1] }, true);
                }
                else if (typeof this.value[1] === 'string') {
                    this.setProperties({ endDate: this.globalize.parseDate('' + this.value[1], dateOptions) }, true);
                    this.setValue();
                }
                else {
                    this.setProperties({ endDate: null }, true);
                    this.setValue();
                }
            }
            else if (ej2_base_4.isNullOrUndefined(this.value)
                && ej2_base_4.isNullOrUndefined(this.startDate) && ej2_base_4.isNullOrUndefined(this.endDate)) {
                this.setProperties({ endDate: null }, true);
                this.setProperties({ startDate: null }, true);
                this.setValue();
            }
        };
        DateRangePicker.prototype.initProperty = function () {
            this.globalize = new ej2_base_1.Internationalization(this.locale);
            this.updateValue();
            this.setProperties({ value: null }, true);
        };
        DateRangePicker.prototype.initialize = function () {
            ej2_base_4.merge(this.keyConfigs, { shiftTab: 'shift+tab' });
            this.setProperties({ startDate: this.checkDateValue(new Date('' + this.startDate)) }, true);
            this.setProperties({ endDate: this.checkDateValue(new Date('' + this.endDate)) }, true);
            this.setValue();
            this.setProperties({ min: this.checkDateValue(new Date('' + this.min)) }, true);
            this.setProperties({ max: this.checkDateValue(new Date('' + this.max)) }, true);
            this.checkHtmlAttributes();
            this.l10n = new ej2_base_2.L10n('daterangepicker', this.defaultConstant, this.locale);
            this.l10n.setLocale(this.locale);
            this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant('placeholder') }, true);
            this.processPresets();
            this.createInput();
            this.bindEvents();
        };
        DateRangePicker.prototype.processPresets = function () {
            var i = 0;
            if (!ej2_base_4.isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
                for (var _i = 0, _a = this.presets; _i < _a.length; _i++) {
                    var range = _a[_i];
                    var id = range.label.replace(/\s+/g, '') + '_' + (++i);
                    if (typeof range.end === 'string' && typeof range.end === 'string') {
                        this.presetsItem.push({
                            id: id, text: range.label, end: new Date('' + range.end), start: new Date('' + range.start)
                        });
                    }
                    else {
                        this.presetsItem.push({ id: id, text: range.label, start: range.start, end: range.end });
                    }
                }
                var startDate = ej2_base_4.isNullOrUndefined(this.startDate) ? null : new Date(+this.startDate);
                var endDate = ej2_base_4.isNullOrUndefined(this.endDate) ? null : new Date(+this.endDate);
                this.presetsItem.push({ id: 'custom_range', text: this.l10n.getConstant('customRange'), start: startDate, end: endDate });
                if (!ej2_base_4.isNullOrUndefined(this.startDate) && !ej2_base_4.isNullOrUndefined(this.endDate)) {
                    this.isCustomRange = true;
                    this.activeIndex = this.presetsItem.length - 1;
                }
            }
        };
        DateRangePicker.prototype.bindEvents = function () {
            if (this.enabled) {
                ej2_base_1.EventHandler.add(this.inputWrapper.buttons[0], 'mousedown', this.rangeIconHandler, this);
                ej2_base_1.EventHandler.add(this.inputElement, 'focus', this.inputFocusHandler, this);
                ej2_base_1.EventHandler.add(this.inputElement, 'blur', this.inputBlurHandler, this);
                ej2_base_1.EventHandler.add(this.inputElement, 'change', this.inputChangeHandler, this);
                if (this.showClearButton) {
                    ej2_base_1.EventHandler.add(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler, this);
                }
                if (!this.isMobile) {
                    this.inputKeyboardModule = new ej2_base_2.KeyboardEvents(this.inputElement, {
                        eventName: 'keydown', keyAction: this.inputHandler.bind(this), keyConfigs: this.keyInputConfigs
                    });
                }
            }
            else {
                ej2_base_1.EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown', this.rangeIconHandler);
                ej2_base_1.EventHandler.remove(this.inputElement, 'blur', this.inputBlurHandler);
                ej2_base_1.EventHandler.remove(this.inputElement, 'focus', this.inputFocusHandler);
                ej2_base_1.EventHandler.remove(this.inputElement, 'change', this.inputChangeHandler);
                if (this.showClearButton) {
                    ej2_base_1.EventHandler.remove(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler);
                }
                if (!this.isMobile) {
                    if (!ej2_base_4.isNullOrUndefined(this.inputKeyboardModule)) {
                        this.inputKeyboardModule.destroy();
                    }
                }
            }
        };
        DateRangePicker.prototype.inputChangeHandler = function (e) {
            e.stopPropagation();
        };
        DateRangePicker.prototype.bindClearEvent = function () {
            if (this.showClearButton && this.inputWrapper.clearButton) {
                ej2_base_1.EventHandler.add(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler, this);
            }
        };
        DateRangePicker.prototype.resetHandler = function (e) {
            e.preventDefault();
            this.clear();
            this.changeTrigger(e);
            this.clearRange();
            this.hide(e);
        };
        DateRangePicker.prototype.clear = function () {
            if (this.startDate !== null) {
                this.setProperties({ startDate: null }, true);
            }
            if (this.endDate !== null) {
                this.setProperties({ endDate: null }, true);
            }
            if (this.value !== null) {
                this.setProperties({ value: null }, true);
            }
            ej2_inputs_1.Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);
            if (!(ej2_base_4.isNullOrUndefined(this.applyButton))) {
                this.applyButton.disabled = this.applyButton.element.disabled = true;
            }
        };
        DateRangePicker.prototype.rangeIconHandler = function (e) {
            e.preventDefault();
            this.targetElement = null;
            this.effect = '';
            if (this.isPopupOpen()) {
                this.applyFunction(e);
            }
            else {
                this.isRangeIconClicked = true;
                if (!this.isMobile) {
                    this.inputWrapper.container.children[0].focus();
                }
                this.show(null, e);
                if (!this.isMobile) {
                    if (!ej2_base_4.isNullOrUndefined(this.leftCalendar)) {
                        this.isRangeIconClicked = false;
                        this.calendarFocus();
                        this.isRangeIconClicked = true;
                    }
                    ej2_base_3.addClass([this.inputWrapper.container], [INPUTFOCUS]);
                }
            }
        };
        DateRangePicker.prototype.checkHtmlAttributes = function () {
            this.globalize = new ej2_base_1.Internationalization(this.locale);
            var attributes;
            attributes = ['startDate', 'endDate', 'minDays', 'maxDays', 'min', 'max', 'disabled',
                'readonly', 'style', 'name', 'placeholder', 'type'];
            var format = { format: this.format, type: 'date', skeleton: 'yMd' };
            for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
                var prop = attributes_1[_i];
                if (!ej2_base_4.isNullOrUndefined(this.inputElement.getAttribute(prop))) {
                    switch (prop) {
                        case 'disabled':
                            var disabled = this.inputElement.getAttribute(prop) === 'disabled' ||
                                this.inputElement.getAttribute(prop) === '';
                            this.setProperties({ enabled: !disabled }, true);
                            break;
                        case 'readonly':
                            var readonly = this.inputElement.getAttribute(prop) === 'readonly' ||
                                this.inputElement.getAttribute(prop) === '';
                            this.setProperties({ readonly: readonly }, true);
                            break;
                        case 'placeholder':
                            if (ej2_base_4.isNullOrUndefined(this.placeholder) || this.placeholder.trim() === '') {
                                this.setProperties({ placeholder: this.inputElement.getAttribute(prop) }, true);
                            }
                            break;
                        case 'style':
                            this.inputElement.setAttribute('style', '' + this.inputElement.getAttribute(prop));
                            break;
                        case 'min':
                            if (ej2_base_4.isNullOrUndefined(this.min) || +this.min === +new Date(1900, 0, 1)) {
                                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                                this.setProperties(ej2_base_4.setValue(prop, dateValue, {}), true);
                            }
                            break;
                        case 'name':
                            this.inputElement.setAttribute('name', '' + this.inputElement.getAttribute(prop));
                            break;
                        case 'max':
                            if (ej2_base_4.isNullOrUndefined(this.max) || +this.max === +new Date(2099, 11, 31)) {
                                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                                this.setProperties(ej2_base_4.setValue(prop, dateValue, {}), true);
                            }
                            break;
                        case 'startDate':
                            if (ej2_base_4.isNullOrUndefined(this.startDate)) {
                                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                                this.setProperties(ej2_base_4.setValue(prop, dateValue, {}), true);
                                this.setValue();
                            }
                            break;
                        case 'endDate':
                            if (ej2_base_4.isNullOrUndefined(this.endDate)) {
                                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                                this.setProperties(ej2_base_4.setValue(prop, dateValue, {}), true);
                                this.setValue();
                            }
                            break;
                        case 'minDays':
                            if (ej2_base_4.isNullOrUndefined(this.minDays)) {
                                this.setProperties(ej2_base_4.setValue(prop, parseInt(this.inputElement.getAttribute(prop), 10), {}), true);
                            }
                            break;
                        case 'maxDays':
                            if (ej2_base_4.isNullOrUndefined(this.maxDays)) {
                                this.setProperties(ej2_base_4.setValue(prop, parseInt(this.inputElement.getAttribute(prop), 10), {}), true);
                            }
                            break;
                        case 'type':
                            if (this.inputElement.getAttribute(prop) !== 'text') {
                                this.inputElement.setAttribute('type', 'text');
                            }
                            break;
                    }
                }
            }
        };
        DateRangePicker.prototype.createPopup = function () {
            for (var i = 0; i < this.presetsItem.length; i++) {
                if ((i !== (this.presetsItem.length - 1)) && this.presetsItem[i].id === 'custom_range') {
                    this.presetsItem.splice(i, 1);
                }
            }
            this.activeIndex = this.presetsItem.length - 1;
            this.isCustomRange = true;
            for (var i = 0; i <= this.presetsItem.length - 2; i++) {
                var startDate = this.presetsItem[i].start;
                var endDate = this.presetsItem[i].end;
                if (this.startDate && this.endDate) {
                    if ((+startDate.setMilliseconds(0) === +this.startDate.setMilliseconds(0)) &&
                        (+endDate.setMilliseconds(0) === +this.endDate.setMilliseconds(0))) {
                        this.activeIndex = i;
                        this.isCustomRange = false;
                    }
                }
            }
            this.popupWrapper = ej2_base_3.createElement('div', { id: this.element.id + '_popup', className: ROOT + ' ' + POPUP });
            var isPreset = (!this.isCustomRange || this.isMobile);
            if (!ej2_base_4.isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && isPreset) {
                this.isCustomWindow = false;
                this.createPresets();
                document.body.appendChild(this.popupWrapper);
                this.listRippleEffect();
                this.renderPopup();
            }
            else {
                this.isCustomWindow = true;
                this.renderControl();
            }
        };
        DateRangePicker.prototype.renderControl = function () {
            this.createControl();
            this.bindCalendarEvents();
            this.updateRange((this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]));
            if (!ej2_base_4.isNullOrUndefined(this.endDate) && !ej2_base_4.isNullOrUndefined(this.startDate)) {
                this.disabledDateRender();
            }
            this.updateHeader();
        };
        DateRangePicker.prototype.clearCalendarEvents = function () {
            ej2_base_1.EventHandler.clearEvents(this.leftCalPrevIcon);
            ej2_base_1.EventHandler.clearEvents(this.leftCalNextIcon);
            ej2_base_1.EventHandler.clearEvents(this.rightCalPrevIcon);
            ej2_base_1.EventHandler.clearEvents(this.rightCalNextIcon);
        };
        DateRangePicker.prototype.updateNavIcons = function () {
            this.previousIcon = this.rightCalPrevIcon;
            this.nextIcon = this.leftCalNextIcon;
            this.nextIconHandler(this.compareMonths(new Date('' + this.leftCalCurrentDate), this.rightCalCurrentDate) < 1);
            this.previousIconHandler(this.compareMonths(new Date('' + this.leftCalCurrentDate), this.rightCalCurrentDate) < 1);
        };
        DateRangePicker.prototype.calendarIconEvent = function () {
            this.clearCalendarEvents();
            if (this.leftCalPrevIcon && !this.leftCalPrevIcon.classList.contains(DISABLED)) {
                ej2_base_1.EventHandler.add(this.leftCalPrevIcon, 'mousedown', this.navPrevFunction);
            }
            if (this.leftCalNextIcon && !this.leftCalNextIcon.classList.contains(DISABLED)) {
                ej2_base_1.EventHandler.add(this.leftCalNextIcon, 'mousedown', this.navNextFunction);
            }
            if (this.rightCalPrevIcon && !this.rightCalPrevIcon.classList.contains(DISABLED)) {
                ej2_base_1.EventHandler.add(this.rightCalPrevIcon, 'mousedown', this.navPrevFunction);
            }
            if (this.rightCalNextIcon && !this.rightCalNextIcon.classList.contains(DISABLED)) {
                ej2_base_1.EventHandler.add(this.rightCalNextIcon, 'mousedown', this.navNextFunction);
            }
        };
        DateRangePicker.prototype.bindCalendarEvents = function () {
            if (!this.isMobile) {
                this.updateNavIcons();
                this.calendarIconEvent();
                this.calendarIconRipple();
                this.headerTitleElement = this.popupObj.element.querySelector('.' + RIGHTCALENDER + ' .' + HEADER + ' .' + TITLE);
                this.headerTitleElement = this.popupObj.element.querySelector('.' + LEFTCALENDER + ' .' + HEADER + ' .' + TITLE);
                this.leftKeyboardModule = new ej2_base_2.KeyboardEvents(this.leftCalendar, {
                    eventName: 'keydown',
                    keyAction: this.keyInputHandler.bind(this),
                    keyConfigs: this.keyConfigs
                });
                this.rightKeyboardModule = new ej2_base_2.KeyboardEvents(this.rightCalendar, {
                    eventName: 'keydown',
                    keyAction: this.keyInputHandler.bind(this),
                    keyConfigs: this.keyConfigs
                });
            }
            else {
                this.deviceCalendarEvent();
                ej2_base_1.EventHandler.add(this.startButton.element, 'click', this.deviceHeaderClick, this);
                ej2_base_1.EventHandler.add(this.endButton.element, 'click', this.deviceHeaderClick, this);
            }
            this.bindCalendarCellEvents();
            this.removeFocusedDate();
        };
        DateRangePicker.prototype.calendarIconRipple = function () {
            ej2_base_4.rippleEffect(this.leftCalPrevIcon, { selector: '.e-prev', duration: 400, isCenterRipple: true });
            ej2_base_4.rippleEffect(this.leftCalNextIcon, { selector: '.e-next', duration: 400, isCenterRipple: true });
            ej2_base_4.rippleEffect(this.rightCalPrevIcon, { selector: '.e-prev', duration: 400, isCenterRipple: true });
            ej2_base_4.rippleEffect(this.rightCalNextIcon, { selector: '.e-next', duration: 400, isCenterRipple: true });
        };
        DateRangePicker.prototype.deviceCalendarEvent = function () {
            ej2_base_1.EventHandler.clearEvents(this.nextIcon);
            ej2_base_1.EventHandler.clearEvents(this.previousIcon);
            ej2_base_4.rippleEffect(this.nextIcon, { selector: '.e-prev', duration: 400, isCenterRipple: true });
            ej2_base_4.rippleEffect(this.previousIcon, { selector: '.e-next', duration: 400, isCenterRipple: true });
            if (this.nextIcon && !this.nextIcon.classList.contains(DISABLED)) {
                ej2_base_1.EventHandler.add(this.nextIcon, 'mousedown', this.deviceNavNextFunction);
            }
            if (this.previousIcon && !this.previousIcon.classList.contains(DISABLED)) {
                ej2_base_1.EventHandler.add(this.previousIcon, 'mousedown', this.deviceNavPrevFunction);
            }
        };
        DateRangePicker.prototype.deviceNavNext = function (e) {
            var calendar = ej2_base_3.closest(e.target, '.' + CALENDAR);
            this.updateDeviceCalendar(calendar);
            this.navigateNext(e);
            this.deviceNavigation();
        };
        DateRangePicker.prototype.deviceNavPrevious = function (e) {
            var calendar = ej2_base_3.closest(e.target, '.' + CALENDAR);
            this.updateDeviceCalendar(calendar);
            this.navigatePrevious(e);
            this.deviceNavigation();
        };
        DateRangePicker.prototype.updateDeviceCalendar = function (calendar) {
            if (calendar) {
                this.previousIcon = calendar.querySelector('.' + PREVICON);
                this.nextIcon = calendar.querySelector('.' + NEXTICON);
                this.calendarElement = calendar;
                this.deviceCalendar = calendar;
                this.contentElement = calendar.querySelector('.' + CONTENT);
                this.tableBodyElement = ej2_base_3.select('.' + CONTENT + ' tbody', calendar);
                this.table = calendar.querySelector('.' + CONTENT).getElementsByTagName('table')[0];
                this.headerTitleElement = calendar.querySelector('.' + HEADER + ' .' + TITLE);
                this.headerElement = calendar.querySelector('.' + HEADER);
            }
        };
        DateRangePicker.prototype.deviceHeaderClick = function (event) {
            var element = event.currentTarget;
            if (element.classList.contains(STARTBUTTON) && !ej2_base_4.isNullOrUndefined(this.startDate)) {
                this.endButton.element.classList.remove(ACTIVE);
                this.startButton.element.classList.add(ACTIVE);
                var calendar = this.popupObj.element.querySelector('.' + CALENDAR);
                this.updateDeviceCalendar(calendar);
                if (ej2_base_4.isNullOrUndefined(this.calendarElement.querySelector('.' + STARTDATE + ':not(.e-other-month)'))) {
                    this.currentDate = new Date(+this.startDate);
                    ej2_base_3.remove(this.tableBodyElement);
                    this.renderMonths();
                    this.deviceNavigation();
                }
                this.removeClassDisabled();
            }
            else if (!ej2_base_4.isNullOrUndefined(this.startDate) && !ej2_base_4.isNullOrUndefined(this.endDate)) {
                this.startButton.element.classList.remove(ACTIVE);
                this.endButton.element.classList.add(ACTIVE);
                var calendar = this.popupObj.element.querySelector('.' + CALENDAR);
                this.updateDeviceCalendar(calendar);
                if (ej2_base_4.isNullOrUndefined(this.calendarElement.querySelector('.' + ENDDATE + ':not(.e-other-month)'))) {
                    this.currentDate = new Date(+this.endDate);
                    ej2_base_3.remove(this.tableBodyElement);
                    this.renderMonths();
                    this.deviceNavigation();
                }
                this.updateMinMaxDays(this.popupObj.element.querySelector('.' + CALENDAR));
                this.selectableDates();
            }
        };
        DateRangePicker.prototype.inputFocusHandler = function () {
            this.preventBlur = false;
            var focusArguments = {
                model: this
            };
            if (!this.preventFocus) {
                this.trigger('focus', focusArguments);
            }
        };
        DateRangePicker.prototype.inputBlurHandler = function (e) {
            if (!this.preventBlur) {
                var value = this.inputElement.value;
                if (!ej2_base_4.isNullOrUndefined(this.presetsItem)) {
                    if (this.presetsItem.length > 0 && this.previousEleValue !== this.inputElement.value) {
                        this.activeIndex = this.presetsItem.length - 1;
                        this.isCustomRange = true;
                    }
                }
                if (!ej2_base_4.isNullOrUndefined(value) && value.trim() !== '') {
                    var range = value.split(' ' + this.separator + ' ');
                    if (range.length > 1) {
                        var dateOptions = { format: this.format, type: 'date', skeleton: 'yMd' };
                        var startDate = this.globalize.parseDate(range[0].trim(), dateOptions);
                        var endDate = this.globalize.parseDate(range[1].trim(), dateOptions);
                        if (!ej2_base_4.isNullOrUndefined(startDate) && !isNaN(+startDate) && !ej2_base_4.isNullOrUndefined(endDate) && !isNaN(+endDate)) {
                            this.setProperties({ startDate: startDate }, true);
                            this.setProperties({ endDate: endDate }, true);
                            this.setValue();
                            this.refreshControl();
                            this.changeTrigger(e);
                            if (!this.preventBlur && document.activeElement !== this.inputElement) {
                                this.preventFocus = false;
                                var blurArguments = {
                                    model: this
                                };
                                this.trigger('blur', blurArguments);
                            }
                            return;
                        }
                        else {
                            if (!this.strictMode) {
                                this.setProperties({ startDate: null }, true);
                                this.setProperties({ endDate: null }, true);
                                this.setValue();
                            }
                        }
                    }
                    else {
                        if (!this.strictMode) {
                            this.setProperties({ startDate: null }, true);
                            this.setProperties({ endDate: null }, true);
                            this.setValue();
                        }
                    }
                }
                if (!this.strictMode) {
                    this.clearRange();
                    this.setProperties({ startDate: null }, true);
                    this.setProperties({ endDate: null }, true);
                    this.setValue();
                }
                else {
                    ej2_inputs_1.Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);
                    this.updateInput();
                }
                this.errorClass();
                this.changeTrigger(e);
                if (!this.preventBlur && document.activeElement !== this.inputElement) {
                    this.preventFocus = false;
                    var blurArguments = {
                        model: this
                    };
                    this.trigger('blur', blurArguments);
                }
            }
        };
        DateRangePicker.prototype.clearRange = function () {
            this.previousStartValue = this.previousEndValue = null;
            this.currentDate = null;
        };
        DateRangePicker.prototype.errorClass = function () {
            var inputStr = this.inputElement.value.trim();
            if (inputStr !== '' && ((ej2_base_4.isNullOrUndefined(this.endDate) && ej2_base_4.isNullOrUndefined(this.startDate) && inputStr !== '') ||
                ((!ej2_base_4.isNullOrUndefined(this.startDate) && +this.startDate < +this.min)
                    || ((!ej2_base_4.isNullOrUndefined(this.startDate) && !ej2_base_4.isNullOrUndefined(this.endDate)) && +this.startDate > +this.endDate)
                    || (!ej2_base_4.isNullOrUndefined(this.endDate) && +this.endDate > +this.max))
                || ((this.startDate && this.isDateDisabled(this.startDate))
                    || (this.endDate && this.isDateDisabled(this.endDate))))) {
                ej2_base_3.addClass([this.inputWrapper.container], ERROR);
                ej2_base_3.attributes(this.inputElement, { 'aria-invalid': 'true' });
            }
            else {
                if (this.inputWrapper) {
                    ej2_base_3.removeClass([this.inputWrapper.container], ERROR);
                    ej2_base_3.attributes(this.inputElement, { 'aria-invalid': 'false' });
                }
            }
        };
        DateRangePicker.prototype.keyCalendarUpdate = function (isLeftCalendar, ele) {
            this.removeFocusedDate();
            if (isLeftCalendar) {
                this.leftCalCurrentDate = new Date(+this.currentDate);
                ele = this.leftCalendar;
            }
            else {
                this.rightCalCurrentDate = new Date(+this.currentDate);
                ele = this.rightCalendar;
            }
            this.updateCalendarElement(ele);
            this.table.focus();
            return ele;
        };
        DateRangePicker.prototype.navInCalendar = function (e, isLeftCalendar, leftLimit, rightLimit, ele) {
            var date;
            var min = this.min;
            var max;
            if (!ej2_base_4.isNullOrUndefined(this.maxDays) && this.isMaxDaysClicked && !ej2_base_4.isNullOrUndefined(this.startDate)) {
                max = new Date(new Date(+this.startDate).setDate(this.startDate.getDate() + (this.maxDays - 1)));
            }
            else {
                max = this.max;
            }
            switch (e.action) {
                case 'moveRight':
                    date = new Date(+this.currentDate);
                    this.addDay(date, 1, e, max, min);
                    if (isLeftCalendar && +date === +rightLimit) {
                        ele = this.keyCalendarUpdate(false, ele);
                    }
                    this.KeyboardNavigate(1, 0, e, max, min);
                    this.keyNavigation(ele, e);
                    break;
                case 'moveLeft':
                    date = new Date(+this.currentDate);
                    this.addDay(date, -1, e, max, min);
                    if (!isLeftCalendar && +date === +leftLimit) {
                        ele = this.keyCalendarUpdate(true, ele);
                    }
                    this.KeyboardNavigate(-1, 0, e, max, min);
                    this.keyNavigation(ele, e);
                    break;
                case 'moveUp':
                    date = new Date(+this.currentDate);
                    this.addDay(date, -7, e, max, min);
                    if (!isLeftCalendar && +date <= +leftLimit) {
                        ele = this.keyCalendarUpdate(true, ele);
                    }
                    this.KeyboardNavigate(-7, 0, e, max, min);
                    this.keyNavigation(ele, e);
                    break;
                case 'moveDown':
                    date = new Date(+this.currentDate);
                    this.addDay(date, 7, e, max, min);
                    if (isLeftCalendar && +date >= +rightLimit) {
                        ele = this.keyCalendarUpdate(false, ele);
                    }
                    this.KeyboardNavigate(7, 0, e, max, min);
                    this.keyNavigation(ele, e);
                    break;
                case 'home':
                    this.currentDate = this.firstDay(this.currentDate);
                    ej2_base_3.remove(this.tableBodyElement);
                    this.renderMonths();
                    this.keyNavigation(ele, e);
                    break;
                case 'end':
                    this.currentDate = this.lastDay(this.currentDate);
                    ej2_base_3.remove(this.tableBodyElement);
                    this.renderMonths();
                    this.keyNavigation(ele, e);
                    break;
            }
        };
        DateRangePicker.prototype.keyInputHandler = function (e) {
            var date;
            var rightDateLimit = new Date(this.rightCalCurrentDate.getFullYear(), this.rightCalCurrentDate.getMonth(), 1);
            var leftDateLimit = new Date(this.leftCalCurrentDate.getFullYear(), this.leftCalCurrentDate.getMonth() + 1, 0);
            var ele = ej2_base_3.closest(e.target, '.' + RIGHTCALENDER);
            ele = ej2_base_4.isNullOrUndefined(ele) ? this.leftCalendar : ele;
            var isLeftCalendar = ele.classList.contains(LEFTCALENDER);
            this.updateCalendarElement(ele);
            var focusedDate = ele.querySelector('tr td.' + FOCUSDATE);
            var startDate = ele.querySelector('tr td.' + STARTDATE);
            var endDate = ele.querySelector('tr td.' + ENDDATE);
            if (!ej2_base_4.isNullOrUndefined(focusedDate)) {
                this.currentDate = this.currentDate;
            }
            else if (!ej2_base_4.isNullOrUndefined(endDate) && !this.dateDisabled) {
                this.currentDate = new Date(+this.endDate);
            }
            else if (!ej2_base_4.isNullOrUndefined(startDate) && !this.dateDisabled) {
                this.currentDate = new Date(+this.startDate);
            }
            else if (!this.dateDisabled) {
                this.currentDate.setDate(1);
            }
            this.effect = '';
            switch (e.action) {
                case 'altUpArrow':
                    if (this.isPopupOpen()) {
                        this.hide(e);
                        this.preventFocus = true;
                        if (!this.isMobile) {
                            this.inputElement.focus();
                            ej2_base_3.addClass([this.inputWrapper.container], [INPUTFOCUS]);
                        }
                    }
                    break;
                case 'select':
                    var element = !ej2_base_4.isNullOrUndefined(focusedDate) ? focusedDate : startDate;
                    if (!ej2_base_4.isNullOrUndefined(element) && !element.classList.contains(DISABLED)) {
                        this.selectRange(e, (element));
                    }
                    e.preventDefault();
                    break;
                case 'controlHome':
                    var yearDate = new Date(this.currentDate.getFullYear(), 0, 1);
                    if (!isLeftCalendar && +yearDate < +leftDateLimit) {
                        ele = this.keyCalendarUpdate(true, ele);
                    }
                    this.navigateTo('Month', new Date(this.currentDate.getFullYear(), 0, 1));
                    this.keyNavigation(ele, e);
                    break;
                case 'controlEnd':
                    yearDate = new Date(this.currentDate.getFullYear(), 11, 31);
                    if (isLeftCalendar && +yearDate > +rightDateLimit) {
                        ele = this.keyCalendarUpdate(false, ele);
                    }
                    this.navigateTo('Month', new Date(this.currentDate.getFullYear(), 11, 31));
                    this.keyNavigation(ele, e);
                    break;
                case 'pageUp':
                    date = new Date(+this.currentDate);
                    this.addMonths(date, -1);
                    if (!isLeftCalendar && +date <= +leftDateLimit) {
                        ele = this.keyCalendarUpdate(true, ele);
                    }
                    this.addMonths(this.currentDate, -1);
                    this.navigateTo('Month', this.currentDate);
                    this.keyNavigation(ele, e);
                    break;
                case 'pageDown':
                    date = new Date(+this.currentDate);
                    this.addMonths(date, 1);
                    if (isLeftCalendar && +date >= +rightDateLimit) {
                        ele = this.keyCalendarUpdate(false, ele);
                    }
                    this.addMonths(this.currentDate, 1);
                    this.navigateTo('Month', this.currentDate);
                    this.keyNavigation(ele, e);
                    break;
                case 'shiftPageUp':
                    date = new Date(+this.currentDate);
                    this.addYears(date, -1);
                    if (!isLeftCalendar && +date <= +leftDateLimit) {
                        ele = this.keyCalendarUpdate(true, ele);
                    }
                    this.addYears(this.currentDate, -1);
                    this.navigateTo('Month', this.currentDate);
                    this.keyNavigation(ele, e);
                    break;
                case 'shiftPageDown':
                    date = new Date(+this.currentDate);
                    this.addYears(date, 1);
                    if (isLeftCalendar && +date >= +rightDateLimit) {
                        ele = this.keyCalendarUpdate(false, ele);
                    }
                    this.addYears(this.currentDate, 1);
                    this.navigateTo('Month', this.currentDate);
                    this.keyNavigation(ele, e);
                    break;
                case 'shiftTab':
                    if (!ej2_base_4.isNullOrUndefined(this.presetElement)) {
                        this.presetElement.setAttribute('tabindex', '0');
                        this.presetElement.focus();
                        this.removeFocusedDate();
                    }
                    e.preventDefault();
                    break;
                case 'spaceBar':
                    if (this.applyButton && !this.applyButton.disabled) {
                        this.applyFunction(e);
                    }
                    break;
                default:
                    this.navInCalendar(e, isLeftCalendar, leftDateLimit, rightDateLimit, ele);
                    this.checkMinMaxDays();
            }
            this.presetHeight();
        };
        DateRangePicker.prototype.keyNavigation = function (calendar, e) {
            this.bindCalendarCellEvents(calendar);
            if (calendar.classList.contains(LEFTCALENDER)) {
                this.leftCalCurrentDate = new Date(+this.currentDate);
            }
            else {
                this.rightCalCurrentDate = new Date(+this.currentDate);
            }
            this.updateNavIcons();
            this.calendarIconEvent();
            this.updateRange([calendar]);
            this.dateDisabled = this.isDateDisabled(this.currentDate);
            e.preventDefault();
        };
        DateRangePicker.prototype.inputHandler = function (e) {
            switch (e.action) {
                case 'altDownArrow':
                    if (!this.isPopupOpen()) {
                        this.show(null, e);
                        this.isRangeIconClicked = false;
                        if (!this.isMobile) {
                            if (!ej2_base_4.isNullOrUndefined(this.leftCalendar)) {
                                this.calendarFocus();
                            }
                        }
                        this.isKeyPopup = true;
                    }
                    break;
                case 'escape':
                    if (this.isPopupOpen()) {
                        this.hide(e);
                    }
                    break;
                case 'enter':
                    if (document.activeElement === this.inputElement) {
                        this.inputBlurHandler(e);
                        this.hide(e);
                    }
                    break;
                case 'tab':
                    if (document.activeElement === this.inputElement && this.isPopupOpen()) {
                        this.hide(e);
                        e.preventDefault();
                    }
                    break;
            }
        };
        DateRangePicker.prototype.bindCalendarCellEvents = function (calendar) {
            var tdCells;
            if (calendar) {
                tdCells = calendar.querySelectorAll('.' + CALENDAR + ' td');
            }
            else {
                tdCells = this.popupObj.element.querySelectorAll('.' + CALENDAR + ' td');
            }
            for (var _i = 0, tdCells_1 = tdCells; _i < tdCells_1.length; _i++) {
                var cell = tdCells_1[_i];
                ej2_base_1.EventHandler.clearEvents(cell);
                var disabledCell = void 0;
                disabledCell = cell.classList.contains(DISABLED) || cell.classList.contains(DATEDISABLED);
                if (!disabledCell && !cell.classList.contains(WEEKNUMBER)) {
                    ej2_base_1.EventHandler.add(cell, 'mousedown', this.selectRange, this);
                    if (!this.isMobile) {
                        ej2_base_1.EventHandler.add(cell, 'mouseover', this.hoverSelection, this);
                    }
                }
            }
        };
        DateRangePicker.prototype.removeFocusedDate = function () {
            var isDate = !ej2_base_4.isNullOrUndefined(this.startDate) || !ej2_base_4.isNullOrUndefined(this.endDate);
            var focusedDate;
            focusedDate = this.popupObj.element.querySelectorAll('.' + CALENDAR + ' .' + FOCUSDATE);
            if ((this.leftCalendar && this.leftCalendar.querySelector('.e-content').classList.contains('e-month')
                && this.rightCalendar && this.rightCalendar.querySelector('.e-content').classList.contains('e-month')) ||
                this.calendarElement && this.calendarElement.querySelector('.e-content').classList.contains('e-month')) {
                for (var _i = 0, focusedDate_1 = focusedDate; _i < focusedDate_1.length; _i++) {
                    var ele = focusedDate_1[_i];
                    if (!ele.classList.contains(TODAY) || (ele.classList.contains(TODAY) && (isDate))) {
                        ele.classList.remove(FOCUSDATE);
                        if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(ENDDATE)) {
                            ele.removeAttribute('aria-label');
                        }
                    }
                }
            }
        };
        DateRangePicker.prototype.hoverSelection = function (event, element) {
            var currentElement = element || event.currentTarget;
            var currentDate = this.getIdValue(null, currentElement);
            if ((!ej2_base_4.isNullOrUndefined(this.startDate) && +this.startDate >= +this.min && +this.startDate <= +this.max)
                || (!ej2_base_4.isNullOrUndefined(this.endDate) && +this.endDate >= +this.min && +this.endDate <= +this.max)) {
                if ((!this.isDateDisabled(this.endDate) && !this.isDateDisabled(this.startDate)
                    && ej2_base_4.isNullOrUndefined(this.startDate) && ej2_base_4.isNullOrUndefined(this.endDate))
                    || (!ej2_base_4.isNullOrUndefined(this.startDate) && ej2_base_4.isNullOrUndefined(this.endDate))) {
                    var tdCells = void 0;
                    tdCells = this.popupObj.element.querySelectorAll('.' + CALENDAR + ' td');
                    for (var _i = 0, tdCells_2 = tdCells; _i < tdCells_2.length; _i++) {
                        var ele = tdCells_2[_i];
                        var isDisabledCell = (!ele.classList.contains(DISABLED) || ele.classList.contains(DATEDISABLED));
                        if (!ele.classList.contains(WEEKNUMBER) && isDisabledCell) {
                            var eleDate = this.getIdValue(null, ele);
                            var startDateValue = new Date(+this.startDate);
                            var eleDateValue = new Date(+eleDate);
                            if (eleDateValue.setHours(0, 0, 0, 0) >= startDateValue.setHours(0, 0, 0, 0) && +eleDate <= +currentDate) {
                                ej2_base_3.addClass([ele], RANGEHOVER);
                            }
                            else {
                                ej2_base_3.removeClass([ele], [RANGEHOVER]);
                            }
                        }
                    }
                }
            }
        };
        DateRangePicker.prototype.updateRange = function (elementCollection) {
            if (!ej2_base_4.isNullOrUndefined(this.startDate)) {
                for (var _i = 0, elementCollection_1 = elementCollection; _i < elementCollection_1.length; _i++) {
                    var calendar = elementCollection_1[_i];
                    var tdCells = calendar.querySelectorAll('.' + CALENDAR + ' td');
                    for (var _a = 0, tdCells_3 = tdCells; _a < tdCells_3.length; _a++) {
                        var ele = tdCells_3[_a];
                        if (!ele.classList.contains(WEEKNUMBER) && !ele.classList.contains(DISABLED)) {
                            var eleDate = this.getIdValue(null, ele);
                            if (!ej2_base_4.isNullOrUndefined(this.endDate)) {
                                if (+eleDate >= +this.startDate && +eleDate <= +this.endDate && +this.startDate !== +this.endDate &&
                                    +this.startDate >= +this.min && +this.endDate <= +this.max
                                    && !(this.isDateDisabled(this.startDate) || this.isDateDisabled(this.endDate))) {
                                    ej2_base_3.addClass([ele], RANGEHOVER);
                                }
                            }
                            else {
                                ej2_base_3.removeClass([ele], [RANGEHOVER]);
                            }
                            if (!ele.classList.contains(OTHERMONTH)) {
                                var startDateValue = new Date(+this.startDate);
                                var eleDateValue = new Date(+eleDate);
                                if (eleDateValue.setHours(0, 0, 0, 0) === startDateValue.setHours(0, 0, 0, 0)
                                    && eleDateValue.setHours(0, 0, 0, 0) >= startDateValue.setHours(0, 0, 0, 0) &&
                                    +this.startDate >= +this.min
                                    && (!this.inputWrapper.container.classList.contains('e-error') || this.startDate)
                                    && !(this.startDate && this.isDateDisabled(this.startDate) ||
                                        this.endDate && this.isDateDisabled(this.endDate))) {
                                    ej2_base_3.addClass([ele], [STARTDATE, SELECTED, RANGEHOVER]);
                                    this.addSelectedAttributes(ele, this.startDate, true);
                                }
                                if (!ej2_base_4.isNullOrUndefined(this.endDate) && +eleDate === +this.endDate
                                    && +eleDate <= +this.endDate &&
                                    +this.startDate >= +this.min
                                    && (!this.inputWrapper.container.classList.contains('e-error') || this.endDate)
                                    && !(this.isDateDisabled(this.startDate) || this.isDateDisabled(this.endDate))) {
                                    ej2_base_3.addClass([ele], [ENDDATE, SELECTED]);
                                    this.addSelectedAttributes(ele, this.endDate, false);
                                }
                                if (+eleDate === +this.startDate && !ej2_base_4.isNullOrUndefined(this.endDate) && +eleDate === +this.endDate) {
                                    this.addSelectedAttributes(ele, this.endDate, false, true);
                                }
                            }
                        }
                    }
                }
            }
        };
        DateRangePicker.prototype.checkMinMaxDays = function () {
            if ((!ej2_base_4.isNullOrUndefined(this.minDays) && this.minDays > 0) || (!ej2_base_4.isNullOrUndefined(this.maxDays) && this.maxDays > 0)) {
                if (!this.isMobile) {
                    this.updateMinMaxDays(this.popupObj.element.querySelector('.' + LEFTCALENDER));
                    this.updateMinMaxDays(this.popupObj.element.querySelector('.' + RIGHTCALENDER));
                }
                else {
                    this.updateMinMaxDays(this.popupObj.element.querySelector('.' + CALENDAR));
                }
            }
        };
        DateRangePicker.prototype.rangeArgs = function (e) {
            var inputValue;
            var range;
            var startDate = !ej2_base_4.isNullOrUndefined(this.startDate) ?
                this.globalize.formatDate(this.startDate, { format: this.format, type: 'date', skeleton: 'yMd' }) : null;
            var endDate = !ej2_base_4.isNullOrUndefined(this.endDate) ?
                this.globalize.formatDate(this.endDate, { format: this.format, type: 'date', skeleton: 'yMd' }) : null;
            if (!ej2_base_4.isNullOrUndefined(this.endDate) && !ej2_base_4.isNullOrUndefined(this.startDate)) {
                inputValue = startDate + ' ' + this.separator + ' ' + endDate;
                range = (Math.round(Math.abs((this.startDate.getTime() - this.endDate.getTime()) / (1000 * 60 * 60 * 24))) + 1);
            }
            else {
                inputValue = '';
                range = 0;
            }
            var args = {
                value: this.value,
                startDate: this.startDate,
                endDate: this.endDate,
                daySpan: range,
                event: e || null,
                element: this.element,
                isInteracted: !ej2_base_4.isNullOrUndefined(e),
                text: inputValue
            };
            return args;
        };
        DateRangePicker.prototype.otherMonthSelect = function (ele, isStartDate, sameDate) {
            var value = +this.getIdValue(null, ele);
            var dateIdString = '*[id^="/id"]:not(.e-other-month)'.replace('/id', '' + value);
            var tdCell = this.popupObj.element.querySelector(dateIdString);
            if (!ej2_base_4.isNullOrUndefined(tdCell)) {
                if (isStartDate) {
                    ej2_base_3.addClass([tdCell], [STARTDATE, SELECTED]);
                    this.addSelectedAttributes(tdCell, this.startDate, true);
                }
                else {
                    ej2_base_3.addClass([tdCell], [ENDDATE, SELECTED]);
                    this.addSelectedAttributes(tdCell, this.endDate, true);
                }
                if (sameDate) {
                    this.addSelectedAttributes(ele, this.endDate, false, true);
                }
            }
        };
        DateRangePicker.prototype.selectRange = function (event, element) {
            event.preventDefault();
            var date;
            date = event instanceof MouseEvent ? this.getIdValue(event, null) : this.getIdValue(null, element);
            if (!ej2_base_4.isNullOrUndefined(this.endDate) && !ej2_base_4.isNullOrUndefined(this.startDate)) {
                if (!this.isMobile || this.isMobile && !this.endButton.element.classList.contains(ACTIVE)) {
                    this.removeSelection();
                }
            }
            else if (this.isMobile && this.startButton.element.classList.contains(ACTIVE)) {
                this.removeSelection();
            }
            var ele = element || event.currentTarget;
            if (ej2_base_4.isNullOrUndefined(this.startDate)) {
                if (!ej2_base_4.isNullOrUndefined(this.previousStartValue)) {
                    date.setHours(this.previousStartValue.getHours());
                    date.setMinutes(this.previousStartValue.getMinutes());
                    date.setSeconds(this.previousStartValue.getSeconds());
                }
                this.setProperties({ startDate: new Date('' + date) }, true);
                this.setProperties({ endDate: null }, true);
                this.setValue();
                ej2_base_3.addClass([ele], STARTDATE);
                this.addSelectedAttributes(ele, this.startDate, true);
                if (ele.classList.contains(OTHERMONTH)) {
                    this.otherMonthSelect(ele, true);
                }
                this.checkMinMaxDays();
                this.applyButton.disabled = true;
                this.applyButton.element.disabled = true;
                if (this.isMobile) {
                    this.endButton.element.classList.add(ACTIVE);
                    this.startButton.element.classList.remove(ACTIVE);
                    this.endButton.element.removeAttribute('disabled');
                    this.selectableDates();
                }
                this.trigger('select', this.rangeArgs(event));
            }
            else {
                if (+date === +this.startDate || +date > +this.startDate) {
                    if (+date === +this.startDate && !ej2_base_4.isNullOrUndefined(this.minDays) && this.minDays > 1) {
                        return;
                    }
                    this.setProperties({ endDate: null }, true);
                    this.setValue();
                    if (this.isMobile || element) {
                        this.hoverSelection(event, element);
                    }
                    if (!ej2_base_4.isNullOrUndefined(this.previousEndValue)) {
                        date.setHours(this.previousEndValue.getHours());
                        date.setMinutes(this.previousEndValue.getMinutes());
                        date.setSeconds(this.previousEndValue.getSeconds());
                    }
                    this.setProperties({ endDate: new Date('' + date) }, true);
                    this.setValue();
                    var endEle = this.popupObj.element.querySelectorAll('.' + ENDDATE);
                    if (this.isMobile) {
                        this.startButton.element.classList.remove(ACTIVE);
                        this.endButton.element.classList.add(ACTIVE);
                        for (var _i = 0, endEle_1 = endEle; _i < endEle_1.length; _i++) {
                            var ele_1 = endEle_1[_i];
                            ele_1.removeAttribute('aria-label');
                            if (!ele_1.classList.contains(STARTDATE)) {
                                ele_1.setAttribute('aria-selected', 'false');
                                ej2_base_3.removeClass([ele_1], [ENDDATE, SELECTED]);
                            }
                            else {
                                this.addSelectedAttributes(ele_1, this.startDate, true);
                                ej2_base_3.removeClass([ele_1], [ENDDATE]);
                            }
                        }
                    }
                    ej2_base_3.addClass([ele], ENDDATE);
                    if (+this.endDate === +this.startDate) {
                        this.addSelectedAttributes(ele, this.endDate, false, true);
                    }
                    else {
                        this.addSelectedAttributes(ele, this.endDate, false);
                    }
                    if (ele.classList.contains(OTHERMONTH)) {
                        if (+this.endDate === +this.startDate) {
                            this.otherMonthSelect(ele, false, true);
                        }
                        else {
                            this.otherMonthSelect(ele, false);
                        }
                    }
                    endEle = this.popupObj.element.querySelectorAll('.' + ENDDATE);
                    for (var _a = 0, endEle_2 = endEle; _a < endEle_2.length; _a++) {
                        var ele_2 = endEle_2[_a];
                        if (ele_2.classList.contains(STARTDATE)) {
                            ej2_base_3.removeClass([ele_2], [RANGEHOVER]);
                        }
                    }
                    this.applyButton.disabled = false;
                    this.applyButton.element.disabled = false;
                    if (!this.isMobile) {
                        this.removeClassDisabled();
                    }
                    this.disabledDateRender();
                    this.trigger('select', this.rangeArgs(event));
                }
                else if (+date < +this.startDate) {
                    this.removeClassDisabled();
                    this.setProperties({ startDate: new Date('' + date) }, true);
                    this.setValue();
                    this.removeSelectedAttributes();
                    ej2_base_3.removeClass(this.popupObj.element.querySelectorAll('.' + STARTDATE), [STARTDATE, SELECTED]);
                    ej2_base_3.addClass([ele], STARTDATE);
                    this.addSelectedAttributes(ele, this.startDate, true);
                    if (ele.classList.contains(OTHERMONTH)) {
                        this.otherMonthSelect(ele, true);
                    }
                    this.checkMinMaxDays();
                }
            }
            ej2_base_3.addClass([ele], SELECTED);
            this.updateHeader();
            this.removeFocusedDate();
        };
        DateRangePicker.prototype.selectableDates = function () {
            if (!ej2_base_4.isNullOrUndefined(this.startDate)) {
                var tdCells = this.calendarElement.querySelectorAll('.' + CALENDAR + ' td');
                var isStartDate = false;
                if (this.currentView() === 'Month') {
                    for (var _i = 0, tdCells_4 = tdCells; _i < tdCells_4.length; _i++) {
                        var ele = tdCells_4[_i];
                        if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(WEEKNUMBER)) {
                            if (!ele.classList.contains(DISABLED)) {
                                var eleDate = this.getIdValue(null, ele);
                                if (+eleDate < +this.startDate) {
                                    ej2_base_3.addClass([ele], [DATEDISABLED, DISABLED, OVERLAY]);
                                    ej2_base_1.EventHandler.clearEvents(ele);
                                    continue;
                                }
                                else {
                                    break;
                                }
                            }
                        }
                        if (ele.classList.contains(STARTDATE) && !ele.classList.contains(OTHERMONTH)) {
                            isStartDate = true;
                            break;
                        }
                    }
                    if (isStartDate) {
                        if (!this.previousIcon.classList.contains(DISABLED)) {
                            ej2_base_3.addClass([this.previousIcon], [ICONDISABLED, DISABLED, OVERLAY]);
                        }
                    }
                }
                else {
                    for (var _a = 0, tdCells_5 = tdCells; _a < tdCells_5.length; _a++) {
                        var ele = tdCells_5[_a];
                        var startMonth = this.startDate.getMonth();
                        var startYear = this.startDate.getFullYear();
                        var element = this.getIdValue(null, ele);
                        if (!this.startButton.element.classList.contains(ACTIVE) && ((this.currentView() === 'Year' &&
                            (element.getMonth() < startMonth)) || (this.currentView() === 'Decade' && (element.getFullYear() < startYear)))) {
                            ej2_base_3.addClass([ele], [DISABLED]);
                        }
                        else {
                            break;
                        }
                    }
                    if (tdCells[0].classList.contains(DISABLED)) {
                        this.previousIconHandler(true);
                    }
                    else if (tdCells[tdCells.length - 1].classList.contains(DISABLED)) {
                        this.nextIconHandler(true);
                    }
                }
            }
        };
        DateRangePicker.prototype.updateMinMaxDays = function (calendar) {
            if (!ej2_base_4.isNullOrUndefined(this.startDate) && (ej2_base_4.isNullOrUndefined(this.endDate) || this.isMobile)) {
                if ((!ej2_base_4.isNullOrUndefined(this.minDays) && this.minDays > 0) || (!ej2_base_4.isNullOrUndefined(this.maxDays) && this.maxDays > 0)) {
                    var minDate = new Date(new Date(+this.startDate).setDate(this.startDate.getDate() + (this.minDays - 1)));
                    var maxDate = new Date(new Date(+this.startDate).setDate(this.startDate.getDate() + (this.maxDays - 1)));
                    minDate = (!ej2_base_4.isNullOrUndefined(this.minDays) && this.minDays > 0) ? minDate : null;
                    maxDate = (!ej2_base_4.isNullOrUndefined(this.maxDays) && this.maxDays > 0) ? maxDate : null;
                    var tdCells = calendar.querySelectorAll('.' + CALENDAR + ' td');
                    var maxEle = void 0;
                    for (var _i = 0, tdCells_6 = tdCells; _i < tdCells_6.length; _i++) {
                        var ele = tdCells_6[_i];
                        if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(WEEKNUMBER)) {
                            var eleDate = this.getIdValue(null, ele);
                            if (!ej2_base_4.isNullOrUndefined(minDate) && +eleDate === +minDate && ele.classList.contains(DISABLED)) {
                                minDate.setDate(minDate.getDate() + 1);
                            }
                            if (!ele.classList.contains(DISABLED)) {
                                if (+eleDate <= +this.startDate) {
                                    continue;
                                }
                                if (!ej2_base_4.isNullOrUndefined(minDate) && +eleDate < +minDate) {
                                    ej2_base_3.addClass([ele], [DATEDISABLED, DISABLED, OVERLAY]);
                                    ej2_base_1.EventHandler.clearEvents(ele);
                                }
                                if (!ej2_base_4.isNullOrUndefined(maxDate) && +eleDate > +maxDate) {
                                    ej2_base_3.addClass([ele], [DATEDISABLED, DISABLED, OVERLAY]);
                                    this.isMaxDaysClicked = true;
                                    ej2_base_1.EventHandler.clearEvents(ele);
                                    if (ej2_base_4.isNullOrUndefined(maxEle) && !ele.classList.contains(OTHERMONTH)) {
                                        maxEle = ele;
                                    }
                                }
                            }
                        }
                    }
                    if (!ej2_base_4.isNullOrUndefined(maxEle)) {
                        if (this.isMobile) {
                            if (!this.nextIcon.classList.contains(DISABLED)) {
                                ej2_base_3.addClass([this.nextIcon], [ICONDISABLED, DISABLED, OVERLAY]);
                            }
                        }
                        else {
                            var calendar_2 = ej2_base_3.closest(maxEle, '.' + RIGHTCALENDER);
                            calendar_2 = ej2_base_4.isNullOrUndefined(calendar_2) ? this.leftCalendar : calendar_2;
                            var isLeftCalendar = calendar_2.classList.contains(LEFTCALENDER);
                            if (!isLeftCalendar) {
                                if (!this.rightCalNextIcon.classList.contains(DISABLED)) {
                                    ej2_base_3.addClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED, OVERLAY]);
                                }
                            }
                            else {
                                if (!this.rightCalNextIcon.classList.contains(DISABLED)) {
                                    ej2_base_3.addClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED, OVERLAY]);
                                }
                                if (!this.leftCalNextIcon.classList.contains(DISABLED)) {
                                    ej2_base_3.addClass([this.leftCalNextIcon], [ICONDISABLED, DISABLED, OVERLAY]);
                                }
                                if (!this.rightCalPrevIcon.classList.contains(DISABLED)) {
                                    ej2_base_3.addClass([this.rightCalPrevIcon], [ICONDISABLED, DISABLED, OVERLAY]);
                                }
                            }
                        }
                    }
                }
            }
            else {
                this.isMaxDaysClicked = false;
            }
        };
        DateRangePicker.prototype.removeClassDisabled = function () {
            var tdCells;
            tdCells = this.popupObj.element.querySelectorAll('.' + CALENDAR + ' td' + '.' + DATEDISABLED);
            for (var _i = 0, tdCells_7 = tdCells; _i < tdCells_7.length; _i++) {
                var ele = tdCells_7[_i];
                if (ele.classList.contains(DATEDISABLED)) {
                    ej2_base_3.removeClass([ele], [DATEDISABLED, DISABLED, OVERLAY]);
                    ej2_base_1.EventHandler.add(ele, 'click', this.selectRange, this);
                    if (!this.isMobile) {
                        ej2_base_1.EventHandler.add(ele, 'mouseover', this.hoverSelection, this);
                    }
                }
            }
            if (this.isMobile) {
                if (this.nextIcon.classList.contains(ICONDISABLED)) {
                    ej2_base_3.removeClass([this.nextIcon], [ICONDISABLED, DISABLED, OVERLAY]);
                }
                if (this.previousIcon.classList.contains(ICONDISABLED)) {
                    ej2_base_3.removeClass([this.previousIcon], [ICONDISABLED, DISABLED, OVERLAY]);
                }
            }
            else {
                if (this.rightCalNextIcon.classList.contains(ICONDISABLED)) {
                    ej2_base_3.removeClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED, OVERLAY]);
                }
                if (this.rightCalPrevIcon.classList.contains(ICONDISABLED)) {
                    ej2_base_3.removeClass([this.rightCalPrevIcon], [ICONDISABLED, DISABLED, OVERLAY]);
                }
                if (this.leftCalNextIcon.classList.contains(ICONDISABLED)) {
                    ej2_base_3.removeClass([this.leftCalNextIcon], [ICONDISABLED, DISABLED, OVERLAY]);
                }
            }
        };
        DateRangePicker.prototype.updateHeader = function () {
            var format = { type: 'date', skeleton: 'yMMMd' };
            if (!ej2_base_4.isNullOrUndefined(this.endDate) && !ej2_base_4.isNullOrUndefined(this.startDate)) {
                var range = (Math.round(Math.abs((this.startDate.getTime() - this.endDate.getTime()) / (1000 * 60 * 60 * 24))) + 1);
                if (!ej2_base_4.isNullOrUndefined(this.disabledDayCnt)) {
                    range = range - this.disabledDayCnt;
                    this.disabledDayCnt = null;
                }
                this.popupObj.element.querySelector('.' + DAYSPAN).textContent = range.toString() + ' ' + this.l10n.getConstant('days');
            }
            else {
                this.popupObj.element.querySelector('.' + DAYSPAN).textContent = this.l10n.getConstant('selectedDays');
            }
            if (!this.isMobile) {
                if (!ej2_base_4.isNullOrUndefined(this.endDate) && !ej2_base_4.isNullOrUndefined(this.startDate)) {
                    this.popupObj.element.querySelector('.' + ENDLABEL).textContent = this.globalize.formatDate(this.endDate, format);
                }
                else {
                    this.popupObj.element.querySelector('.' + ENDLABEL).textContent = this.l10n.getConstant('endLabel');
                }
                if (!ej2_base_4.isNullOrUndefined(this.startDate)) {
                    this.popupObj.element.querySelector('.' + STARTLABEL).textContent = this.globalize.formatDate(this.startDate, format);
                }
                else {
                    this.popupObj.element.querySelector('.' + STARTLABEL).textContent = this.l10n.getConstant('startLabel');
                }
            }
            else {
                if (!ej2_base_4.isNullOrUndefined(this.startDate)) {
                    this.startButton.element.textContent = this.globalize.formatDate(this.startDate, format);
                }
                else {
                    this.startButton.element.textContent = this.l10n.getConstant('startLabel');
                }
                if (!ej2_base_4.isNullOrUndefined(this.endDate) && !ej2_base_4.isNullOrUndefined(this.startDate)) {
                    this.endButton.element.textContent = this.globalize.formatDate(this.endDate, format);
                }
                else {
                    this.endButton.element.textContent = this.l10n.getConstant('endLabel');
                }
            }
            if (((!ej2_base_4.isNullOrUndefined(this.startDate) && +this.startDate < +this.min)
                || ((!ej2_base_4.isNullOrUndefined(this.startDate) && !ej2_base_4.isNullOrUndefined(this.endDate))
                    && +this.startDate > +this.endDate)
                || (!ej2_base_4.isNullOrUndefined(this.endDate) && +this.endDate > +this.max))
                || (this.isDateDisabled(this.startDate) || this.isDateDisabled(this.endDate))) {
                if (!this.isMobile) {
                    this.popupObj.element.querySelector('.' + DAYSPAN).textContent = this.l10n.getConstant('selectedDays');
                    this.popupObj.element.querySelector('.' + STARTLABEL).textContent = this.l10n.getConstant('startLabel');
                    this.popupObj.element.querySelector('.' + ENDLABEL).textContent = this.l10n.getConstant('endLabel');
                }
                else {
                    this.startButton.element.textContent = this.l10n.getConstant('startLabel');
                    this.endButton.element.textContent = this.l10n.getConstant('endLabel');
                    this.popupObj.element.querySelector('.' + DAYSPAN).textContent = this.l10n.getConstant('selectedDays');
                }
            }
        };
        DateRangePicker.prototype.removeSelection = function () {
            this.setProperties({ startDate: null }, true);
            this.setProperties({ endDate: null }, true);
            this.setValue();
            this.removeSelectedAttributes();
            if (this.popupObj.element.querySelectorAll('.' + SELECTED).length > 0) {
                ej2_base_3.removeClass(this.popupObj.element.querySelectorAll('.' + SELECTED), [STARTDATE, ENDDATE, SELECTED]);
            }
            if (this.popupObj.element.querySelectorAll('.' + FOCUSDATE).length > 0) {
                ej2_base_3.removeClass(this.popupObj.element.querySelectorAll('.' + FOCUSDATE), FOCUSDATE);
            }
            if (this.popupObj.element.querySelectorAll('.' + RANGEHOVER).length > 0) {
                ej2_base_3.removeClass(this.popupObj.element.querySelectorAll('.' + RANGEHOVER), [RANGEHOVER]);
            }
        };
        DateRangePicker.prototype.addSelectedAttributes = function (ele, date, isStartDate, sameDate) {
            if (ele) {
                var title = this.globalize.formatDate(date, { type: 'date', skeleton: 'full' });
                if (!ej2_base_4.isNullOrUndefined(sameDate) && sameDate) {
                    ele.setAttribute('aria-label', 'The current start and end date is ' + '' + title);
                }
                else {
                    ele.setAttribute('aria-label', 'The current ' + (isStartDate ? 'start' : 'end') + ' date is ' + '' + title);
                }
                ele.setAttribute('aria-selected', 'true');
            }
        };
        DateRangePicker.prototype.removeSelectedAttributes = function () {
            var start = this.popupObj.element.querySelectorAll('.' + STARTDATE);
            for (var _i = 0, start_1 = start; _i < start_1.length; _i++) {
                var ele = start_1[_i];
                ele.setAttribute('aria-selected', 'false');
                ele.removeAttribute('aria-label');
            }
            var end = this.popupObj.element.querySelectorAll('.' + ENDDATE);
            for (var _a = 0, end_1 = end; _a < end_1.length; _a++) {
                var ele = end_1[_a];
                ele.setAttribute('aria-selected', 'false');
                ele.removeAttribute('aria-label');
            }
        };
        DateRangePicker.prototype.updateCalendarElement = function (calendar) {
            if (calendar.classList.contains(LEFTCALENDER)) {
                this.calendarElement = this.leftCalendar;
                this.currentDate = this.leftCalCurrentDate;
                this.previousIcon = this.leftCalPrevIcon;
                this.nextIcon = this.leftCalNextIcon;
            }
            else {
                this.calendarElement = this.rightCalendar;
                this.currentDate = this.rightCalCurrentDate;
                this.previousIcon = this.rightCalPrevIcon;
                this.nextIcon = this.rightCalNextIcon;
            }
            this.contentElement = calendar.querySelector('.' + CONTENT);
            this.tableBodyElement = ej2_base_3.select('.' + CONTENT + ' tbody', calendar);
            this.table = calendar.querySelector('.' + CONTENT).getElementsByTagName('table')[0];
            this.headerTitleElement = calendar.querySelector('.' + HEADER + ' .' + TITLE);
            this.headerElement = calendar.querySelector('.' + HEADER);
        };
        DateRangePicker.prototype.navPrevMonth = function (e) {
            e.preventDefault();
            var ele = ej2_base_3.closest(e.target, '.' + LEFTCALENDER);
            ele = ej2_base_4.isNullOrUndefined(ele) ? ej2_base_3.closest(e.target, '.' + RIGHTCALENDER) : ele;
            this.updateCalendarElement(ele);
            this.navigatePrevious(e);
            if (!ej2_base_4.isNullOrUndefined(this.startDate) && ej2_base_4.isNullOrUndefined(this.endDate)) {
                this.updateMinMaxDays(ele);
            }
            this.updateControl(ele);
        };
        DateRangePicker.prototype.deviceNavigation = function (ele) {
            this.deviceCalendarEvent();
            this.updateRange([this.popupObj.element.querySelector('.' + CALENDAR)]);
            if ((!ej2_base_4.isNullOrUndefined(this.endDate) && this.endButton.element.classList.contains(ACTIVE))) {
                this.updateMinMaxDays(this.popupObj.element.querySelector('.' + CALENDAR));
            }
            if (this.endButton.element.classList.contains(ACTIVE)) {
                this.selectableDates();
            }
            if (this.currentView() === 'Month') {
                this.bindCalendarCellEvents();
            }
            this.removeFocusedDate();
            this.popupObj.refreshPosition(this.inputElement);
            this.popupObj.show();
        };
        DateRangePicker.prototype.updateControl = function (calendar) {
            if (calendar.classList.contains(RIGHTCALENDER)) {
                this.rightCalCurrentDate = new Date(+this.currentDate);
            }
            else {
                this.leftCalCurrentDate = new Date(+this.currentDate);
            }
            this.updateNavIcons();
            this.calendarIconEvent();
            if ((this.leftCalendar.querySelector('.e-content').classList.contains('e-month')
                && this.rightCalendar.querySelector('.e-content').classList.contains('e-month'))
                || this.isMobile) {
                this.bindCalendarCellEvents();
            }
            this.removeFocusedDate();
            this.updateRange([calendar]);
            this.presetHeight();
            if (!(this.isMobile || this.enableRtl)) {
                this.popupObj.offsetX = -this.popupWrapper.getBoundingClientRect().width;
                this.popupObj.show();
            }
        };
        DateRangePicker.prototype.navNextMonth = function (event) {
            event.preventDefault();
            var ele = ej2_base_3.closest(event.target, '.' + LEFTCALENDER);
            ele = ej2_base_4.isNullOrUndefined(ele) ? ej2_base_3.closest(event.target, '.' + RIGHTCALENDER) : ele;
            this.updateCalendarElement(ele);
            this.navigateNext(event);
            if (!ej2_base_4.isNullOrUndefined(this.startDate) && ej2_base_4.isNullOrUndefined(this.endDate)) {
                this.updateMinMaxDays(ele);
            }
            this.updateControl(ele);
        };
        DateRangePicker.prototype.compareMonths = function (start, end) {
            var result;
            if ((this.currentView() === 'Year' || this.currentView() === 'Decade') &&
                start.getFullYear() === end.getFullYear()) {
                result = -1;
            }
            else if (start.getFullYear() > end.getFullYear()) {
                result = -1;
            }
            else if (start.getFullYear() < end.getFullYear()) {
                if (start.getFullYear() + 1 === end.getFullYear() && start.getMonth() === 11 && end.getMonth() === 0) {
                    result = -1;
                }
                else {
                    result = 1;
                }
            }
            else {
                result = start.getMonth() === end.getMonth() ? 0 : start.getMonth() + 1 === end.getMonth() ? -1 : 1;
            }
            return result;
        };
        DateRangePicker.prototype.isPopupOpen = function () {
            if (!ej2_base_4.isNullOrUndefined(this.popupObj) && this.popupObj.element.classList.contains(POPUP)) {
                return true;
            }
            return false;
        };
        DateRangePicker.prototype.createRangeHeader = function () {
            var labelContainer = ej2_base_3.createElement('div', { className: STARTENDCONTAINER });
            if (!this.isMobile) {
                var startLabel = ej2_base_3.createElement('a', { className: STARTLABEL });
                var endLabel = ej2_base_3.createElement('a', { className: ENDLABEL });
                var changeIcon = ej2_base_3.createElement('span', { className: CHANGEICON });
                ej2_base_3.attributes(startLabel, { 'aria-atomic': 'true', 'aria-live': 'assertive', 'aria-label': 'Start Date', 'role': 'button' });
                ej2_base_3.attributes(endLabel, { 'aria-atomic': 'true', 'aria-live': 'assertive', 'aria-label': 'End Date', 'role': 'button' });
                labelContainer.appendChild(startLabel);
                labelContainer.appendChild(changeIcon);
                labelContainer.appendChild(endLabel);
                startLabel.textContent = this.l10n.getConstant('startLabel');
                endLabel.textContent = this.l10n.getConstant('endLabel');
            }
            else {
                var endBtn = ej2_base_3.createElement('button', { className: ENDBUTTON });
                var startBtn = ej2_base_3.createElement('button', { className: STARTBUTTON });
                this.startButton = new ej2_buttons_1.Button({ content: this.l10n.getConstant('startLabel') }, startBtn);
                this.endButton = new ej2_buttons_1.Button({ content: this.l10n.getConstant('endLabel') }, endBtn);
                labelContainer.appendChild(startBtn);
                labelContainer.appendChild(endBtn);
            }
            return labelContainer;
        };
        DateRangePicker.prototype.disableInput = function () {
            if (this.strictMode) {
                if (!ej2_base_4.isNullOrUndefined(this.previousStartValue) && !ej2_base_4.isNullOrUndefined(this.previousEndValue)) {
                    this.setProperties({ startDate: this.previousStartValue }, true);
                    this.setProperties({ endDate: this.previousEndValue }, true);
                    this.setValue();
                    this.updateInput();
                }
            }
            else {
                this.updateInput();
                this.clearRange();
                this.setProperties({ startDate: null }, true);
                this.setProperties({ endDate: null }, true);
                this.setValue();
                this.errorClass();
            }
            this.setProperties({ enabled: false }, true);
            ej2_inputs_1.Input.setEnabled(this.enabled, this.inputElement);
            this.bindEvents();
        };
        DateRangePicker.prototype.validateMinMax = function () {
            this.min = ej2_base_4.isNullOrUndefined(this.min) || !(+this.min) ? this.min = new Date(1900, 0, 1) : this.min;
            this.max = ej2_base_4.isNullOrUndefined(this.max) || !(+this.max) ? this.max = new Date(2099, 11, 31) : this.max;
            if (!(this.min <= this.max)) {
                this.disableInput();
                return;
            }
            if (!ej2_base_4.isNullOrUndefined(this.minDays) && !ej2_base_4.isNullOrUndefined(this.maxDays)) {
                if (this.maxDays > 0 && this.minDays > 0 && (this.minDays > this.maxDays)) {
                    this.maxDays = null;
                }
            }
            if (!ej2_base_4.isNullOrUndefined(this.minDays) && this.minDays < 0) {
                this.minDays = null;
            }
            if (!ej2_base_4.isNullOrUndefined(this.maxDays) && this.maxDays < 0) {
                this.maxDays = null;
            }
        };
        DateRangePicker.prototype.validateRangeStrict = function () {
            if (!ej2_base_4.isNullOrUndefined(this.startDate)) {
                if (+this.startDate < +this.min) {
                    this.setProperties({ startDate: this.min }, true);
                    this.setValue();
                }
                else if (+this.startDate > +this.max) {
                    this.setProperties({ startDate: this.max }, true);
                }
            }
            if (!ej2_base_4.isNullOrUndefined(this.endDate)) {
                if (+this.endDate > +this.max) {
                    this.setProperties({ endDate: this.max }, true);
                    this.setValue();
                }
                else if (+this.endDate < +this.min) {
                    this.setProperties({ endDate: this.min }, true);
                    this.setValue();
                }
            }
            if ((!ej2_base_4.isNullOrUndefined(this.startDate) && !ej2_base_4.isNullOrUndefined(this.endDate)) && +this.startDate > +this.endDate) {
                this.setProperties({ endDate: this.max }, true);
                this.setValue();
            }
            this.validateMinMaxDays();
        };
        DateRangePicker.prototype.validateRange = function () {
            this.validateMinMaxDays();
        };
        DateRangePicker.prototype.validateMinMaxDays = function () {
            if (!ej2_base_4.isNullOrUndefined(this.startDate) && !ej2_base_4.isNullOrUndefined(this.endDate)) {
                var range = (Math.round(Math.abs((this.startDate.getTime() - this.endDate.getTime()) / (1000 * 60 * 60 * 24))) + 1);
                if ((!ej2_base_4.isNullOrUndefined(this.minDays) && this.minDays > 0) && !(range >= this.minDays)) {
                    if (this.strictMode) {
                        var date = new Date(+this.startDate);
                        date.setDate(date.getDate() + (this.minDays - 1));
                        if (+date > +this.max) {
                            this.setProperties({ endDate: this.max }, true);
                            this.setValue();
                        }
                        else {
                            this.setProperties({ endDate: date }, true);
                            this.setValue();
                        }
                    }
                    else {
                        this.setProperties({ startDate: null }, true);
                        this.setProperties({ endDate: null }, true);
                        this.setValue();
                    }
                }
                if ((!ej2_base_4.isNullOrUndefined(this.maxDays) && this.maxDays > 0) && !(range <= this.maxDays)) {
                    if (this.strictMode) {
                        this.endDate = new Date(+this.startDate);
                        this.endDate.setDate(this.endDate.getDate() + (this.maxDays - 1));
                        this.setProperties({ endDate: this.endDate }, true);
                        this.setValue();
                    }
                    else {
                        this.setProperties({ startDate: null }, true);
                        this.setProperties({ endDate: null }, true);
                        this.setValue();
                    }
                }
            }
        };
        DateRangePicker.prototype.renderCalendar = function () {
            this.calendarElement = ej2_base_3.createElement('div');
            this.calendarElement.classList.add(CALENDAR);
            if (this.enableRtl) {
                this.calendarElement.classList.add(RTL);
            }
            ej2_base_3.attributes(this.calendarElement, { 'role': 'calendar' });
            _super.prototype.createHeader.call(this);
            _super.prototype.createContent.call(this);
        };
        DateRangePicker.prototype.isSameMonth = function (start, end) {
            if (start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear()) {
                return true;
            }
            return false;
        };
        DateRangePicker.prototype.startMonthCurrentDate = function () {
            if (this.isSameMonth(this.min, this.max) || +this.currentDate > +this.max || this.isSameMonth(this.currentDate, this.max)) {
                this.currentDate = new Date(+this.max);
                this.currentDate.setDate(1);
                this.currentDate.setMonth(this.currentDate.getMonth() - 1);
            }
            else if (this.currentDate < this.min) {
                this.currentDate = new Date('' + this.min);
            }
        };
        DateRangePicker.prototype.selectNextMonth = function () {
            if (!ej2_base_4.isNullOrUndefined(this.endDate) && !ej2_base_4.isNullOrUndefined(this.startDate) && !this.isSameMonth(this.endDate, this.currentDate)
                && !this.isDateDisabled(this.endDate) && !this.isDateDisabled(this.startDate)) {
                this.currentDate = new Date(+this.endDate);
            }
            else {
                this.currentDate.setDate(1);
                this.currentDate.setMonth(this.currentDate.getMonth() + 1);
                return;
            }
            if ((!ej2_base_4.isNullOrUndefined(this.startDate) && +this.startDate < +this.min)
                || (!ej2_base_4.isNullOrUndefined(this.endDate) && +this.endDate > +this.max)
                || ((!ej2_base_4.isNullOrUndefined(this.startDate) && !ej2_base_4.isNullOrUndefined(this.endDate)) && +this.startDate > +this.endDate)) {
                this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));
                this.currentDate.setDate(1);
                this.currentDate.setMonth(this.currentDate.getMonth() + 1);
            }
        };
        DateRangePicker.prototype.selectStartMonth = function () {
            if (!ej2_base_4.isNullOrUndefined(this.startDate)) {
                if (!ej2_base_4.isNullOrUndefined(this.max) && this.isSameMonth(this.startDate, this.max)) {
                    this.currentDate = new Date(+this.max);
                    this.currentDate.setDate(1);
                    this.currentDate.setMonth(this.currentDate.getMonth() - 1);
                }
                else if (!(this.startDate >= this.min && this.startDate <= this.max)
                    || this.isDateDisabled(this.startDate)) {
                    this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));
                }
                else {
                    this.currentDate = new Date(+this.startDate);
                }
            }
            else {
                this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));
                this.startMonthCurrentDate();
            }
            if ((!ej2_base_4.isNullOrUndefined(this.endDate) && +this.endDate > +this.max)
                || (!ej2_base_4.isNullOrUndefined(this.startDate) && +this.startDate < +this.min)
                || ((!ej2_base_4.isNullOrUndefined(this.startDate) && !ej2_base_4.isNullOrUndefined(this.endDate)) && +this.startDate > +this.endDate)) {
                this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));
            }
            this.startMonthCurrentDate();
        };
        DateRangePicker.prototype.createCalendar = function () {
            var calendarContainer = ej2_base_3.createElement('div', { className: CALENDARCONTAINER });
            if (!this.isMobile) {
                this.selectStartMonth();
                this.renderCalendar();
                this.leftCalCurrentDate = new Date(+this.currentDate);
                this.calendarElement.classList.add(LEFTCALENDER);
                this.leftCalPrevIcon = this.calendarElement.querySelector('.' + LEFTCALENDER + ' .' + PREVICON);
                this.leftCalNextIcon = this.calendarElement.querySelector('.' + LEFTCALENDER + ' .' + NEXTICON);
                this.leftTitle = this.calendarElement.querySelector('.' + LEFTCALENDER + ' .' + TITLE);
                ej2_base_3.remove(this.calendarElement.querySelector('.' + LEFTCALENDER + ' .' + ICONCONTAINER));
                this.calendarElement.querySelector('.' + LEFTCALENDER + ' .' + HEADER).appendChild(this.leftCalNextIcon);
                this.calendarElement.querySelector('.' + LEFTCALENDER + ' .' + HEADER).appendChild(this.leftCalPrevIcon);
                ej2_base_3.prepend([this.leftCalPrevIcon], this.calendarElement.querySelector('.' + LEFTCALENDER + ' .' + HEADER));
                this.leftCalendar = this.calendarElement;
                var leftContainer = ej2_base_3.createElement('div', { className: LEFTCONTAINER });
                var rightContainer = ej2_base_3.createElement('div', { className: RIGHTCONTAINER });
                leftContainer.appendChild(this.leftCalendar);
                calendarContainer.appendChild(leftContainer);
                if (!this.isMobile) {
                    ej2_base_1.EventHandler.add(this.leftTitle, 'click', this.leftNavTitle, this);
                }
                this.selectNextMonth();
                this.renderCalendar();
                this.rightCalCurrentDate = new Date(+this.currentDate);
                ej2_base_3.addClass([this.calendarElement], RIGHTCALENDER);
                this.rightCalendar = this.calendarElement;
                ej2_base_3.removeClass([this.leftCalendar && this.leftCalendar.querySelector('.e-content tbody')], 'e-zoomin');
                ej2_base_3.removeClass([this.rightCalendar && this.rightCalendar.querySelector('.e-content tbody')], 'e-zoomin');
                this.rightCalPrevIcon = this.calendarElement.querySelector('.' + RIGHTCALENDER + ' .' + PREVICON);
                this.rightCalNextIcon = this.calendarElement.querySelector('.' + RIGHTCALENDER + ' .' + NEXTICON);
                this.rightTitle = this.calendarElement.querySelector('.' + RIGHTCALENDER + ' .' + TITLE);
                ej2_base_3.remove(this.calendarElement.querySelector('.' + RIGHTCALENDER + ' .' + ICONCONTAINER));
                this.calendarElement.querySelector('table').setAttribute('tabindex', '-1');
                this.calendarElement.querySelector('.' + RIGHTCALENDER + ' .' + HEADER).appendChild(this.rightCalNextIcon);
                this.calendarElement.querySelector('.' + RIGHTCALENDER + ' .' + HEADER).appendChild(this.rightCalPrevIcon);
                ej2_base_3.prepend([this.rightCalPrevIcon], this.calendarElement.querySelector('.' + RIGHTCALENDER + ' .' + HEADER));
                rightContainer.appendChild(this.rightCalendar);
                calendarContainer.appendChild(rightContainer);
                if (!this.isMobile) {
                    ej2_base_1.EventHandler.add(this.rightTitle, 'click', this.rightNavTitle, this);
                }
            }
            else {
                if (!ej2_base_4.isNullOrUndefined(this.startDate)) {
                    this.currentDate = new Date(+this.startDate);
                }
                _super.prototype.validateDate.call(this);
                _super.prototype.minMaxUpdate.call(this);
                _super.prototype.render.call(this);
                var prevIcon = this.calendarElement.querySelector('.' + CALENDAR + ' .' + PREVICON);
                var nextIcon = this.calendarElement.querySelector('.' + CALENDAR + ' .' + NEXTICON);
                ej2_base_3.remove(this.calendarElement.querySelector('.' + CALENDAR + ' .' + ICONCONTAINER));
                this.calendarElement.querySelector('.' + CALENDAR + ' .' + HEADER).appendChild(nextIcon);
                this.calendarElement.querySelector('.' + CALENDAR + ' .' + HEADER).appendChild(prevIcon);
                ej2_base_3.prepend([prevIcon], this.calendarElement.querySelector('.' + CALENDAR + ' .' + HEADER));
                this.deviceCalendar = this.calendarElement;
                calendarContainer.appendChild(this.calendarElement);
                this.headerTitleElement = this.calendarElement.querySelector('.' + CALENDAR + ' .' + HEADER + ' .' + TITLE);
            }
            return calendarContainer;
        };
        DateRangePicker.prototype.leftNavTitle = function (e) {
            if (this.isPopupOpen()) {
                this.calendarElement = this.leftCalendar;
                this.table = this.leftCalendar.querySelector('table');
                this.headerTitleElement = this.leftCalendar.querySelector('.e-title');
                this.tableBodyElement = this.leftCalendar.querySelector('tbody');
                this.tableHeadElement = this.leftCalendar.querySelector('thead');
                this.contentElement = this.leftCalendar.querySelector('.e-content');
                this.updateCalendarElement(this.leftCalendar);
                _super.prototype.navigateTitle.call(this, e);
                this.updateNavIcons();
            }
        };
        DateRangePicker.prototype.rightNavTitle = function (e) {
            if (this.isPopupOpen()) {
                this.calendarElement = this.rightCalendar;
                this.table = this.rightCalendar.querySelector('table');
                this.headerTitleElement = this.rightCalendar.querySelector('.e-title');
                this.tableBodyElement = this.rightCalendar.querySelector('tbody');
                this.tableHeadElement = this.rightCalendar.querySelector('thead');
                this.contentElement = this.rightCalendar.querySelector('.e-content');
                this.updateCalendarElement(this.rightCalendar);
                _super.prototype.navigateTitle.call(this, e);
                this.updateNavIcons();
            }
        };
        DateRangePicker.prototype.clickEventEmitter = function (e) {
            if (!this.isMobile) {
                if (ej2_base_3.closest(e.target, '.e-calendar.e-left-calendar')) {
                    this.calendarElement = this.leftCalendar;
                    this.updateCalendarElement(this.leftCalendar);
                }
                else {
                    this.calendarElement = this.rightCalendar;
                    this.updateCalendarElement(this.rightCalendar);
                }
            }
        };
        DateRangePicker.prototype.currentView = function () {
            return _super.prototype.currentView.call(this);
        };
        DateRangePicker.prototype.navigatedEvent = function (e) {
            var element;
            if (this.isMobile && this.currentView() === 'Month') {
                this.bindCalendarCellEvents();
                this.deviceNavigation();
                this.removeFocusedDate();
            }
            else if (this.isMobile && (this.currentView() === 'Decade' || this.currentView() === 'Year')) {
                this.selectableDates();
            }
            else {
                if (!this.isMobile && this.currentView() === 'Month') {
                    element = this.calendarElement.classList.contains('e-left-calendar') ? this.leftCalendar : this.rightCalendar;
                    if (element === this.leftCalendar && e && !e.target.classList.contains('e-icons')) {
                        this.leftCalCurrentDate = new Date(+this.currentDate);
                        this.rightCalCurrentDate = new Date(new Date(+this.currentDate).setMonth(new Date(+this.currentDate).getMonth() + 1));
                        this.currentDate = this.leftCalCurrentDate;
                        this.updateCalendarElement(this.leftCalendar);
                        this.updateControl(this.leftCalendar);
                        this.updateCalendarElement(this.rightCalendar);
                        this.navigateTo('Month', this.rightCalCurrentDate);
                        this.updateControl(this.rightCalendar);
                        this.updateNavIcons();
                        this.calendarIconEvent();
                        this.calendarIconRipple();
                    }
                    else if (e && !e.target.classList.contains('e-icons')) {
                        this.rightCalCurrentDate = new Date(+this.currentDate);
                        this.leftCalCurrentDate = new Date(this.currentDate.setMonth(this.currentDate.getMonth() - 1));
                        this.currentDate = this.rightCalCurrentDate;
                        this.updateCalendarElement(this.rightCalendar);
                        this.updateControl(this.rightCalendar);
                        this.updateCalendarElement(this.leftCalendar);
                        if (this.startDate && +this.startDate < +this.rightCalCurrentDate) {
                            if (ej2_base_4.isNullOrUndefined(this.endDate)) {
                                this.effect = '';
                                this.navigateTo('Month', new Date(+this.startDate));
                            }
                            else {
                                this.navigateTo('Month', this.leftCalCurrentDate);
                            }
                        }
                        else {
                            this.navigateTo('Month', this.leftCalCurrentDate);
                        }
                        this.updateControl(this.leftCalendar);
                        this.updateNavIcons();
                        this.calendarIconEvent();
                        this.calendarIconRipple();
                    }
                }
                else if (!this.isMobile && (this.currentView() === 'Decade' || this.currentView() === 'Year')) {
                    this.updateNavIcons();
                    this.calendarIconEvent();
                }
            }
        };
        DateRangePicker.prototype.createControl = function () {
            var controlContainer = ej2_base_3.createElement('div', { className: RANGECONTAINER });
            var headerContainer = ej2_base_3.createElement('div', { className: RANGEHEADER });
            var labelContainer = this.createRangeHeader();
            headerContainer.appendChild(labelContainer);
            var daySpan = ej2_base_3.createElement('div', { className: DAYSPAN });
            ej2_base_3.attributes(daySpan, { 'aria-label': 'Selected Days' });
            daySpan.textContent = this.l10n.getConstant('selectedDays');
            headerContainer.appendChild(daySpan);
            var separator = ej2_base_3.createElement('div', { className: SEPARATOR });
            var calendarContainer = this.createCalendar();
            controlContainer.appendChild(headerContainer);
            controlContainer.appendChild(separator);
            controlContainer.appendChild(calendarContainer);
            var footerSection = ej2_base_3.createElement('div', { className: FOOTER });
            var cancelBtn = ej2_base_3.createElement('button', { className: CANCEL + ' ' + FLAT });
            var applyBtn = ej2_base_3.createElement('button', { className: APPLY + ' ' + FLAT + ' ' + PRIMARY });
            footerSection.appendChild(applyBtn);
            footerSection.appendChild(cancelBtn);
            var enable = !ej2_base_4.isNullOrUndefined(this.startDate) && !ej2_base_4.isNullOrUndefined(this.endDate);
            this.cancelButton = new ej2_buttons_1.Button({ content: this.l10n.getConstant('cancelText') }, cancelBtn);
            this.applyButton = new ej2_buttons_1.Button({ content: this.l10n.getConstant('applyText'), disabled: !enable }, applyBtn);
            ej2_base_1.EventHandler.add(applyBtn, 'click', this.applyFunction, this);
            ej2_base_1.EventHandler.add(cancelBtn, 'click', this.cancelFunction, this);
            this.popupWrapper.appendChild(controlContainer);
            document.body.appendChild(this.popupWrapper);
            if (!this.isMobile) {
                if (!ej2_base_4.isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
                    this.createPresets();
                    this.listRippleEffect();
                    ej2_base_3.addClass([controlContainer], RANGEBORDER);
                    ej2_base_3.addClass([this.popupWrapper], 'e-preset-wrapper');
                    var presets = this.popupWrapper.querySelector('.' + PRESETS);
                    presets.style.height = this.popupWrapper.querySelector('.' + RANGECONTAINER).getBoundingClientRect().height + 'px';
                }
            }
            this.popupWrapper.appendChild(footerSection);
            if (this.isMobile) {
                this.deviceHeaderUpdate();
            }
            this.renderPopup();
        };
        DateRangePicker.prototype.cancelFunction = function (eve) {
            if (document.activeElement !== this.inputElement) {
                this.preventFocus = true;
                if (!this.isMobile) {
                    this.inputElement.focus();
                    ej2_base_3.addClass([this.inputWrapper.container], [INPUTFOCUS]);
                }
            }
            eve.preventDefault();
            if (!this.isMobile && this.isKeyPopup) {
                this.inputElement.focus();
                this.isKeyPopup = false;
            }
            this.setProperties({ startDate: null }, true);
            this.setProperties({ endDate: null }, true);
            this.hide(eve ? eve : null);
        };
        DateRangePicker.prototype.deviceHeaderUpdate = function () {
            if (ej2_base_4.isNullOrUndefined(this.startDate) && ej2_base_4.isNullOrUndefined(this.endDate)) {
                this.endButton.element.setAttribute('disabled', '');
                this.startButton.element.classList.add(ACTIVE);
            }
            else if (!ej2_base_4.isNullOrUndefined(this.startDate)) {
                this.startButton.element.classList.add(ACTIVE);
            }
        };
        DateRangePicker.prototype.applyFunction = function (eve) {
            if (document.activeElement !== this.inputElement) {
                this.preventFocus = true;
                if (!this.isMobile) {
                    this.inputElement.focus();
                    ej2_base_3.addClass([this.inputWrapper.container], [INPUTFOCUS]);
                }
            }
            eve.preventDefault();
            if (!ej2_base_4.isNullOrUndefined(this.startDate) && !ej2_base_4.isNullOrUndefined(this.endDate)) {
                this.previousStartValue = new Date(+this.startDate);
                this.previousEndValue = new Date(+this.endDate);
                this.previousEleValue = this.inputElement.value;
                ej2_inputs_1.Input.setValue(this.rangeArgs(eve).text, this.inputElement, this.floatLabelType, this.showClearButton);
                this.changeTrigger(eve);
                this.hide(eve ? eve : null);
                this.errorClass();
            }
            else {
                this.hide(eve ? eve : null);
            }
            if (!this.isMobile) {
                this.isKeyPopup = false;
                if (this.isRangeIconClicked) {
                    this.inputWrapper.container.children[1].focus();
                    this.popupKeyboardModule = new ej2_base_2.KeyboardEvents(this.inputWrapper.container.children[1], {
                        eventName: 'keydown',
                        keyAction: this.popupKeyActionHandle.bind(this),
                        keyConfigs: this.keyInputConfigs
                    });
                }
            }
        };
        DateRangePicker.prototype.onMouseClick = function (event, item) {
            var target = item || event.target;
            var li = ej2_base_3.closest(target, '.' + LISTCLASS);
            var isClick = li && li.classList.contains(ACTIVE);
            if (li && li.classList.contains(LISTCLASS)) {
                this.setListSelection(li, event);
            }
            if (!this.isMobile) {
                this.preventFocus = true;
                if (li && li.classList.contains(LISTCLASS) && li.getAttribute('id') === 'custom_range') {
                    this.leftCalendar.children[1].firstElementChild.focus();
                }
                else {
                    if (!isClick && event.type === 'keydown') {
                        this.inputElement.focus();
                    }
                }
            }
        };
        DateRangePicker.prototype.onMouseOver = function (event) {
            var li = ej2_base_3.closest(event.target, '.' + LISTCLASS);
            if (li && li.classList.contains(LISTCLASS) && !li.classList.contains(HOVER)) {
                ej2_base_3.addClass([li], HOVER);
            }
        };
        DateRangePicker.prototype.onMouseLeave = function (event) {
            var item = ej2_base_3.closest(event.target, '.' + HOVER);
            if (!ej2_base_4.isNullOrUndefined(item)) {
                ej2_base_3.removeClass([item], HOVER);
            }
        };
        DateRangePicker.prototype.setListSelection = function (li, event) {
            if (li && (!li.classList.contains(ACTIVE) || (this.isMobile && li.classList.contains(ACTIVE)))) {
                if (this.isMobile && li.classList.contains(ACTIVE)) {
                    this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);
                    var values_1 = this.presetsItem[this.activeIndex];
                    if (values_1.id === 'custom_range') {
                        this.renderCustomPopup();
                        return;
                    }
                    return;
                }
                this.removeListSelection();
                this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);
                ej2_base_3.addClass([li], ACTIVE);
                li.setAttribute('aria-selected', 'true');
                var values = this.presetsItem[this.activeIndex];
                if (values.id === 'custom_range') {
                    this.renderCustomPopup();
                }
                else {
                    this.applyPresetRange(values);
                }
            }
        };
        DateRangePicker.prototype.removeListSelection = function () {
            var item = this.presetElement.querySelector('.' + ACTIVE);
            if (!ej2_base_4.isNullOrUndefined(item)) {
                ej2_base_3.removeClass([item], ACTIVE);
                item.removeAttribute('aria-selected');
            }
        };
        DateRangePicker.prototype.setValue = function () {
            if (ej2_base_4.isNullOrUndefined(this.startDate) && ej2_base_4.isNullOrUndefined(this.endDate)) {
                this.setProperties({ value: null }, true);
            }
            else {
                this.setProperties({ value: [this.startDate, this.endDate] }, true);
            }
        };
        DateRangePicker.prototype.applyPresetRange = function (values) {
            this.hide(null);
            this.presetsItem[this.presetsItem.length - 1].start = null;
            this.presetsItem[this.presetsItem.length - 1].end = null;
            this.setProperties({ startDate: values.start }, true);
            this.setProperties({ endDate: values.end }, true);
            this.setValue();
            this.refreshControl();
            this.trigger('select', this.rangeArgs(null));
            this.changeTrigger();
            this.previousEleValue = this.inputElement.value;
            this.isCustomRange = false;
            this.leftCalendar = this.rightCalendar = null;
            if (this.isKeyPopup) {
                this.isRangeIconClicked = false;
                this.inputElement.focus();
            }
        };
        DateRangePicker.prototype.renderCustomPopup = function () {
            this.isCustomWindow = true;
            this.popupObj.hide();
            this.popupWrapper = ej2_base_3.createElement('div', { id: this.element.id + '_popup', className: ROOT + ' ' + POPUP });
            this.renderControl();
            this.isCustomRange = true;
            if (!this.isMobile) {
                this.calendarFocus();
            }
        };
        DateRangePicker.prototype.listRippleEffect = function () {
            for (var _i = 0, _a = this.liCollections; _i < _a.length; _i++) {
                var li = _a[_i];
                ej2_base_4.rippleEffect(li);
            }
        };
        DateRangePicker.prototype.createPresets = function () {
            if (!ej2_base_4.isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
                this.presetElement = ej2_base_3.createElement('div', { className: PRESETS, attrs: { 'tabindex': '0' } });
                var listTag = ej2_lists_1.ListBase.createList(this.presetsItem, null, true);
                ej2_base_3.attributes(listTag, { 'role': 'listbox', 'aria-hidden': 'false', 'id': this.element.id + '_options' });
                this.presetElement.appendChild(listTag);
                this.popupWrapper.appendChild(this.presetElement);
                this.liCollections = this.presetElement.querySelectorAll('.' + LISTCLASS);
                this.wireListEvents();
                if (this.isMobile) {
                    this.presetElement.style.width = this.inputWrapper.container.getBoundingClientRect().width + 'px';
                }
                if (!ej2_base_4.isNullOrUndefined(this.activeIndex) && this.activeIndex > -1) {
                    ej2_base_3.addClass([this.liCollections[this.activeIndex]], ACTIVE);
                }
            }
        };
        DateRangePicker.prototype.wireListEvents = function () {
            ej2_base_1.EventHandler.add(this.presetElement, 'click', this.onMouseClick, this);
            if (!this.isMobile) {
                ej2_base_1.EventHandler.add(this.presetElement, 'mouseover', this.onMouseOver, this);
                ej2_base_1.EventHandler.add(this.presetElement, 'mouseout', this.onMouseLeave, this);
            }
        };
        DateRangePicker.prototype.unWireListEvents = function () {
            if (!ej2_base_4.isNullOrUndefined(this.presetElement)) {
                ej2_base_1.EventHandler.remove(this.presetElement, 'click', this.onMouseClick);
                if (!this.isMobile) {
                    ej2_base_1.EventHandler.remove(this.presetElement, 'mouseover', this.onMouseOver);
                    ej2_base_1.EventHandler.remove(this.presetElement, 'mouseout', this.onMouseLeave);
                }
            }
        };
        DateRangePicker.prototype.renderPopup = function () {
            var _this = this;
            this.popupWrapper.classList.add('e-control');
            var popupWidth = this.popupWrapper.getBoundingClientRect().width;
            if (!ej2_base_4.isNullOrUndefined(this.cssClass) && this.cssClass.trim() !== '') {
                this.popupWrapper.classList.add(this.cssClass);
            }
            if (this.isMobile && this.isCustomWindow) {
                this.modal = ej2_base_3.createElement('div');
                document.body.appendChild(this.modal);
            }
            this.popupObj = new ej2_popups_1.Popup(this.popupWrapper, {
                relateTo: this.isMobile && this.isCustomWindow ? document.body :
                    (!ej2_base_4.isNullOrUndefined(this.targetElement) ? this.targetElement : this.inputWrapper.container),
                position: (this.isMobile ?
                    (!ej2_base_4.isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && !this.isCustomWindow ?
                        { X: 'left', Y: 'bottom' } : { X: 'center', Y: 'center' }) :
                    this.enableRtl ? { X: 'left', Y: 'bottom' } : { X: 'right', Y: 'bottom' }),
                offsetX: this.isMobile || this.enableRtl ? 0 : -popupWidth,
                offsetY: OFFSETVALUE,
                collision: this.isMobile ?
                    (!ej2_base_4.isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && !this.isCustomWindow ?
                        { X: 'fit' } : { X: 'fit', Y: 'fit' }) : { X: 'fit' },
                targetType: this.isMobile && this.isCustomWindow ? 'container' : 'relative',
                enableRtl: this.enableRtl,
                zIndex: this.zIndex,
                open: function () {
                    ej2_base_3.attributes(_this.inputElement, { 'aria-expanded': 'true' });
                    ej2_base_3.addClass([_this.inputWrapper.buttons[0]], ACTIVE);
                    if (!_this.isMobile) {
                        if (_this.cancelButton) {
                            _this.btnKeyboardModule = new ej2_base_2.KeyboardEvents(_this.cancelButton.element, {
                                eventName: 'keydown',
                                keyAction: _this.hide.bind(_this),
                                keyConfigs: { tab: 'tab' }
                            });
                        }
                        if (!ej2_base_4.isNullOrUndefined(_this.leftCalendar)) {
                            if (!_this.isRangeIconClicked) {
                                _this.calendarFocus();
                            }
                        }
                        if (!ej2_base_4.isNullOrUndefined(_this.presetElement)) {
                            _this.presetKeyboardModule = new ej2_base_2.KeyboardEvents(_this.presetElement, {
                                eventName: 'keydown',
                                keyAction: _this.presetKeyActionHandler.bind(_this),
                                keyConfigs: _this.presetKeyConfig
                            });
                            if (ej2_base_4.isNullOrUndefined(_this.leftCalendar)) {
                                _this.preventBlur = true;
                                _this.presetElement.focus();
                            }
                            else {
                                _this.presetElement.setAttribute('tabindex', '-1');
                            }
                        }
                        _this.popupKeyBoardHandler();
                    }
                    if (_this.isMobile && !ej2_base_2.Browser.isDevice) {
                        ej2_base_1.EventHandler.add(document, 'keydown', _this.popupCloseHandler, _this);
                    }
                },
                close: function () {
                    ej2_base_3.attributes(_this.inputElement, { 'aria-expanded': 'false' });
                    ej2_base_3.removeClass([_this.inputWrapper.buttons[0]], ACTIVE);
                    if (!_this.isMobile) {
                        if (_this.isRangeIconClicked) {
                            _this.inputWrapper.container.children[1].focus();
                        }
                    }
                    if (!ej2_base_4.isUndefined(_this.presets[0].start && _this.presets[0].end && _this.presets[0].label)) {
                        _this.unWireListEvents();
                    }
                    if (!ej2_base_4.isNullOrUndefined(_this.popupObj)) {
                        ej2_base_3.remove(_this.popupObj.element);
                        _this.popupObj.destroy();
                        _this.popupObj = null;
                    }
                    if (_this.isMobile && !ej2_base_2.Browser.isDevice) {
                        ej2_base_1.EventHandler.remove(document, 'keydown', _this.popupCloseHandler);
                    }
                }
            });
            document.body.appendChild(this.popupObj.element);
            if (this.isMobile) {
                this.popupObj.element.classList.add(DEVICE);
                if (!this.isMobile) {
                    this.popupObj.element.classList.add('e-bigger');
                }
            }
            if (this.isMobile && this.isCustomWindow) {
                ej2_base_3.addClass([this.modal], [DEVICE, ROOT, 'e-range-modal']);
                document.body.className += ' ' + OVERFLOW;
                this.modal.style.display = 'block';
            }
            this.presetHeight();
            if (!(this.isMobile || this.enableRtl)) {
                this.popupObj.offsetX = -this.popupWrapper.getBoundingClientRect().width;
            }
            this.popupObj.refreshPosition(this.inputElement);
            this.popupObj.show();
            ej2_base_1.EventHandler.add(document, 'mousedown touchstart', this.documentHandler, this);
        };
        DateRangePicker.prototype.popupCloseHandler = function (e) {
            switch (e.keyCode) {
                case 27:
                    this.hide(e);
                    break;
            }
        };
        DateRangePicker.prototype.calendarFocus = function () {
            var startDate = this.popupObj && this.popupObj.element.querySelector('.' + STARTDATE);
            if (startDate) {
                var ele = ej2_base_3.closest(startDate, '.' + RIGHTCALENDER);
                ele = ej2_base_4.isNullOrUndefined(ele) ? this.leftCalendar : ele;
                if (this.isRangeIconClicked) {
                    this.inputWrapper.container.focus();
                }
                else {
                    this.preventBlur = true;
                    ele.children[1].firstElementChild.focus();
                }
                ej2_base_3.addClass([startDate], FOCUSDATE);
            }
            else {
                if (this.isRangeIconClicked) {
                    this.inputWrapper.container.focus();
                }
                else {
                    this.preventBlur = true;
                    this.leftCalendar.children[1].firstElementChild.focus();
                }
            }
        };
        DateRangePicker.prototype.presetHeight = function () {
            var presets = this.popupObj && this.popupObj.element.querySelector('.' + PRESETS);
            var rangeContainer = this.popupObj && this.popupObj.element.querySelector('.' + RANGECONTAINER);
            if (!ej2_base_4.isNullOrUndefined(presets) && !ej2_base_4.isNullOrUndefined(rangeContainer)) {
                presets.style.height = rangeContainer.getBoundingClientRect().height + 'px';
            }
        };
        DateRangePicker.prototype.presetKeyActionHandler = function (e) {
            switch (e.action) {
                case 'moveDown':
                    this.listMoveDown(e);
                    this.setScrollPosition();
                    e.preventDefault();
                    break;
                case 'moveUp':
                    this.listMoveUp(e);
                    this.setScrollPosition();
                    e.preventDefault();
                    break;
                case 'enter':
                    var hvrItem = this.getHoverLI();
                    var actItem = this.getActiveLI();
                    if (!ej2_base_4.isNullOrUndefined(this.leftCalendar) && !ej2_base_4.isNullOrUndefined(actItem)) {
                        if (ej2_base_4.isNullOrUndefined(hvrItem) || (!ej2_base_4.isNullOrUndefined(actItem) && actItem === hvrItem)) {
                            this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(actItem);
                            var values = this.presetsItem[this.activeIndex];
                            if (values.id === 'custom_range') {
                                this.calendarFocus();
                                actItem.classList.remove(HOVER);
                                e.preventDefault();
                                return;
                            }
                        }
                    }
                    if (!ej2_base_4.isNullOrUndefined(hvrItem) || !ej2_base_4.isNullOrUndefined(actItem)) {
                        this.onMouseClick(e, hvrItem || actItem);
                    }
                    e.preventDefault();
                    break;
                case 'tab':
                    if (this.leftCalendar) {
                        var item = this.getHoverLI();
                        if (!ej2_base_4.isNullOrUndefined(item)) {
                            item.classList.remove(HOVER);
                        }
                    }
                    else {
                        this.hide(e);
                        e.preventDefault();
                    }
                    break;
            }
        };
        DateRangePicker.prototype.listMoveDown = function (e) {
            var hvrItem = this.getHoverLI();
            var actItem = this.getActiveLI();
            if (!ej2_base_4.isNullOrUndefined(hvrItem)) {
                var li = hvrItem.nextElementSibling;
                if (!ej2_base_4.isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
                    ej2_base_3.removeClass([hvrItem], HOVER);
                    ej2_base_3.addClass([li], HOVER);
                }
            }
            else if (!ej2_base_4.isNullOrUndefined(actItem)) {
                var li = actItem.nextElementSibling;
                if (!ej2_base_4.isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
                    ej2_base_3.addClass([li], HOVER);
                }
            }
            else {
                ej2_base_3.addClass([this.liCollections[0]], HOVER);
            }
        };
        DateRangePicker.prototype.listMoveUp = function (e) {
            var hvrItem = this.getHoverLI();
            var actItem = this.getActiveLI();
            if (!ej2_base_4.isNullOrUndefined(hvrItem)) {
                var li = hvrItem.previousElementSibling;
                if (!ej2_base_4.isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
                    ej2_base_3.removeClass([hvrItem], HOVER);
                    ej2_base_3.addClass([li], HOVER);
                }
            }
            else if (!ej2_base_4.isNullOrUndefined(actItem)) {
                var li = actItem.previousElementSibling;
                if (!ej2_base_4.isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
                    ej2_base_3.addClass([li], HOVER);
                }
            }
        };
        DateRangePicker.prototype.getHoverLI = function () {
            var item = this.presetElement.querySelector('.' + HOVER);
            return item;
        };
        DateRangePicker.prototype.getActiveLI = function () {
            var item = this.presetElement.querySelector('.' + ACTIVE);
            return item;
        };
        DateRangePicker.prototype.popupKeyBoardHandler = function () {
            this.popupKeyboardModule = new ej2_base_2.KeyboardEvents(this.popupWrapper, {
                eventName: 'keydown',
                keyAction: this.popupKeyActionHandle.bind(this),
                keyConfigs: { escape: 'escape' }
            });
            this.popupKeyboardModule = new ej2_base_2.KeyboardEvents(this.inputWrapper.container.children[1], {
                eventName: 'keydown',
                keyAction: this.popupKeyActionHandle.bind(this),
                keyConfigs: this.keyInputConfigs
            });
        };
        DateRangePicker.prototype.setScrollPosition = function () {
            var listHeight = this.presetElement.getBoundingClientRect().height;
            var hover = this.presetElement.querySelector('.' + HOVER);
            var active = this.presetElement.querySelector('.' + ACTIVE);
            var element = !ej2_base_4.isNullOrUndefined(hover) ? hover : active;
            if (!ej2_base_4.isNullOrUndefined(element)) {
                var nextEle = element.nextElementSibling;
                var height = nextEle ? nextEle.offsetTop : element.offsetTop;
                var liHeight = element.getBoundingClientRect().height;
                if ((height + element.offsetTop) > listHeight) {
                    this.presetElement.scrollTop = nextEle ? (height - (listHeight / 2 + liHeight / 2)) : height;
                }
                else {
                    this.presetElement.scrollTop = 0;
                }
            }
        };
        DateRangePicker.prototype.popupKeyActionHandle = function (e) {
            switch (e.action) {
                case 'escape':
                    if (this.isPopupOpen()) {
                        if (this.isKeyPopup) {
                            this.inputElement.focus();
                            this.isKeyPopup = false;
                        }
                        this.hide(e);
                    }
                    else {
                        this.inputWrapper.container.children[1].blur();
                    }
                    break;
                case 'enter':
                    if (!this.isPopupOpen()) {
                        this.show(null, e);
                    }
                    else {
                        this.inputWrapper.container.children[1].focus();
                    }
                    break;
                case 'tab':
                    this.hide(e);
            }
        };
        DateRangePicker.prototype.documentHandler = function (e) {
            if (ej2_base_4.isNullOrUndefined(this.popupObj)) {
                return;
            }
            var target = e.target;
            if (!this.inputWrapper.container.contains(target) ||
                (!ej2_base_4.isNullOrUndefined(this.popupObj) && !ej2_base_3.closest(target, this.popupWrapper.id))) {
                e.preventDefault();
            }
            if ((ej2_base_4.isNullOrUndefined(this.targetElement) ||
                (!ej2_base_4.isNullOrUndefined(this.targetElement) && !(target === this.targetElement))) &&
                !(ej2_base_3.closest(target, '#' + this.popupObj.element.id))
                && !(ej2_base_3.closest(target, '.' + INPUTCONTAINER) === this.inputWrapper.container)
                && !(ej2_base_3.closest(target, '.e-daterangepicker.e-popup') && (!target.classList.contains('e-day')))) {
                this.preventBlur = false;
                if (this.isPopupOpen()) {
                    if (!this.isMobile) {
                        this.isRangeIconClicked = false;
                    }
                    this.applyFunction(e);
                    if (ej2_base_4.isNullOrUndefined(this.startDate) || ej2_base_4.isNullOrUndefined(this.endDate)) {
                        this.clear();
                        this.clearRange();
                    }
                }
            }
        };
        DateRangePicker.prototype.createInput = function () {
            this.inputWrapper = ej2_inputs_1.Input.createInput({
                floatLabelType: this.floatLabelType,
                element: this.inputElement,
                properties: {
                    readonly: this.readonly,
                    placeholder: this.placeholder,
                    cssClass: this.cssClass,
                    enabled: this.enabled,
                    enableRtl: this.enableRtl,
                    showClearButton: this.showClearButton,
                },
                buttons: [DATERANGEICON]
            });
            ej2_base_3.attributes(this.inputElement, {
                'aria-readonly': this.readonly ? 'true' : 'false', 'tabindex': '1', 'aria-haspopup': 'true',
                'aria-activedescendant': 'null', 'aria-owns': this.element.id + '_popup', 'aria-expanded': 'false',
                'role': 'daterangepicker', 'autocomplete': 'off', 'aria-disabled': !this.enabled ? 'true' : 'false',
                'autocorrect': 'off', 'autocapitalize': 'off', 'spellcheck': 'false'
            });
            ej2_inputs_1.Input.addAttributes({ 'aria-label': 'select' }, this.inputWrapper.buttons[0]);
            if (!ej2_base_4.isNullOrUndefined(this.placeholder) && this.placeholder.trim() !== '') {
                ej2_inputs_1.Input.addAttributes({ 'aria-placeholder': this.placeholder }, this.inputElement);
            }
            this.setEleWidth(this.width);
            ej2_base_3.addClass([this.inputWrapper.container], DATERANGEWRAPPER);
            if (ej2_base_4.isNullOrUndefined(this.element.getAttribute('name'))) {
                ej2_base_3.attributes(this.inputElement, { 'name': this.element.id });
            }
            if (this.inputElement.type === 'hidden') {
                this.inputWrapper.container.style.display = 'none';
            }
            this.refreshControl();
            this.previousEleValue = this.inputElement.value;
        };
        DateRangePicker.prototype.setEleWidth = function (width) {
            if (typeof width === 'string') {
                this.inputWrapper.container.style.width = (this.width);
            }
            else if (typeof width === 'number') {
                this.inputWrapper.container.style.width = ej2_base_4.formatUnit(this.width);
            }
            else {
                this.inputWrapper.container.style.width = '100%';
            }
        };
        DateRangePicker.prototype.refreshControl = function () {
            this.validateMinMax();
            if (this.strictMode) {
                this.validateRangeStrict();
            }
            var isDisabled = this.disabledDates();
            if (this.strictMode && (isDisabled)) {
                this.setProperties({ startDate: this.previousStartValue }, true);
                this.setProperties({ endDate: this.previousEndValue }, true);
                this.setValue();
            }
            this.updateInput();
            if (!this.strictMode) {
                this.validateRange();
            }
            if (!this.strictMode && (isDisabled)) {
                this.clearRange();
            }
            if (!ej2_base_4.isNullOrUndefined(this.endDate) && !ej2_base_4.isNullOrUndefined(this.startDate) && !isDisabled) {
                this.disabledDateRender();
            }
            this.errorClass();
            this.previousStartValue = ej2_base_4.isNullOrUndefined(this.startDate) || isNaN(+this.startDate) ? null : new Date(+this.startDate);
            this.previousEndValue = ej2_base_4.isNullOrUndefined(this.endDate) || isNaN(+this.endDate) ? null : new Date(+this.endDate);
        };
        DateRangePicker.prototype.updateInput = function () {
            if (!ej2_base_4.isNullOrUndefined(this.endDate) && !ej2_base_4.isNullOrUndefined(this.startDate)) {
                var startDate = this.globalize.formatDate(this.startDate, { format: this.format, type: 'date', skeleton: 'yMd' });
                var endDate = this.globalize.formatDate(this.endDate, { format: this.format, type: 'date', skeleton: 'yMd' });
                ej2_inputs_1.Input.setValue(startDate + ' ' + this.separator + ' ' + endDate, this.inputElement, this.floatLabelType, this.showClearButton);
                this.previousStartValue = new Date(+this.startDate);
                this.previousEndValue = new Date(+this.endDate);
            }
        };
        DateRangePicker.prototype.isDateDisabled = function (date) {
            var value = new Date(+date);
            if (+value < +this.min || +value > +this.max) {
                return true;
            }
            this.virtualRenderCellArgs = {
                date: value,
                isDisabled: false,
            };
            var args = this.virtualRenderCellArgs;
            this.virtualRenderCellEvent(args);
            if (args.isDisabled) {
                return true;
            }
            return false;
        };
        DateRangePicker.prototype.disabledDateRender = function () {
            this.disabledDays = [];
            this.disabledDayCnt = null;
            var localDate = new Date(+this.startDate);
            var count = 0;
            while (+localDate <= +this.endDate) {
                this.virtualRenderCellArgs = {
                    date: localDate,
                    isDisabled: false,
                };
                var args = this.virtualRenderCellArgs;
                this.virtualRenderCellEvent(args);
                if (args.isDisabled) {
                    this.disabledDays.push(new Date(+args.date));
                    if (+localDate > +this.startDate && +localDate < +this.endDate) {
                        count++;
                    }
                }
                this.addDay(localDate, 1, null, this.max, this.min);
            }
            this.disabledDayCnt = count;
        };
        DateRangePicker.prototype.virtualRenderCellEvent = function (args) {
            ej2_base_4.extend(this.virtualRenderCellArgs, { name: 'renderDayCell' });
            this.trigger('renderDayCell', args);
        };
        DateRangePicker.prototype.disabledDates = function () {
            var isStartDisabled = false;
            var isEndDisabled = false;
            if (!ej2_base_4.isNullOrUndefined(this.endDate) && !ej2_base_4.isNullOrUndefined(this.startDate)) {
                this.setProperties({ value: null }, true);
                isStartDisabled = this.isDateDisabled(this.startDate);
                isEndDisabled = this.isDateDisabled(this.endDate);
                this.currentDate = null;
                this.setProperties({ value: null }, true);
                this.setValue();
            }
            return (isStartDisabled || isEndDisabled);
        };
        DateRangePicker.prototype.changeTrigger = function (e) {
            if (this.previousEleValue !== this.inputElement.value) {
                if (+this.initStartDate !== +this.startDate || +this.initEndDate !== +this.endDate) {
                    this.trigger('change', this.rangeArgs(e));
                }
            }
            this.previousEleValue = this.inputElement.value;
            this.initStartDate = this.checkDateValue(this.startDate);
            this.initEndDate = this.checkDateValue(this.endDate);
        };
        DateRangePicker.prototype.navigateTo = function (view, value) {
            _super.prototype.navigateTo.call(this, view, value);
        };
        DateRangePicker.prototype.focusIn = function () {
            if (document.activeElement !== this.inputElement && this.enabled) {
                ej2_base_3.addClass([this.inputWrapper.container], [INPUTFOCUS]);
                this.inputElement.focus();
                var focusArguments = {
                    model: this
                };
                this.trigger('focus', focusArguments);
            }
        };
        DateRangePicker.prototype.focusOut = function () {
            var isBlur = this.preventBlur;
            if (document.activeElement === this.inputElement) {
                ej2_base_3.removeClass([this.inputWrapper.container], [INPUTFOCUS]);
                this.preventBlur = false;
                this.inputElement.blur();
                this.preventBlur = isBlur;
            }
        };
        DateRangePicker.prototype.destroy = function () {
            this.hide(null);
            var ariaAttrs = {
                'aria-readonly': this.readonly ? 'true' : 'false', 'tabindex': '1', 'aria-haspopup': 'true',
                'aria-activedescendant': 'null', 'aria-owns': this.element.id + '_popup', 'aria-expanded': 'false',
                'role': 'daterangepicker', 'autocomplete': 'off', 'aria-disabled': !this.enabled ? 'true' : 'false',
                'autocorrect': 'off', 'autocapitalize': 'off', 'aria-invalid': 'false', 'spellcheck': 'false'
            };
            if (this.inputElement) {
                ej2_base_3.removeClass([this.inputElement], [ROOT]);
                ej2_base_1.EventHandler.remove(this.inputElement, 'blur', this.inputBlurHandler);
                ej2_inputs_1.Input.removeAttributes(ariaAttrs, this.inputElement);
                this.ensureInputAttribute();
                this.inputElement.classList.remove('e-input');
                if (!ej2_base_4.isNullOrUndefined(this.inputWrapper)) {
                    ej2_base_1.EventHandler.remove(this.inputWrapper.buttons[0], 'click', this.rangeIconHandler);
                    if (this.angularTag === null) {
                        this.inputWrapper.container.parentElement.appendChild(this.inputElement);
                    }
                    ej2_base_1.detach(this.inputWrapper.container);
                }
            }
            if (!ej2_base_4.isNullOrUndefined(this.inputKeyboardModule) && !this.isMobile) {
                this.inputKeyboardModule.destroy();
            }
            if (this.popupObj) {
                if (!this.isMobile) {
                    this.clearCalendarEvents();
                }
            }
            _super.prototype.destroy.call(this);
            this.inputWrapper = this.popupWrapper = this.popupObj = this.cloneElement = this.presetElement = null;
        };
        DateRangePicker.prototype.ensureInputAttribute = function () {
            for (var attr = 0; attr < this.inputElement.attributes.length; attr++) {
                var prop = this.inputElement.attributes[attr].name;
                if (ej2_base_4.isNullOrUndefined(this.cloneElement.getAttribute(prop))) {
                    if (prop.toLowerCase() === 'value' || ej2_base_4.isNullOrUndefined(this.cloneElement.getAttribute('value'))) {
                        this.inputElement.value = '';
                    }
                    this.inputElement.removeAttribute(prop);
                }
            }
        };
        DateRangePicker.prototype.getModuleName = function () {
            return 'daterangepicker';
        };
        DateRangePicker.prototype.getPersistData = function () {
            var keyEntity = ['startDate', 'endDate', 'value'];
            return this.addOnPersist(keyEntity);
        };
        DateRangePicker.prototype.getSelectedRange = function () {
            var range;
            if (!ej2_base_4.isNullOrUndefined(this.startDate) && !ej2_base_4.isNullOrUndefined(this.endDate)) {
                range = (Math.round(Math.abs((this.startDate.getTime() - this.endDate.getTime()) / (1000 * 60 * 60 * 24))) + 1);
                this.disabledDateRender();
                if (!ej2_base_4.isNullOrUndefined(this.disabledDayCnt)) {
                    range = range - this.disabledDayCnt;
                    this.disabledDayCnt = null;
                }
            }
            else {
                range = 0;
            }
            return { startDate: this.startDate, endDate: this.endDate, daySpan: range };
        };
        DateRangePicker.prototype.show = function (element, event) {
            if ((this.enabled && this.readonly) || !this.enabled || this.popupObj) {
                return;
            }
            else {
                if (!this.isPopupOpen()) {
                    if (element) {
                        this.targetElement = element;
                    }
                    var args = {
                        popup: this.popupObj || null,
                        cancel: false,
                        date: this.inputElement.value,
                        model: this,
                        event: event ? event : null
                    };
                    this.trigger('open', args);
                    if (!args.cancel) {
                        this.createPopup();
                        var isPreset = (!this.isCustomRange || (this.isMobile && this.isCustomRange));
                        if (!ej2_base_4.isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && isPreset) {
                            this.setScrollPosition();
                        }
                    }
                }
            }
        };
        DateRangePicker.prototype.hide = function (event) {
            if (this.popupObj) {
                if (ej2_base_4.isNullOrUndefined(this.previousEndValue) && ej2_base_4.isNullOrUndefined(this.previousStartValue)) {
                    this.clearRange();
                }
                else {
                    if (!ej2_base_4.isNullOrUndefined(this.previousStartValue)) {
                        this.setProperties({ startDate: new Date('' + this.previousStartValue) }, true);
                        this.setValue();
                        this.currentDate = new Date('' + this.startDate);
                    }
                    else {
                        this.setProperties({ startDate: null }, true);
                        this.setValue();
                    }
                    if (!ej2_base_4.isNullOrUndefined(this.previousEndValue)) {
                        this.setProperties({ endDate: new Date('' + this.previousEndValue) }, true);
                        this.setValue();
                    }
                    else {
                        this.setProperties({ endDate: null }, true);
                        this.setValue();
                    }
                }
                if (this.isPopupOpen()) {
                    var args = {
                        cancel: false,
                        popup: this.popupObj,
                        date: this.inputElement.value,
                        model: this,
                        event: event ? event : null
                    };
                    this.trigger('close', args);
                    if (!args.cancel) {
                        if (this.isMobile) {
                            if (!ej2_base_4.isNullOrUndefined(this.startButton) && !ej2_base_4.isNullOrUndefined(this.endButton)) {
                                ej2_base_1.EventHandler.remove(this.startButton.element, 'click', this.deviceHeaderClick);
                                ej2_base_1.EventHandler.remove(this.endButton.element, 'click', this.deviceHeaderClick);
                            }
                        }
                        if (this.popupObj) {
                            this.popupObj.hide();
                        }
                        if (!this.isMobile) {
                            if (!ej2_base_4.isNullOrUndefined(this.leftKeyboardModule) && !ej2_base_4.isNullOrUndefined(this.rightKeyboardModule)) {
                                this.leftKeyboardModule.destroy();
                                this.rightKeyboardModule.destroy();
                            }
                            if (!ej2_base_4.isNullOrUndefined(this.presetElement)) {
                                this.presetKeyboardModule.destroy();
                            }
                            if (!ej2_base_4.isNullOrUndefined(this.cancelButton)) {
                                this.btnKeyboardModule.destroy();
                            }
                        }
                        this.targetElement = null;
                        ej2_base_3.removeClass([document.body], OVERFLOW);
                        ej2_base_1.EventHandler.remove(document, 'mousedown touchstart', this.documentHandler);
                        if (this.isMobile && this.modal) {
                            this.modal.style.display = 'none';
                            this.modal.outerHTML = '';
                            this.modal = null;
                        }
                        this.isKeyPopup = this.dateDisabled = false;
                    }
                }
            }
        };
        DateRangePicker.prototype.setLocale = function () {
            this.globalize = new ej2_base_1.Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            this.setProperties({ placeholder: this.l10n.getConstant('placeholder') }, true);
            ej2_inputs_1.Input.setPlaceholder(this.placeholder, this.inputElement);
            this.updateInput();
            this.changeTrigger();
        };
        DateRangePicker.prototype.refreshChange = function () {
            this.refreshControl();
            this.changeTrigger();
        };
        DateRangePicker.prototype.setDate = function () {
            ej2_inputs_1.Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);
            this.refreshChange();
        };
        DateRangePicker.prototype.onPropertyChanged = function (newProp, oldProp) {
            var format = { format: this.format, type: 'date', skeleton: 'yMd' };
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                this.hide(null);
                switch (prop) {
                    case 'width':
                        this.setEleWidth(this.width);
                        break;
                    case 'separator':
                        this.previousEleValue = this.inputElement.value;
                        this.setProperties({ separator: newProp.separator }, true);
                        this.updateInput();
                        this.changeTrigger();
                        break;
                    case 'placeholder':
                        ej2_inputs_1.Input.setPlaceholder(newProp.placeholder, this.inputElement);
                        this.setProperties({ placeholder: newProp.placeholder }, true);
                        break;
                    case 'readonly':
                        ej2_inputs_1.Input.setReadonly(this.readonly, this.inputElement);
                        this.inputElement.setAttribute('aria-readonly', '' + this.readonly);
                        break;
                    case 'cssClass':
                        if (this.popupWrapper) {
                            ej2_base_3.addClass([this.popupWrapper], [newProp.cssClass]);
                        }
                        ej2_base_3.addClass([this.inputWrapper.container], [newProp.cssClass]);
                        this.setProperties({ cssClass: newProp.cssClass }, true);
                        break;
                    case 'enabled':
                        this.setProperties({ enabled: newProp.enabled }, true);
                        ej2_inputs_1.Input.setEnabled(this.enabled, this.inputElement);
                        this.bindEvents();
                        break;
                    case 'enableRtl':
                        this.setProperties({ enableRtl: newProp.enableRtl }, true);
                        ej2_inputs_1.Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
                        break;
                    case 'zIndex':
                        this.setProperties({ zIndex: newProp.zIndex }, true);
                        break;
                    case 'format':
                        this.setProperties({ format: newProp.format }, true);
                        this.updateInput();
                        this.changeTrigger();
                        break;
                    case 'locale':
                        this.setProperties({ locale: newProp.locale }, true);
                        this.setLocale();
                        break;
                    case 'showClearButton':
                        ej2_inputs_1.Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);
                        this.bindClearEvent();
                        break;
                    case 'startDate':
                        if (typeof newProp.startDate === 'string') {
                            newProp.startDate = this.globalize.parseDate(newProp.startDate, format);
                        }
                        this.setProperties({ startDate: newProp.startDate }, true);
                        this.setValue();
                        this.setDate();
                        break;
                    case 'endDate':
                        if (typeof newProp.endDate === 'string') {
                            newProp.endDate = this.globalize.parseDate(newProp.endDate, format);
                        }
                        this.setProperties({ endDate: this.checkDateValue(new Date('' + newProp.endDate)) }, true);
                        this.setValue();
                        this.setDate();
                        break;
                    case 'value':
                        this.setProperties({ value: newProp.value }, true);
                        if (ej2_base_4.isNullOrUndefined(this.value)) {
                            this.setProperties({ startDate: null }, true);
                            this.setProperties({ endDate: null }, true);
                            this.setProperties({ value: null }, true);
                        }
                        this.updateValue();
                        this.setValue();
                        this.setDate();
                        break;
                    case 'minDays':
                        this.setProperties({ minDays: newProp.minDays }, true);
                        this.refreshChange();
                        break;
                    case 'maxDays':
                        this.setProperties({ maxDays: newProp.maxDays }, true);
                        this.refreshChange();
                        break;
                    case 'min':
                        this.setProperties({ min: this.checkDateValue(new Date('' + newProp.min)) }, true);
                        this.previousEleValue = this.inputElement.value;
                        this.refreshChange();
                        break;
                    case 'max':
                        this.setProperties({ max: this.checkDateValue(new Date('' + newProp.max)) }, true);
                        this.refreshChange();
                        break;
                    case 'strictMode':
                        this.setProperties({ strictMode: newProp.strictMode }, true);
                        this.refreshChange();
                        break;
                    case 'presets':
                        this.setProperties({ presets: newProp.presets }, true);
                        this.processPresets();
                        break;
                    case 'floatLabelType':
                        this.floatLabelType = newProp.floatLabelType;
                        ej2_inputs_1.Input.removeFloating(this.inputWrapper);
                        ej2_inputs_1.Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
                        break;
                }
            }
        };
        __decorate([
            ej2_base_1.Property(null)
        ], DateRangePicker.prototype, "value", void 0);
        __decorate([
            ej2_base_1.Property(false)
        ], DateRangePicker.prototype, "enablePersistence", void 0);
        __decorate([
            ej2_base_1.Property(false)
        ], DateRangePicker.prototype, "enableRtl", void 0);
        __decorate([
            ej2_base_1.Property(new Date(1900, 0, 1))
        ], DateRangePicker.prototype, "min", void 0);
        __decorate([
            ej2_base_1.Property(new Date(2099, 11, 31))
        ], DateRangePicker.prototype, "max", void 0);
        __decorate([
            ej2_base_1.Property('en-US')
        ], DateRangePicker.prototype, "locale", void 0);
        __decorate([
            ej2_base_1.Property(0)
        ], DateRangePicker.prototype, "firstDayOfWeek", void 0);
        __decorate([
            ej2_base_1.Property(false)
        ], DateRangePicker.prototype, "weekNumber", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateRangePicker.prototype, "created", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateRangePicker.prototype, "destroyed", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateRangePicker.prototype, "change", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateRangePicker.prototype, "navigated", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateRangePicker.prototype, "renderDayCell", void 0);
        __decorate([
            ej2_base_1.Property(null)
        ], DateRangePicker.prototype, "startDate", void 0);
        __decorate([
            ej2_base_1.Property(null)
        ], DateRangePicker.prototype, "endDate", void 0);
        __decorate([
            ej2_base_3.Collection([{}], Presets)
        ], DateRangePicker.prototype, "presets", void 0);
        __decorate([
            ej2_base_1.Property('')
        ], DateRangePicker.prototype, "width", void 0);
        __decorate([
            ej2_base_1.Property(1000)
        ], DateRangePicker.prototype, "zIndex", void 0);
        __decorate([
            ej2_base_1.Property(true)
        ], DateRangePicker.prototype, "showClearButton", void 0);
        __decorate([
            ej2_base_1.Property(true)
        ], DateRangePicker.prototype, "showTodayButton", void 0);
        __decorate([
            ej2_base_1.Property('Month')
        ], DateRangePicker.prototype, "start", void 0);
        __decorate([
            ej2_base_1.Property('Month')
        ], DateRangePicker.prototype, "depth", void 0);
        __decorate([
            ej2_base_1.Property('')
        ], DateRangePicker.prototype, "cssClass", void 0);
        __decorate([
            ej2_base_1.Property('-')
        ], DateRangePicker.prototype, "separator", void 0);
        __decorate([
            ej2_base_1.Property(null)
        ], DateRangePicker.prototype, "minDays", void 0);
        __decorate([
            ej2_base_1.Property(null)
        ], DateRangePicker.prototype, "maxDays", void 0);
        __decorate([
            ej2_base_1.Property(false)
        ], DateRangePicker.prototype, "strictMode", void 0);
        __decorate([
            ej2_base_1.Property(null)
        ], DateRangePicker.prototype, "format", void 0);
        __decorate([
            ej2_base_1.Property(true)
        ], DateRangePicker.prototype, "enabled", void 0);
        __decorate([
            ej2_base_1.Property(false)
        ], DateRangePicker.prototype, "readonly", void 0);
        __decorate([
            ej2_base_1.Property('Never')
        ], DateRangePicker.prototype, "floatLabelType", void 0);
        __decorate([
            ej2_base_1.Property(null)
        ], DateRangePicker.prototype, "placeholder", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateRangePicker.prototype, "open", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateRangePicker.prototype, "close", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateRangePicker.prototype, "select", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateRangePicker.prototype, "focus", void 0);
        __decorate([
            ej2_base_2.Event()
        ], DateRangePicker.prototype, "blur", void 0);
        DateRangePicker = __decorate([
            ej2_base_1.NotifyPropertyChanges
        ], DateRangePicker);
        return DateRangePicker;
    }(calendar_1.CalendarBase));
    exports.DateRangePicker = DateRangePicker;
});
