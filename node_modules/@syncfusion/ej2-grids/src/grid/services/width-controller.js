define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "../base/constant", "../models/column"], function (require, exports, ej2_base_1, ej2_base_2, constant_1, column_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ColumnWidthService = (function () {
        function ColumnWidthService(parent) {
            this.parent = parent;
        }
        ColumnWidthService.prototype.setWidthToColumns = function () {
            var _this = this;
            var i = 0;
            var indexes = this.parent.getColumnIndexesInView();
            var wFlag = true;
            if (this.parent.allowGrouping) {
                for (var len = this.parent.groupSettings.columns.length; i < len; i++) {
                    if (this.parent.enableColumnVirtualization && indexes.indexOf(i) === -1) {
                        wFlag = false;
                        continue;
                    }
                    this.setColumnWidth(new column_1.Column({ width: '30px' }), i);
                }
            }
            if (this.parent.detailTemplate || this.parent.childGrid) {
                this.setColumnWidth(new column_1.Column({ width: '30px' }), i);
            }
            this.parent.getColumns().forEach(function (column, index) {
                _this.setColumnWidth(column, wFlag ? undefined : index);
            });
        };
        ColumnWidthService.prototype.setColumnWidth = function (column, index, module) {
            var columnIndex = ej2_base_1.isNullOrUndefined(index) ? this.parent.getNormalizedColumnIndex(column.uid) : index;
            var cWidth = this.getWidth(column);
            if (cWidth !== null) {
                this.setWidth(cWidth, columnIndex);
                if ((this.parent.allowResizing && module === 'resize') || (this.parent.getFrozenColumns() && this.parent.allowResizing)) {
                    this.setWidthToTable();
                }
                this.parent.notify(constant_1.columnWidthChanged, { index: columnIndex, width: cWidth, column: column, module: module });
            }
        };
        ColumnWidthService.prototype.setWidth = function (width, index) {
            var header = this.parent.getHeaderTable();
            var content = this.parent.getContentTable();
            var fWidth = ej2_base_2.formatUnit(width);
            var headerCol;
            var frzCols = this.parent.getFrozenColumns();
            var mHdr = this.parent.getHeaderContent().querySelector('.e-movableheader');
            if (frzCols && index >= frzCols && mHdr && mHdr.querySelector('colgroup')) {
                headerCol = mHdr.querySelector('colgroup').children[index - frzCols];
            }
            else {
                headerCol = header.querySelector('colgroup').children[index];
            }
            if (headerCol) {
                headerCol.style.width = fWidth;
            }
            var contentCol;
            if (frzCols && index >= frzCols) {
                contentCol = this.parent.getContent().querySelector('.e-movablecontent')
                    .querySelector('colgroup').children[index - frzCols];
            }
            else {
                contentCol = content.querySelector('colgroup').children[index];
            }
            if (contentCol) {
                contentCol.style.width = fWidth;
            }
            var edit = content.querySelector('.e-table.e-inline-edit');
            if (edit) {
                edit.querySelector('colgroup').children[index].style.width = fWidth;
            }
        };
        ColumnWidthService.prototype.getSiblingsHeight = function (element) {
            var previous = this.getHeightFromDirection(element, 'previous');
            var next = this.getHeightFromDirection(element, 'next');
            return previous + next;
        };
        ColumnWidthService.prototype.getHeightFromDirection = function (element, direction) {
            var sibling = element[direction + 'ElementSibling'];
            var result = 0;
            var classList = ['e-gridheader', 'e-gridfooter', 'e-groupdroparea', 'e-gridpager', 'e-toolbar'];
            while (sibling) {
                if (classList.some(function (value) { return sibling.classList.contains(value); })) {
                    result += sibling.offsetHeight;
                }
                sibling = sibling[direction + 'ElementSibling'];
            }
            return result;
        };
        ColumnWidthService.prototype.getWidth = function (column) {
            if (ej2_base_1.isNullOrUndefined(column.width) && this.parent.allowResizing) {
                column.width = 200;
            }
            if (!column.width) {
                return null;
            }
            var width = parseInt(column.width.toString(), 10);
            if (column.minWidth && width < parseInt(column.minWidth.toString(), 10)) {
                return column.minWidth;
            }
            else if ((column.maxWidth && width > parseInt(column.maxWidth.toString(), 10))) {
                return column.maxWidth;
            }
            else {
                return column.width;
            }
        };
        ColumnWidthService.prototype.getTableWidth = function (columns) {
            var tWidth = 0;
            for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                var column = columns_1[_i];
                var cWidth = this.getWidth(column);
                if (column.visible !== false && cWidth !== null) {
                    tWidth += parseInt(cWidth.toString(), 10);
                }
            }
            return tWidth;
        };
        ColumnWidthService.prototype.setWidthToFrozenTable = function () {
            var columns = this.parent.getColumns();
            columns.splice(this.parent.getFrozenColumns(), columns.length);
            var freezeWidth = ej2_base_2.formatUnit(this.getTableWidth(columns));
            this.parent.getHeaderTable().style.width = freezeWidth;
            this.parent.getContentTable().style.width = freezeWidth;
        };
        ColumnWidthService.prototype.setWidthToMovableTable = function () {
            var columns = this.parent.getColumns();
            columns.splice(0, this.parent.getFrozenColumns());
            var movableWidth = ej2_base_2.formatUnit(this.getTableWidth(columns));
            if (this.parent.getHeaderContent().querySelector('.e-movableheader').firstElementChild) {
                this.parent.getHeaderContent().querySelector('.e-movableheader').firstElementChild.style.width
                    = movableWidth;
            }
            this.parent.getContent().querySelector('.e-movablecontent').firstElementChild.style.width =
                movableWidth;
        };
        ColumnWidthService.prototype.setWidthToTable = function () {
            var tWidth = ej2_base_2.formatUnit(this.getTableWidth(this.parent.getColumns()));
            if (this.parent.getFrozenColumns()) {
                this.setWidthToFrozenTable();
                this.setWidthToMovableTable();
            }
            else {
                this.parent.getHeaderTable().style.width = tWidth;
                this.parent.getContentTable().style.width = tWidth;
            }
            var edit = this.parent.element.querySelector('.e-table.e-inline-edit');
            if (edit) {
                edit.style.width = tWidth;
            }
        };
        return ColumnWidthService;
    }());
    exports.ColumnWidthService = ColumnWidthService;
});
