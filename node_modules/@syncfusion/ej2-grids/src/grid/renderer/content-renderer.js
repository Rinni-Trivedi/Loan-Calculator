define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "../base/util", "../base/constant", "./row-renderer", "./cell-merge-renderer", "../services/row-model-generator", "../services/group-model-generator", "../base/util"], function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, util_1, events, row_renderer_1, cell_merge_renderer_1, row_model_generator_1, group_model_generator_1, util_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ContentRender = (function () {
        function ContentRender(parent, serviceLocator) {
            var _this = this;
            this.rows = [];
            this.freezeRows = [];
            this.movableRows = [];
            this.isLoaded = true;
            this.drop = function (e) {
                _this.parent.notify(events.columnDrop, { target: e.target, droppedElement: e.droppedElement });
                ej2_base_3.remove(e.droppedElement);
            };
            this.rafCallback = function (args) {
                var arg = args;
                return function () {
                    _this.ariaService.setBusy(_this.getPanel().firstChild, false);
                    if (_this.parent.isDestroyed) {
                        return;
                    }
                    var rows = _this.rows.slice(0);
                    if (_this.parent.getFrozenColumns() !== 0) {
                        rows = args.isFrozen ? _this.freezeRows : _this.movableRows;
                    }
                    _this.parent.notify(events.contentReady, { rows: rows, args: arg });
                    if (_this.isLoaded) {
                        _this.parent.trigger(events.dataBound, {});
                        if (_this.parent.allowTextWrap) {
                            _this.parent.notify(events.freezeRender, { case: 'textwrap' });
                        }
                    }
                    if (arg) {
                        var action = (arg.requestType || '').toLowerCase() + '-complete';
                        _this.parent.notify(action, arg);
                    }
                    _this.parent.hideSpinner();
                };
            };
            this.parent = parent;
            this.serviceLocator = serviceLocator;
            this.ariaService = this.serviceLocator.getService('ariaService');
            this.generator = this.getModelGenerator();
            if (this.parent.isDestroyed) {
                return;
            }
            this.parent.on(events.columnVisibilityChanged, this.setVisible, this);
            this.parent.on(events.colGroupRefresh, this.colGroupRefresh, this);
            this.parent.on(events.uiUpdate, this.enableAfterRender, this);
        }
        ContentRender.prototype.renderPanel = function () {
            var gObj = this.parent;
            var div = ej2_base_3.createElement('div', { className: 'e-gridcontent' });
            var innerDiv = ej2_base_3.createElement('div', {
                className: 'e-content'
            });
            this.ariaService.setOptions(innerDiv, { busy: false });
            div.appendChild(innerDiv);
            this.setPanel(div);
            gObj.element.appendChild(div);
        };
        ContentRender.prototype.renderTable = function () {
            var contentDiv = this.getPanel();
            contentDiv.appendChild(this.createContentTable('_content_table'));
            this.setTable(contentDiv.querySelector('.e-table'));
            this.ariaService.setOptions(this.getTable(), {
                multiselectable: this.parent.selectionSettings.type === 'Multiple'
            });
            this.initializeContentDrop();
            if (this.parent.frozenRows) {
                this.parent.getHeaderContent().classList.add('e-frozenhdrcont');
            }
        };
        ContentRender.prototype.createContentTable = function (id) {
            var innerDiv = this.getPanel().firstChild;
            var table = ej2_base_3.createElement('table', {
                className: 'e-table', attrs: {
                    cellspacing: '0.25px', role: 'grid',
                    id: this.parent.element.id + id
                }
            });
            this.setColGroup(this.parent.element.querySelector('.e-gridheader').querySelector('colgroup').cloneNode(true));
            table.appendChild(this.getColGroup());
            table.appendChild(ej2_base_3.createElement('tbody'));
            innerDiv.appendChild(table);
            return innerDiv;
        };
        ContentRender.prototype.splitRows = function (idx) {
            if (this.parent.getFrozenColumns()) {
                if (idx === 0) {
                    this.freezeRows = this.rows;
                    this.freezeRowElements = this.rowElements;
                }
                else {
                    this.movableRows = this.rows;
                }
            }
        };
        ContentRender.prototype.refreshContentRows = function (args) {
            var _this = this;
            if (args === void 0) { args = {}; }
            var gObj = this.parent;
            if (gObj.currentViewData.length === 0) {
                return;
            }
            var dataSource = gObj.currentViewData;
            var frag = document.createDocumentFragment();
            var hdrfrag = document.createDocumentFragment();
            var columns = gObj.getColumns();
            var tr;
            var hdrTbody;
            var frzCols = gObj.getFrozenColumns();
            var row = new row_renderer_1.RowRenderer(this.serviceLocator, null, this.parent);
            this.rowElements = [];
            this.rows = [];
            var modelData = this.generator.generateRows(dataSource, args);
            var idx = modelData[0].cells[0].index;
            var fCont = this.getPanel().querySelector('.e-frozencontent');
            var mCont = this.getPanel().querySelector('.e-movablecontent');
            var cont = this.getPanel().querySelector('.e-content');
            if (this.parent.registeredTemplate && this.parent.registeredTemplate.template) {
                this.parent.destroyTemplate(['template']);
            }
            if (this.parent.enableColumnVirtualization) {
                var cellMerge = new cell_merge_renderer_1.CellMergeRender(this.serviceLocator, this.parent);
                cellMerge.updateVirtualCells(modelData);
            }
            if (frzCols && idx >= frzCols) {
                this.tbody = mCont.querySelector('tbody');
            }
            else {
                this.tbody = this.getTable().querySelector('tbody');
            }
            for (var i = 0, len = modelData.length; i < len; i++) {
                if (!gObj.rowTemplate) {
                    tr = row.render(modelData[i], columns);
                }
                else {
                    var elements = gObj.getRowTemplate()(ej2_base_2.extend({ index: i }, dataSource[i]), gObj, 'rowTemplate');
                    for (var j = 0; j < elements.length; j++) {
                        var isTR = elements[j].nodeName.toLowerCase() === 'tr';
                        if (isTR || (elements[j].querySelectorAll && elements[j].querySelectorAll('tr').length)) {
                            tr = isTR ? elements[j] : elements[j].querySelector('tr');
                        }
                    }
                }
                if (gObj.frozenRows && i < gObj.frozenRows) {
                    hdrfrag.appendChild(tr);
                }
                else {
                    frag.appendChild(tr);
                }
                this.rows.push(modelData[i]);
                if (modelData[i].isDataRow) {
                    var td = tr.querySelectorAll('.e-rowcell:not(.e-hide)')[0];
                    if (td) {
                        td.classList.add('e-detailrowvisible');
                    }
                    this.rowElements.push(tr);
                }
                this.ariaService.setOptions(this.getTable(), { colcount: gObj.getColumns().length.toString() });
            }
            this.splitRows(idx);
            if (gObj.frozenRows) {
                hdrTbody = frzCols ? gObj.getHeaderContent().querySelector(idx === 0 ? '.e-frozenheader'
                    : '.e-movableheader').querySelector('tbody') : gObj.getHeaderTable().querySelector('tbody');
                hdrTbody.innerHTML = '';
                hdrTbody.appendChild(hdrfrag);
            }
            if (gObj.frozenRows && idx === 0 && cont.offsetHeight === Number(gObj.height)) {
                cont.style.height = (cont.offsetHeight - hdrTbody.offsetHeight) + 'px';
            }
            if (frzCols && idx === 0) {
                this.getPanel().firstChild.style.overflowY = 'hidden';
            }
            args.rows = this.rows.slice(0);
            args.isFrozen = this.parent.getFrozenColumns() !== 0 && !args.isFrozen;
            util_1.getUpdateUsingRaf(function () {
                _this.parent.notify(events.beforeFragAppend, {});
                ej2_base_3.remove(_this.tbody);
                _this.tbody = ej2_base_3.createElement('tbody');
                if (frzCols) {
                    _this.tbody.appendChild(frag);
                    if (idx === 0) {
                        _this.isLoaded = false;
                        fCont.querySelector('table').appendChild(_this.tbody);
                    }
                    else {
                        if (_this.tbody.childElementCount < 1) {
                            _this.tbody.appendChild(ej2_base_3.createElement('tr').appendChild(ej2_base_3.createElement('td')));
                        }
                        _this.isLoaded = true;
                        mCont.querySelector('table').appendChild(_this.tbody);
                        fCont.style.height = ((mCont.offsetHeight) - util_2.getScrollBarWidth()) + 'px';
                        mCont.style.overflowY = _this.parent.height !== 'auto' ? 'scroll' : 'auto';
                        fCont.style.borderRightWidth = '1px';
                    }
                }
                else {
                    _this.appendContent(_this.tbody, frag, args);
                }
                if (frzCols && idx === 0) {
                    _this.refreshContentRows(ej2_base_2.extend({}, args));
                }
            }, this.rafCallback(ej2_base_2.extend({}, args)));
        };
        ContentRender.prototype.appendContent = function (tbody, frag, args) {
            tbody.appendChild(frag);
            this.getTable().appendChild(tbody);
        };
        ContentRender.prototype.getPanel = function () {
            return this.contentPanel;
        };
        ContentRender.prototype.setPanel = function (panel) {
            this.contentPanel = panel;
        };
        ContentRender.prototype.getTable = function () {
            return this.contentTable;
        };
        ContentRender.prototype.setTable = function (table) {
            this.contentTable = table;
        };
        ContentRender.prototype.getRows = function () {
            return this.parent.getFrozenColumns() ? this.freezeRows : this.rows;
        };
        ContentRender.prototype.getMovableRows = function () {
            return this.movableRows;
        };
        ContentRender.prototype.getRowElements = function () {
            return this.parent.getFrozenColumns() ? this.freezeRowElements : this.rowElements;
        };
        ContentRender.prototype.getMovableRowElements = function () {
            return this.rowElements;
        };
        ContentRender.prototype.setRowElements = function (elements) {
            this.rowElements = elements;
        };
        ContentRender.prototype.getColGroup = function () {
            return this.colgroup;
        };
        ContentRender.prototype.setColGroup = function (colGroup) {
            return this.colgroup = colGroup;
        };
        ContentRender.prototype.setVisible = function (columns) {
            var gObj = this.parent;
            var frzCols = gObj.getFrozenColumns();
            var rows = [];
            if (frzCols) {
                var fRows = this.freezeRows;
                var mRows = this.movableRows;
                var rowLen = fRows.length;
                var cellLen = void 0;
                for (var i = 0, row = void 0; i < rowLen; i++) {
                    cellLen = mRows[i].cells.length;
                    row = fRows[i].clone();
                    for (var j = 0; j < cellLen; j++) {
                        row.cells.push(mRows[i].cells[j]);
                    }
                    rows.push(row);
                }
            }
            else {
                rows = this.getRows();
            }
            var element;
            var testRow;
            rows.some(function (r) { if (r.isDataRow) {
                testRow = r;
            } return r.isDataRow; });
            var tasks = [];
            for (var c = 0, clen = columns.length; c < clen; c++) {
                var column = columns[c];
                var idx = this.parent.getNormalizedColumnIndex(column.uid);
                if (this.canSkip(column, testRow, idx)) {
                    continue;
                }
                var displayVal = column.visible === true ? '' : 'none';
                if (frzCols) {
                    if (idx < frzCols) {
                        ej2_base_3.setStyleAttribute(this.getColGroup().childNodes[idx], { 'display': displayVal });
                    }
                    else {
                        var mTable = gObj.getContent().querySelector('.e-movablecontent').querySelector('colgroup');
                        ej2_base_3.setStyleAttribute(mTable.childNodes[idx - frzCols], { 'display': displayVal });
                    }
                }
                else {
                    ej2_base_3.setStyleAttribute(this.getColGroup().childNodes[idx], { 'display': displayVal });
                }
            }
            this.refreshContentRows({ requestType: 'refresh' });
        };
        ContentRender.prototype.colGroupRefresh = function () {
            if (this.getColGroup()) {
                var colGroup = this.parent.element.querySelector('.e-gridheader').querySelector('colgroup').cloneNode(true);
                this.getTable().replaceChild(colGroup, this.getColGroup());
                this.setColGroup(colGroup);
            }
        };
        ContentRender.prototype.initializeContentDrop = function () {
            var gObj = this.parent;
            var drop = new ej2_base_1.Droppable(gObj.getContent(), {
                accept: '.e-dragclone',
                drop: this.drop
            });
        };
        ContentRender.prototype.canSkip = function (column, row, index) {
            return ej2_base_2.isNullOrUndefined(row) ||
                ej2_base_2.isNullOrUndefined(column.visible) ||
                row.cells[index].visible === column.visible;
        };
        ContentRender.prototype.getModelGenerator = function () {
            return this.generator = this.parent.allowGrouping ? new group_model_generator_1.GroupModelGenerator(this.parent) : new row_model_generator_1.RowModelGenerator(this.parent);
        };
        ContentRender.prototype.renderEmpty = function (tbody) {
            this.getTable().appendChild(tbody);
            if (this.parent.frozenRows) {
                this.parent.getHeaderContent().querySelector('tbody').innerHTML = '';
            }
        };
        ContentRender.prototype.setSelection = function (uid, set, clearAll) {
            if (this.parent.getFrozenColumns()) {
                this.getMovableRows().filter(function (row) { return clearAll || uid === row.uid; }).forEach(function (row) { return row.isSelected = set; });
            }
            this.getRows().filter(function (row) { return clearAll || uid === row.uid; })
                .forEach(function (row) {
                row.isSelected = set;
                row.cells.forEach(function (cell) { return cell.isSelected = set; });
            });
        };
        ContentRender.prototype.getRowByIndex = function (index) {
            return this.parent.getDataRows()[index];
        };
        ContentRender.prototype.getVirtualRowIndex = function (index) {
            return index;
        };
        ContentRender.prototype.getMovableRowByIndex = function (index) {
            return this.parent.getMovableDataRows()[index];
        };
        ContentRender.prototype.enableAfterRender = function (e) {
            if (e.module === 'group' && e.enable) {
                this.generator = this.getModelGenerator();
            }
        };
        return ContentRender;
    }());
    exports.ContentRender = ContentRender;
});
