import { EventHandler, Property, Internationalization, NotifyPropertyChanges } from '@syncfusion/ej2-base';import { KeyboardEvents, KeyboardEventArgs, Animation, EmitType, Event, L10n, Browser, formatUnit } from '@syncfusion/ej2-base';import { createElement, detach, addClass, removeClass, closest, classList, attributes } from '@syncfusion/ej2-base';import { isNullOrUndefined, setValue, getUniqueID } from '@syncfusion/ej2-base';import { Popup } from '@syncfusion/ej2-popups';import { Input, InputObject, IInput, FloatLabelType, BlurEventArgs, FocusEventArgs } from '@syncfusion/ej2-inputs';import { ChangedEventArgs, CalendarView, Calendar } from '../calendar/calendar';
import {PopupObjectArgs,PreventableEventArgs} from "./datepicker";
import {CalendarModel} from "../calendar/calendar-model";

/**
 * Interface for a class DatePicker
 */
export interface DatePickerModel extends CalendarModel{

    /**
     * Specifies the width of the DatePicker component.
     * @default null
     */
    width?: number | string;

    /**
     * Specifies the root CSS class of the DatePicker that allows to
     * customize the appearance by overriding the styles.
     * @default null
     */
    cssClass?: string;

    /**
     * Specifies the component to act as strict. So that, it allows to enter only a valid date value within a specified range or else it 
     * will resets to previous value. By default, strictMode is in false.
     * > For more details refer to 
     * [`Strict Mode`](https://ej2.syncfusion.com/documentation/datepicker/strict-mode.html?lang=typescript) documentation.
     * @default false
     */
    strictMode?: boolean;

    /**
     * Specifies the format of the value that to be displayed in component. By default, the format is
     * based on the culture.
     * > For more details refer to 
     * [`Format`](https://ej2.syncfusion.com/demos/#/material/datepicker/date-format.html) sample.
     * @default null
     */
    format?: string;

    /**
     * Specifies the component to be disabled or not.
     * > For more details refer to 
     * [`Disabled State`](https://ej2.syncfusion.com/documentation/datepicker/how-to.html?lang=typescript#disabled-state) documentation.
     * @default true
     */
    enabled?: boolean;

    /**
     * Specifies whether to show or hide the clear Icon.
     * @default true
     */
    showClearButton?: boolean;

    /**
     * Specifies whether the Component is persist or not. Here value property will be persisting after browser refresh.
     * @default false
     */
    enablePersistence?: boolean;

    /**
     * specifies the z-index value of the datePicker popup element.
     * @default 1000
     */
    zIndex?: number;

    /**
     * Specifies the component in readonly state.
     * > For more details refer to 
     * [`Readonly`](https://ej2.syncfusion.com/documentation/datepicker/how-to.html?lang=typescript#set-the-readonly) documentation.
     * @default false
     */
    readonly?: boolean;

    /**
     * Specifies the placeholder text that displayed in textbox.
     * @default null
     */
    placeholder?: string;

    /**
     * Specifies the placeholder text to be floated.
     * Possible values are:
     * * Never: The label will never float in the input when the placeholder is available.
     * * Always: The floating label will always float above the input.
     * * Auto: The floating label will float above the input after focusing or entering a value in the input.
     * 
     *  @default Never
     *  @aspType string
     */
    floatLabelType?: FloatLabelType;

    /**
     * Triggers when the popup gets open.
     * @event 
     */
    open?: EmitType<PreventableEventArgs | PopupObjectArgs>;

    /**
     * Triggers when the popup gets close.
     * @event 
     */
    close?: EmitType<PreventableEventArgs | PopupObjectArgs>;

    /**
     * Triggers when the control loses the focus.
     * > For more details refer to 
     * [`Blur`](https://ej2.syncfusion.com/documentation/datepicker/how-to.html?lang=typescript#blur-the-datepicker) documentation.
     * @event 
     */
    blur?: EmitType<BlurEventArgs>;

    /**
     *  Triggers when the control gets focus.
     * > For more details refer to 
     * [`Focus`](https://ej2.syncfusion.com/documentation/datepicker/how-to.html?lang=typescript#focus-the-datepicker) documentation.
     * @event 
     */
    focus?: EmitType<FocusEventArgs>;

    /**
     * Triggers when the component is created.
     * @event 
     */
    created?: EmitType<Object>;

    /**
     * Triggers when the component is destroyed.
     * @event 
     */
    destroyed?: EmitType<Object>;

}